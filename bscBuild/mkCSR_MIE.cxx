/*
 * Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
 * 
 * On Tue Mar  8 15:41:57 GMT 2022
 * 
 */
#include "bluesim_primitives.h"
#include "mkCSR_MIE.h"


/* Constructor */
MOD_mkCSR_MIE::MOD_mkCSR_MIE(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_rg_mie(simHdl, "rg_mie", this, 12u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 1u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkCSR_MIE::init_symbols_0()
{
  init_symbol(&symbols[0u], "rg_mie", SYM_MODULE, &INST_rg_mie);
}


/* Rule actions */


/* Methods */

void MOD_mkCSR_MIE::METH_reset()
{
  INST_rg_mie.METH_write(0u);
}

tUInt8 MOD_mkCSR_MIE::METH_RDY_reset()
{
  tUInt8 DEF_CAN_FIRE_reset;
  tUInt8 PORT_RDY_reset;
  DEF_CAN_FIRE_reset = (tUInt8)1u;
  PORT_RDY_reset = DEF_CAN_FIRE_reset;
  return PORT_RDY_reset;
}

tUInt64 MOD_mkCSR_MIE::METH_mv_read()
{
  tUInt64 PORT_mv_read;
  DEF_x__h80 = INST_rg_mie.METH_read();
  PORT_mv_read = (tUInt64)(DEF_x__h80);
  return PORT_mv_read;
}

tUInt8 MOD_mkCSR_MIE::METH_RDY_mv_read()
{
  tUInt8 PORT_RDY_mv_read;
  tUInt8 DEF_CAN_FIRE_mv_read;
  DEF_CAN_FIRE_mv_read = (tUInt8)1u;
  PORT_RDY_mv_read = DEF_CAN_FIRE_mv_read;
  return PORT_RDY_mv_read;
}

tUInt64 MOD_mkCSR_MIE::METH_mav_write(tUInt32 ARG_mav_write_misa, tUInt64 ARG_mav_write_wordxl)
{
  tUInt32 DEF_mie__h92;
  tUInt8 DEF_utie__h128;
  tUInt8 DEF_ueie__h131;
  tUInt8 DEF_usie__h125;
  tUInt8 DEF_stie__h129;
  tUInt8 DEF_seie__h132;
  tUInt8 DEF_ssie__h126;
  tUInt8 DEF_mav_write_misa_BIT_13___d6;
  tUInt8 DEF_mav_write_misa_BIT_18___d3;
  tUInt8 DEF_msie__h127;
  tUInt8 DEF_mtie__h130;
  tUInt8 DEF_meie__h133;
  tUInt64 PORT_mav_write;
  DEF_meie__h133 = (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 11u));
  DEF_mtie__h130 = (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 7u));
  DEF_msie__h127 = (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 3u));
  DEF_mav_write_misa_BIT_18___d3 = (tUInt8)((tUInt8)1u & (ARG_mav_write_misa >> 18u));
  DEF_mav_write_misa_BIT_13___d6 = (tUInt8)((tUInt8)1u & (ARG_mav_write_misa >> 13u));
  DEF_ssie__h126 = DEF_mav_write_misa_BIT_18___d3 && (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 1u));
  DEF_seie__h132 = DEF_mav_write_misa_BIT_18___d3 && (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 9u));
  DEF_stie__h129 = DEF_mav_write_misa_BIT_18___d3 && (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 5u));
  DEF_usie__h125 = DEF_mav_write_misa_BIT_13___d6 && (tUInt8)((tUInt8)1u & ARG_mav_write_wordxl);
  DEF_ueie__h131 = DEF_mav_write_misa_BIT_13___d6 && (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 8u));
  DEF_utie__h128 = DEF_mav_write_misa_BIT_13___d6 && (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 4u));
  DEF_mie__h92 = 4095u & ((((((((((((((tUInt32)(DEF_meie__h133)) << 11u) | (((tUInt32)((tUInt8)0u)) << 10u)) | (((tUInt32)(DEF_seie__h132)) << 9u)) | (((tUInt32)(DEF_ueie__h131)) << 8u)) | (((tUInt32)(DEF_mtie__h130)) << 7u)) | (((tUInt32)((tUInt8)0u)) << 6u)) | (((tUInt32)(DEF_stie__h129)) << 5u)) | (((tUInt32)(DEF_utie__h128)) << 4u)) | (((tUInt32)(DEF_msie__h127)) << 3u)) | (((tUInt32)((tUInt8)0u)) << 2u)) | (((tUInt32)(DEF_ssie__h126)) << 1u)) | (tUInt32)(DEF_usie__h125));
  PORT_mav_write = (tUInt64)(DEF_mie__h92);
  INST_rg_mie.METH_write(DEF_mie__h92);
  return PORT_mav_write;
}

tUInt8 MOD_mkCSR_MIE::METH_RDY_mav_write()
{
  tUInt8 PORT_RDY_mav_write;
  tUInt8 DEF_CAN_FIRE_mav_write;
  DEF_CAN_FIRE_mav_write = (tUInt8)1u;
  PORT_RDY_mav_write = DEF_CAN_FIRE_mav_write;
  return PORT_RDY_mav_write;
}

tUInt64 MOD_mkCSR_MIE::METH_mv_sie_read()
{
  tUInt32 DEF_x__h467;
  tUInt8 DEF_rg_mie_BITS_1_TO_0___h514;
  tUInt64 PORT_mv_sie_read;
  DEF_x__h80 = INST_rg_mie.METH_read();
  DEF_rg_mie_BITS_1_TO_0___h514 = (tUInt8)((tUInt8)3u & DEF_x__h80);
  DEF_x__h467 = 4095u & ((((((((tUInt32)((tUInt8)0u)) << 10u) | (((tUInt32)((tUInt8)((tUInt8)3u & (DEF_x__h80 >> 8u)))) << 8u)) | (((tUInt32)((tUInt8)0u)) << 6u)) | (((tUInt32)((tUInt8)((tUInt8)3u & (DEF_x__h80 >> 4u)))) << 4u)) | (((tUInt32)((tUInt8)0u)) << 2u)) | (tUInt32)(DEF_rg_mie_BITS_1_TO_0___h514));
  PORT_mv_sie_read = (tUInt64)(DEF_x__h467);
  return PORT_mv_sie_read;
}

tUInt8 MOD_mkCSR_MIE::METH_RDY_mv_sie_read()
{
  tUInt8 PORT_RDY_mv_sie_read;
  tUInt8 DEF_CAN_FIRE_mv_sie_read;
  DEF_CAN_FIRE_mv_sie_read = (tUInt8)1u;
  PORT_RDY_mv_sie_read = DEF_CAN_FIRE_mv_sie_read;
  return PORT_RDY_mv_sie_read;
}

tUInt64 MOD_mkCSR_MIE::METH_mav_sie_write(tUInt32 ARG_mav_sie_write_misa,
					  tUInt64 ARG_mav_sie_write_wordxl)
{
  tUInt32 DEF_new_mie__h525;
  tUInt8 DEF_mav_sie_write_misa_BIT_18_2_AND_mav_sie_write__ETC___d48;
  tUInt32 DEF_x__h901;
  tUInt8 DEF_stie__h559;
  tUInt8 DEF_seie__h562;
  tUInt8 DEF_ssie__h556;
  tUInt8 DEF_utie__h558;
  tUInt8 DEF_ueie__h561;
  tUInt8 DEF_usie__h555;
  tUInt8 DEF_mav_sie_write_misa_BIT_13___d35;
  tUInt8 DEF_mav_sie_write_misa_BIT_18___d32;
  tUInt8 DEF_msie__h557;
  tUInt8 DEF_mtie__h560;
  tUInt8 DEF_meie__h563;
  tUInt64 PORT_mav_sie_write;
  DEF_x__h80 = INST_rg_mie.METH_read();
  DEF_meie__h563 = (tUInt8)(DEF_x__h80 >> 11u);
  DEF_mtie__h560 = (tUInt8)((tUInt8)1u & (DEF_x__h80 >> 7u));
  DEF_msie__h557 = (tUInt8)((tUInt8)1u & (DEF_x__h80 >> 3u));
  DEF_mav_sie_write_misa_BIT_18___d32 = (tUInt8)((tUInt8)1u & (ARG_mav_sie_write_misa >> 18u));
  DEF_mav_sie_write_misa_BIT_13___d35 = (tUInt8)((tUInt8)1u & (ARG_mav_sie_write_misa >> 13u));
  DEF_usie__h555 = DEF_mav_sie_write_misa_BIT_13___d35 && (tUInt8)((tUInt8)1u & ARG_mav_sie_write_wordxl);
  DEF_ueie__h561 = DEF_mav_sie_write_misa_BIT_13___d35 && (tUInt8)((tUInt8)1u & (ARG_mav_sie_write_wordxl >> 8u));
  DEF_utie__h558 = DEF_mav_sie_write_misa_BIT_13___d35 && (tUInt8)((tUInt8)1u & (ARG_mav_sie_write_wordxl >> 4u));
  DEF_ssie__h556 = DEF_mav_sie_write_misa_BIT_18___d32 && (tUInt8)((tUInt8)1u & (ARG_mav_sie_write_wordxl >> 1u));
  DEF_seie__h562 = DEF_mav_sie_write_misa_BIT_18___d32 && (tUInt8)((tUInt8)1u & (ARG_mav_sie_write_wordxl >> 9u));
  DEF_stie__h559 = DEF_mav_sie_write_misa_BIT_18___d32 && (tUInt8)((tUInt8)1u & (ARG_mav_sie_write_wordxl >> 5u));
  DEF_mav_sie_write_misa_BIT_18_2_AND_mav_sie_write__ETC___d48 = (tUInt8)3u & ((DEF_ssie__h556 << 1u) | DEF_usie__h555);
  DEF_x__h901 = 4095u & ((((((((((tUInt32)((tUInt8)0u)) << 10u) | (((tUInt32)(DEF_seie__h562)) << 9u)) | (((tUInt32)(DEF_ueie__h561)) << 8u)) | (((tUInt32)((tUInt8)0u)) << 6u)) | (((tUInt32)(DEF_stie__h559)) << 5u)) | (((tUInt32)(DEF_utie__h558)) << 4u)) | (((tUInt32)((tUInt8)0u)) << 2u)) | (tUInt32)(DEF_mav_sie_write_misa_BIT_18_2_AND_mav_sie_write__ETC___d48));
  PORT_mav_sie_write = (tUInt64)(DEF_x__h901);
  DEF_new_mie__h525 = 4095u & (((((((((((((tUInt32)(DEF_meie__h563)) << 11u) | (((tUInt32)((tUInt8)0u)) << 10u)) | (((tUInt32)(DEF_seie__h562)) << 9u)) | (((tUInt32)(DEF_ueie__h561)) << 8u)) | (((tUInt32)(DEF_mtie__h560)) << 7u)) | (((tUInt32)((tUInt8)0u)) << 6u)) | (((tUInt32)(DEF_stie__h559)) << 5u)) | (((tUInt32)(DEF_utie__h558)) << 4u)) | (((tUInt32)(DEF_msie__h557)) << 3u)) | (((tUInt32)((tUInt8)0u)) << 2u)) | (tUInt32)(DEF_mav_sie_write_misa_BIT_18_2_AND_mav_sie_write__ETC___d48));
  INST_rg_mie.METH_write(DEF_new_mie__h525);
  return PORT_mav_sie_write;
}

tUInt8 MOD_mkCSR_MIE::METH_RDY_mav_sie_write()
{
  tUInt8 PORT_RDY_mav_sie_write;
  tUInt8 DEF_CAN_FIRE_mav_sie_write;
  DEF_CAN_FIRE_mav_sie_write = (tUInt8)1u;
  PORT_RDY_mav_sie_write = DEF_CAN_FIRE_mav_sie_write;
  return PORT_RDY_mav_sie_write;
}


/* Reset routines */

void MOD_mkCSR_MIE::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_rg_mie.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkCSR_MIE::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkCSR_MIE::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_rg_mie.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkCSR_MIE::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 3u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h80", 12u);
  num = INST_rg_mie.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkCSR_MIE::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCSR_MIE &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkCSR_MIE::vcd_defs(tVCDDumpType dt, MOD_mkCSR_MIE &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 12u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_x__h80) != DEF_x__h80)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h80, 12u);
	backing.DEF_x__h80 = DEF_x__h80;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_x__h80, 12u);
      backing.DEF_x__h80 = DEF_x__h80;
    }
}

void MOD_mkCSR_MIE::vcd_prims(tVCDDumpType dt, MOD_mkCSR_MIE &backing)
{
  INST_rg_mie.dump_VCD(dt, backing.INST_rg_mie);
}
