/*
 * Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
 * 
 * On Tue Mar  8 15:41:57 GMT 2022
 * 
 */
#include "bluesim_primitives.h"
#include "mkCSR_MIP.h"


/* Constructor */
MOD_mkCSR_MIP::MOD_mkCSR_MIP(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_rg_meip(simHdl, "rg_meip", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rg_msip(simHdl, "rg_msip", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rg_mtip(simHdl, "rg_mtip", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rg_seip(simHdl, "rg_seip", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rg_ssip(simHdl, "rg_ssip", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rg_stip(simHdl, "rg_stip", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rg_ueip(simHdl, "rg_ueip", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rg_usip(simHdl, "rg_usip", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rg_utip(simHdl, "rg_utip", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 9u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkCSR_MIP::init_symbols_0()
{
  init_symbol(&symbols[0u], "rg_meip", SYM_MODULE, &INST_rg_meip);
  init_symbol(&symbols[1u], "rg_msip", SYM_MODULE, &INST_rg_msip);
  init_symbol(&symbols[2u], "rg_mtip", SYM_MODULE, &INST_rg_mtip);
  init_symbol(&symbols[3u], "rg_seip", SYM_MODULE, &INST_rg_seip);
  init_symbol(&symbols[4u], "rg_ssip", SYM_MODULE, &INST_rg_ssip);
  init_symbol(&symbols[5u], "rg_stip", SYM_MODULE, &INST_rg_stip);
  init_symbol(&symbols[6u], "rg_ueip", SYM_MODULE, &INST_rg_ueip);
  init_symbol(&symbols[7u], "rg_usip", SYM_MODULE, &INST_rg_usip);
  init_symbol(&symbols[8u], "rg_utip", SYM_MODULE, &INST_rg_utip);
}


/* Rule actions */


/* Methods */

void MOD_mkCSR_MIP::METH_reset()
{
  INST_rg_meip.METH_write((tUInt8)0u);
  INST_rg_seip.METH_write((tUInt8)0u);
  INST_rg_ueip.METH_write((tUInt8)0u);
  INST_rg_mtip.METH_write((tUInt8)0u);
  INST_rg_stip.METH_write((tUInt8)0u);
  INST_rg_utip.METH_write((tUInt8)0u);
  INST_rg_msip.METH_write((tUInt8)0u);
  INST_rg_ssip.METH_write((tUInt8)0u);
  INST_rg_usip.METH_write((tUInt8)0u);
}

tUInt8 MOD_mkCSR_MIP::METH_RDY_reset()
{
  tUInt8 DEF_CAN_FIRE_reset;
  tUInt8 PORT_RDY_reset;
  DEF_CAN_FIRE_reset = (tUInt8)1u;
  PORT_RDY_reset = DEF_CAN_FIRE_reset;
  return PORT_RDY_reset;
}

tUInt64 MOD_mkCSR_MIP::METH_mv_read()
{
  tUInt32 DEF_new_mip__h598;
  tUInt64 PORT_mv_read;
  DEF__read__h295 = INST_rg_usip.METH_read();
  DEF__read__h264 = INST_rg_ssip.METH_read();
  DEF__read__h204 = INST_rg_utip.METH_read();
  DEF__read__h111 = INST_rg_ueip.METH_read();
  DEF__read__h173 = INST_rg_stip.METH_read();
  DEF__read__h80 = INST_rg_seip.METH_read();
  DEF__read__h49 = INST_rg_meip.METH_read();
  DEF__read__h233 = INST_rg_msip.METH_read();
  DEF__read__h142 = INST_rg_mtip.METH_read();
  DEF_rg_ssip_CONCAT_rg_usip___d10 = (tUInt8)3u & ((DEF__read__h264 << 1u) | DEF__read__h295);
  DEF_new_mip__h598 = 4095u & (((((((((((((tUInt32)(DEF__read__h49)) << 11u) | (((tUInt32)((tUInt8)0u)) << 10u)) | (((tUInt32)(DEF__read__h80)) << 9u)) | (((tUInt32)(DEF__read__h111)) << 8u)) | (((tUInt32)(DEF__read__h142)) << 7u)) | (((tUInt32)((tUInt8)0u)) << 6u)) | (((tUInt32)(DEF__read__h173)) << 5u)) | (((tUInt32)(DEF__read__h204)) << 4u)) | (((tUInt32)(DEF__read__h233)) << 3u)) | (((tUInt32)((tUInt8)0u)) << 2u)) | (tUInt32)(DEF_rg_ssip_CONCAT_rg_usip___d10));
  PORT_mv_read = (tUInt64)(DEF_new_mip__h598);
  return PORT_mv_read;
}

tUInt8 MOD_mkCSR_MIP::METH_RDY_mv_read()
{
  tUInt8 PORT_RDY_mv_read;
  tUInt8 DEF_CAN_FIRE_mv_read;
  DEF_CAN_FIRE_mv_read = (tUInt8)1u;
  PORT_RDY_mv_read = DEF_CAN_FIRE_mv_read;
  return PORT_RDY_mv_read;
}

tUInt64 MOD_mkCSR_MIP::METH_mav_write(tUInt32 ARG_mav_write_misa, tUInt64 ARG_mav_write_wordxl)
{
  tUInt32 DEF_new_mip__h1070;
  tUInt8 DEF_utip__h635;
  tUInt8 DEF_ueip__h633;
  tUInt8 DEF_usip__h637;
  tUInt8 DEF_stip__h634;
  tUInt8 DEF_seip__h632;
  tUInt8 DEF_ssip__h636;
  tUInt8 DEF_mav_write_misa_BIT_13___d19;
  tUInt8 DEF_mav_write_misa_BIT_18___d16;
  tUInt64 PORT_mav_write;
  DEF__read__h49 = INST_rg_meip.METH_read();
  DEF__read__h233 = INST_rg_msip.METH_read();
  DEF__read__h142 = INST_rg_mtip.METH_read();
  DEF_mav_write_misa_BIT_18___d16 = (tUInt8)((tUInt8)1u & (ARG_mav_write_misa >> 18u));
  DEF_mav_write_misa_BIT_13___d19 = (tUInt8)((tUInt8)1u & (ARG_mav_write_misa >> 13u));
  DEF_ssip__h636 = DEF_mav_write_misa_BIT_18___d16 && (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 1u));
  DEF_seip__h632 = DEF_mav_write_misa_BIT_18___d16 && (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 9u));
  DEF_stip__h634 = DEF_mav_write_misa_BIT_18___d16 && (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 5u));
  DEF_usip__h637 = DEF_mav_write_misa_BIT_13___d19 && (tUInt8)((tUInt8)1u & ARG_mav_write_wordxl);
  DEF_ueip__h633 = DEF_mav_write_misa_BIT_13___d19 && (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 8u));
  DEF_utip__h635 = DEF_mav_write_misa_BIT_13___d19 && (tUInt8)((tUInt8)1u & (ARG_mav_write_wordxl >> 4u));
  DEF_new_mip__h1070 = 4095u & ((((((((((((((tUInt32)(DEF__read__h49)) << 11u) | (((tUInt32)((tUInt8)0u)) << 10u)) | (((tUInt32)(DEF_seip__h632)) << 9u)) | (((tUInt32)(DEF_ueip__h633)) << 8u)) | (((tUInt32)(DEF__read__h142)) << 7u)) | (((tUInt32)((tUInt8)0u)) << 6u)) | (((tUInt32)(DEF_stip__h634)) << 5u)) | (((tUInt32)(DEF_utip__h635)) << 4u)) | (((tUInt32)(DEF__read__h233)) << 3u)) | (((tUInt32)((tUInt8)0u)) << 2u)) | (((tUInt32)(DEF_ssip__h636)) << 1u)) | (tUInt32)(DEF_usip__h637));
  PORT_mav_write = (tUInt64)(DEF_new_mip__h1070);
  INST_rg_seip.METH_write(DEF_seip__h632);
  INST_rg_ueip.METH_write(DEF_ueip__h633);
  INST_rg_stip.METH_write(DEF_stip__h634);
  INST_rg_utip.METH_write(DEF_utip__h635);
  INST_rg_ssip.METH_write(DEF_ssip__h636);
  INST_rg_usip.METH_write(DEF_usip__h637);
  return PORT_mav_write;
}

tUInt8 MOD_mkCSR_MIP::METH_RDY_mav_write()
{
  tUInt8 PORT_RDY_mav_write;
  tUInt8 DEF_CAN_FIRE_mav_write;
  DEF_CAN_FIRE_mav_write = (tUInt8)1u;
  PORT_RDY_mav_write = DEF_CAN_FIRE_mav_write;
  return PORT_RDY_mav_write;
}

tUInt64 MOD_mkCSR_MIP::METH_mv_sip_read()
{
  tUInt32 DEF_rg_ueip_CONCAT_0b0_CONCAT_rg_stip_CONCAT_rg_ut_ETC___d38;
  tUInt64 PORT_mv_sip_read;
  DEF__read__h295 = INST_rg_usip.METH_read();
  DEF__read__h264 = INST_rg_ssip.METH_read();
  DEF__read__h204 = INST_rg_utip.METH_read();
  DEF__read__h173 = INST_rg_stip.METH_read();
  DEF__read__h111 = INST_rg_ueip.METH_read();
  DEF__read__h80 = INST_rg_seip.METH_read();
  DEF_rg_ssip_CONCAT_rg_usip___d10 = (tUInt8)3u & ((DEF__read__h264 << 1u) | DEF__read__h295);
  DEF_rg_ueip_CONCAT_0b0_CONCAT_rg_stip_CONCAT_rg_ut_ETC___d38 = 511u & ((((((((tUInt32)(DEF__read__h111)) << 8u) | (((tUInt32)((tUInt8)0u)) << 6u)) | (((tUInt32)(DEF__read__h173)) << 5u)) | (((tUInt32)(DEF__read__h204)) << 4u)) | (((tUInt32)((tUInt8)0u)) << 2u)) | (tUInt32)(DEF_rg_ssip_CONCAT_rg_usip___d10));
  PORT_mv_sip_read = (((tUInt64)(DEF__read__h80)) << 9u) | (tUInt64)(DEF_rg_ueip_CONCAT_0b0_CONCAT_rg_stip_CONCAT_rg_ut_ETC___d38);
  return PORT_mv_sip_read;
}

tUInt8 MOD_mkCSR_MIP::METH_RDY_mv_sip_read()
{
  tUInt8 PORT_RDY_mv_sip_read;
  tUInt8 DEF_CAN_FIRE_mv_sip_read;
  DEF_CAN_FIRE_mv_sip_read = (tUInt8)1u;
  PORT_RDY_mv_sip_read = DEF_CAN_FIRE_mv_sip_read;
  return PORT_RDY_mv_sip_read;
}

tUInt64 MOD_mkCSR_MIP::METH_mav_sip_write(tUInt32 ARG_mav_sip_write_misa,
					  tUInt64 ARG_mav_sip_write_wordxl)
{
  tUInt32 DEF_mav_sip_write_misa_BIT_13_9_AND_mav_sip_write__ETC___d49;
  tUInt8 DEF_usip__h1111;
  tUInt8 DEF_ueip__h1109;
  tUInt8 DEF_ssip__h1110;
  tUInt8 DEF_mav_sip_write_misa_BIT_13___d39;
  tUInt64 PORT_mav_sip_write;
  DEF__read__h204 = INST_rg_utip.METH_read();
  DEF__read__h173 = INST_rg_stip.METH_read();
  DEF__read__h80 = INST_rg_seip.METH_read();
  DEF_ssip__h1110 = (tUInt8)((tUInt8)1u & (ARG_mav_sip_write_misa >> 18u)) && (tUInt8)((tUInt8)1u & (ARG_mav_sip_write_wordxl >> 1u));
  DEF_mav_sip_write_misa_BIT_13___d39 = (tUInt8)((tUInt8)1u & (ARG_mav_sip_write_misa >> 13u));
  DEF_ueip__h1109 = DEF_mav_sip_write_misa_BIT_13___d39 && (tUInt8)((tUInt8)1u & (ARG_mav_sip_write_wordxl >> 8u));
  DEF_usip__h1111 = DEF_mav_sip_write_misa_BIT_13___d39 && (tUInt8)((tUInt8)1u & ARG_mav_sip_write_wordxl);
  DEF_mav_sip_write_misa_BIT_13_9_AND_mav_sip_write__ETC___d49 = 511u & (((((((((tUInt32)(DEF_ueip__h1109)) << 8u) | (((tUInt32)((tUInt8)0u)) << 6u)) | (((tUInt32)(DEF__read__h173)) << 5u)) | (((tUInt32)(DEF__read__h204)) << 4u)) | (((tUInt32)((tUInt8)0u)) << 2u)) | (((tUInt32)(DEF_ssip__h1110)) << 1u)) | (tUInt32)(DEF_usip__h1111));
  PORT_mav_sip_write = (((tUInt64)(DEF__read__h80)) << 9u) | (tUInt64)(DEF_mav_sip_write_misa_BIT_13_9_AND_mav_sip_write__ETC___d49);
  INST_rg_ueip.METH_write(DEF_ueip__h1109);
  INST_rg_ssip.METH_write(DEF_ssip__h1110);
  INST_rg_usip.METH_write(DEF_usip__h1111);
  return PORT_mav_sip_write;
}

tUInt8 MOD_mkCSR_MIP::METH_RDY_mav_sip_write()
{
  tUInt8 PORT_RDY_mav_sip_write;
  tUInt8 DEF_CAN_FIRE_mav_sip_write;
  DEF_CAN_FIRE_mav_sip_write = (tUInt8)1u;
  PORT_RDY_mav_sip_write = DEF_CAN_FIRE_mav_sip_write;
  return PORT_RDY_mav_sip_write;
}

void MOD_mkCSR_MIP::METH_m_external_interrupt_req(tUInt8 ARG_m_external_interrupt_req_req)
{
  INST_rg_meip.METH_write(ARG_m_external_interrupt_req_req);
}

tUInt8 MOD_mkCSR_MIP::METH_RDY_m_external_interrupt_req()
{
  tUInt8 DEF_CAN_FIRE_m_external_interrupt_req;
  tUInt8 PORT_RDY_m_external_interrupt_req;
  DEF_CAN_FIRE_m_external_interrupt_req = (tUInt8)1u;
  PORT_RDY_m_external_interrupt_req = DEF_CAN_FIRE_m_external_interrupt_req;
  return PORT_RDY_m_external_interrupt_req;
}

void MOD_mkCSR_MIP::METH_s_external_interrupt_req(tUInt8 ARG_s_external_interrupt_req_req)
{
  INST_rg_seip.METH_write(ARG_s_external_interrupt_req_req);
}

tUInt8 MOD_mkCSR_MIP::METH_RDY_s_external_interrupt_req()
{
  tUInt8 DEF_CAN_FIRE_s_external_interrupt_req;
  tUInt8 PORT_RDY_s_external_interrupt_req;
  DEF_CAN_FIRE_s_external_interrupt_req = (tUInt8)1u;
  PORT_RDY_s_external_interrupt_req = DEF_CAN_FIRE_s_external_interrupt_req;
  return PORT_RDY_s_external_interrupt_req;
}

void MOD_mkCSR_MIP::METH_software_interrupt_req(tUInt8 ARG_software_interrupt_req_req)
{
  INST_rg_msip.METH_write(ARG_software_interrupt_req_req);
}

tUInt8 MOD_mkCSR_MIP::METH_RDY_software_interrupt_req()
{
  tUInt8 DEF_CAN_FIRE_software_interrupt_req;
  tUInt8 PORT_RDY_software_interrupt_req;
  DEF_CAN_FIRE_software_interrupt_req = (tUInt8)1u;
  PORT_RDY_software_interrupt_req = DEF_CAN_FIRE_software_interrupt_req;
  return PORT_RDY_software_interrupt_req;
}

void MOD_mkCSR_MIP::METH_timer_interrupt_req(tUInt8 ARG_timer_interrupt_req_req)
{
  INST_rg_mtip.METH_write(ARG_timer_interrupt_req_req);
}

tUInt8 MOD_mkCSR_MIP::METH_RDY_timer_interrupt_req()
{
  tUInt8 DEF_CAN_FIRE_timer_interrupt_req;
  tUInt8 PORT_RDY_timer_interrupt_req;
  DEF_CAN_FIRE_timer_interrupt_req = (tUInt8)1u;
  PORT_RDY_timer_interrupt_req = DEF_CAN_FIRE_timer_interrupt_req;
  return PORT_RDY_timer_interrupt_req;
}


/* Reset routines */

void MOD_mkCSR_MIP::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_rg_utip.reset_RST(ARG_rst_in);
  INST_rg_usip.reset_RST(ARG_rst_in);
  INST_rg_ueip.reset_RST(ARG_rst_in);
  INST_rg_stip.reset_RST(ARG_rst_in);
  INST_rg_ssip.reset_RST(ARG_rst_in);
  INST_rg_seip.reset_RST(ARG_rst_in);
  INST_rg_mtip.reset_RST(ARG_rst_in);
  INST_rg_msip.reset_RST(ARG_rst_in);
  INST_rg_meip.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkCSR_MIP::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkCSR_MIP::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_rg_meip.dump_state(indent + 2u);
  INST_rg_msip.dump_state(indent + 2u);
  INST_rg_mtip.dump_state(indent + 2u);
  INST_rg_seip.dump_state(indent + 2u);
  INST_rg_ssip.dump_state(indent + 2u);
  INST_rg_stip.dump_state(indent + 2u);
  INST_rg_ueip.dump_state(indent + 2u);
  INST_rg_usip.dump_state(indent + 2u);
  INST_rg_utip.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkCSR_MIP::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 20u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h111", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h142", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h173", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h204", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h233", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h264", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h295", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h49", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h80", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rg_ssip_CONCAT_rg_usip___d10", 2u);
  num = INST_rg_meip.dump_VCD_defs(num);
  num = INST_rg_msip.dump_VCD_defs(num);
  num = INST_rg_mtip.dump_VCD_defs(num);
  num = INST_rg_seip.dump_VCD_defs(num);
  num = INST_rg_ssip.dump_VCD_defs(num);
  num = INST_rg_stip.dump_VCD_defs(num);
  num = INST_rg_ueip.dump_VCD_defs(num);
  num = INST_rg_usip.dump_VCD_defs(num);
  num = INST_rg_utip.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkCSR_MIP::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCSR_MIP &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkCSR_MIP::vcd_defs(tVCDDumpType dt, MOD_mkCSR_MIP &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF__read__h111) != DEF__read__h111)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h111, 1u);
	backing.DEF__read__h111 = DEF__read__h111;
      }
      ++num;
      if ((backing.DEF__read__h142) != DEF__read__h142)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h142, 1u);
	backing.DEF__read__h142 = DEF__read__h142;
      }
      ++num;
      if ((backing.DEF__read__h173) != DEF__read__h173)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h173, 1u);
	backing.DEF__read__h173 = DEF__read__h173;
      }
      ++num;
      if ((backing.DEF__read__h204) != DEF__read__h204)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h204, 1u);
	backing.DEF__read__h204 = DEF__read__h204;
      }
      ++num;
      if ((backing.DEF__read__h233) != DEF__read__h233)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h233, 1u);
	backing.DEF__read__h233 = DEF__read__h233;
      }
      ++num;
      if ((backing.DEF__read__h264) != DEF__read__h264)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h264, 1u);
	backing.DEF__read__h264 = DEF__read__h264;
      }
      ++num;
      if ((backing.DEF__read__h295) != DEF__read__h295)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h295, 1u);
	backing.DEF__read__h295 = DEF__read__h295;
      }
      ++num;
      if ((backing.DEF__read__h49) != DEF__read__h49)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h49, 1u);
	backing.DEF__read__h49 = DEF__read__h49;
      }
      ++num;
      if ((backing.DEF__read__h80) != DEF__read__h80)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h80, 1u);
	backing.DEF__read__h80 = DEF__read__h80;
      }
      ++num;
      if ((backing.DEF_rg_ssip_CONCAT_rg_usip___d10) != DEF_rg_ssip_CONCAT_rg_usip___d10)
      {
	vcd_write_val(sim_hdl, num, DEF_rg_ssip_CONCAT_rg_usip___d10, 2u);
	backing.DEF_rg_ssip_CONCAT_rg_usip___d10 = DEF_rg_ssip_CONCAT_rg_usip___d10;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF__read__h111, 1u);
      backing.DEF__read__h111 = DEF__read__h111;
      vcd_write_val(sim_hdl, num++, DEF__read__h142, 1u);
      backing.DEF__read__h142 = DEF__read__h142;
      vcd_write_val(sim_hdl, num++, DEF__read__h173, 1u);
      backing.DEF__read__h173 = DEF__read__h173;
      vcd_write_val(sim_hdl, num++, DEF__read__h204, 1u);
      backing.DEF__read__h204 = DEF__read__h204;
      vcd_write_val(sim_hdl, num++, DEF__read__h233, 1u);
      backing.DEF__read__h233 = DEF__read__h233;
      vcd_write_val(sim_hdl, num++, DEF__read__h264, 1u);
      backing.DEF__read__h264 = DEF__read__h264;
      vcd_write_val(sim_hdl, num++, DEF__read__h295, 1u);
      backing.DEF__read__h295 = DEF__read__h295;
      vcd_write_val(sim_hdl, num++, DEF__read__h49, 1u);
      backing.DEF__read__h49 = DEF__read__h49;
      vcd_write_val(sim_hdl, num++, DEF__read__h80, 1u);
      backing.DEF__read__h80 = DEF__read__h80;
      vcd_write_val(sim_hdl, num++, DEF_rg_ssip_CONCAT_rg_usip___d10, 2u);
      backing.DEF_rg_ssip_CONCAT_rg_usip___d10 = DEF_rg_ssip_CONCAT_rg_usip___d10;
    }
}

void MOD_mkCSR_MIP::vcd_prims(tVCDDumpType dt, MOD_mkCSR_MIP &backing)
{
  INST_rg_meip.dump_VCD(dt, backing.INST_rg_meip);
  INST_rg_msip.dump_VCD(dt, backing.INST_rg_msip);
  INST_rg_mtip.dump_VCD(dt, backing.INST_rg_mtip);
  INST_rg_seip.dump_VCD(dt, backing.INST_rg_seip);
  INST_rg_ssip.dump_VCD(dt, backing.INST_rg_ssip);
  INST_rg_stip.dump_VCD(dt, backing.INST_rg_stip);
  INST_rg_ueip.dump_VCD(dt, backing.INST_rg_ueip);
  INST_rg_usip.dump_VCD(dt, backing.INST_rg_usip);
  INST_rg_utip.dump_VCD(dt, backing.INST_rg_utip);
}
