/*
 * Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
 * 
 * On Tue Mar  8 15:41:57 GMT 2022
 * 
 */
#include "bluesim_primitives.h"
#include "mkFBox_Top.h"


/* Constructor */
MOD_mkFBox_Top::MOD_mkFBox_Top(tSimStateHdl simHdl,
			       char const *name,
			       Module *parent,
			       tUInt8 ARG_verbosity)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_fbox_core(simHdl, "fbox_core", this, ARG_verbosity),
    PORT_RST_N((tUInt8)1u),
    PORT_verbosity(ARG_verbosity)
{
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkFBox_Top::init_symbols_0()
{
  init_symbol(&symbols[0u], "fbox_core", SYM_MODULE, &INST_fbox_core);
  init_symbol(&symbols[1u], "verbosity", SYM_PORT, &PORT_verbosity, 4u);
}


/* Rule actions */


/* Methods */

void MOD_mkFBox_Top::METH_server_reset_request_put(tUInt8 ARG_server_reset_request_put)
{
  INST_fbox_core.METH_server_reset_request_put(ARG_server_reset_request_put);
}

tUInt8 MOD_mkFBox_Top::METH_RDY_server_reset_request_put()
{
  tUInt8 DEF_CAN_FIRE_server_reset_request_put;
  tUInt8 PORT_RDY_server_reset_request_put;
  DEF_CAN_FIRE_server_reset_request_put = INST_fbox_core.METH_RDY_server_reset_request_put();
  PORT_RDY_server_reset_request_put = DEF_CAN_FIRE_server_reset_request_put;
  return PORT_RDY_server_reset_request_put;
}

void MOD_mkFBox_Top::METH_server_reset_response_get()
{
  INST_fbox_core.METH_server_reset_response_get();
}

tUInt8 MOD_mkFBox_Top::METH_RDY_server_reset_response_get()
{
  tUInt8 DEF_CAN_FIRE_server_reset_response_get;
  tUInt8 PORT_RDY_server_reset_response_get;
  DEF_CAN_FIRE_server_reset_response_get = INST_fbox_core.METH_RDY_server_reset_response_get();
  PORT_RDY_server_reset_response_get = DEF_CAN_FIRE_server_reset_response_get;
  return PORT_RDY_server_reset_response_get;
}

void MOD_mkFBox_Top::METH_req(tUInt8 ARG_req_opcode,
			      tUInt8 ARG_req_f7,
			      tUInt8 ARG_req_rm,
			      tUInt8 ARG_req_rs2,
			      tUInt64 ARG_req_v1,
			      tUInt64 ARG_req_v2,
			      tUInt64 ARG_req_v3,
			      tUInt8 ARG_req_valid)
{
  INST_fbox_core.METH_req(ARG_req_opcode,
			  ARG_req_f7,
			  ARG_req_rm,
			  ARG_req_rs2,
			  ARG_req_v1,
			  ARG_req_v2,
			  ARG_req_v3,
			  ARG_req_valid);
}

tUInt8 MOD_mkFBox_Top::METH_RDY_req()
{
  tUInt8 PORT_RDY_req;
  tUInt8 DEF_CAN_FIRE_req;
  DEF_CAN_FIRE_req = (tUInt8)1u;
  PORT_RDY_req = DEF_CAN_FIRE_req;
  return PORT_RDY_req;
}

tUInt8 MOD_mkFBox_Top::METH_valid()
{
  tUInt8 PORT_valid;
  PORT_valid = INST_fbox_core.METH_valid();
  return PORT_valid;
}

tUInt8 MOD_mkFBox_Top::METH_RDY_valid()
{
  tUInt8 PORT_RDY_valid;
  tUInt8 DEF_CAN_FIRE_valid;
  DEF_CAN_FIRE_valid = (tUInt8)1u;
  PORT_RDY_valid = DEF_CAN_FIRE_valid;
  return PORT_RDY_valid;
}

tUInt64 MOD_mkFBox_Top::METH_word_fst()
{
  tUInt64 PORT_word_fst;
  PORT_word_fst = INST_fbox_core.METH_word_fst();
  return PORT_word_fst;
}

tUInt8 MOD_mkFBox_Top::METH_RDY_word_fst()
{
  tUInt8 PORT_RDY_word_fst;
  tUInt8 DEF_CAN_FIRE_word_fst;
  DEF_CAN_FIRE_word_fst = (tUInt8)1u;
  PORT_RDY_word_fst = DEF_CAN_FIRE_word_fst;
  return PORT_RDY_word_fst;
}

tUInt8 MOD_mkFBox_Top::METH_word_snd()
{
  tUInt8 PORT_word_snd;
  PORT_word_snd = INST_fbox_core.METH_word_snd();
  return PORT_word_snd;
}

tUInt8 MOD_mkFBox_Top::METH_RDY_word_snd()
{
  tUInt8 PORT_RDY_word_snd;
  tUInt8 DEF_CAN_FIRE_word_snd;
  DEF_CAN_FIRE_word_snd = (tUInt8)1u;
  PORT_RDY_word_snd = DEF_CAN_FIRE_word_snd;
  return PORT_RDY_word_snd;
}


/* Reset routines */

void MOD_mkFBox_Top::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_fbox_core.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkFBox_Top::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkFBox_Top::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_fbox_core.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkFBox_Top::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_fbox_core.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkFBox_Top::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFBox_Top &backing)
{
  vcd_defs(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkFBox_Top::vcd_defs(tVCDDumpType dt, MOD_mkFBox_Top &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkFBox_Top::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkFBox_Top &backing)
{
  INST_fbox_core.dump_VCD(dt, levels, backing.INST_fbox_core);
}
