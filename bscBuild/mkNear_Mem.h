/*
 * Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
 * 
 * On Tue Mar  8 15:41:57 GMT 2022
 * 
 */

/* Generation options: */
#ifndef __mkNear_Mem_h__
#define __mkNear_Mem_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkMMU_DCache.h"
#include "mkMMU_ICache.h"
#include "mkSoC_Map.h"


/* Class declaration for the mkNear_Mem module */
class MOD_mkNear_Mem : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_ConfigReg<tUInt8> INST_cfg_verbosity;
  MOD_mkMMU_DCache INST_dcache;
  MOD_Fifo<tUInt8> INST_f_reset_rsps;
  MOD_Fifo<tUInt8> INST_f_sfence_vma_reqs;
  MOD_Fifo<tUInt8> INST_f_sfence_vma_rsps;
  MOD_mkMMU_ICache INST_icache;
  MOD_Reg<tUInt8> INST_rg_state;
  MOD_mkSoC_Map INST_soc_map;
 
 /* Constructor */
 public:
  MOD_mkNear_Mem(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_server_fence_i_request_put;
  tUInt8 PORT_EN_server_fence_request_put;
  tUWide PORT_dma_server_aw_put_val;
  tUWide PORT_dma_server_w_put_val;
  tUWide PORT_dma_server_ar_put_val;
  tUWide PORT_imem_master_r_put_val;
  tUWide PORT_mem_master_r_put_val;
  tUWide PORT_dmem_req_store_value;
  tUWide PORT_dma_server_r_peek;
  tUWide PORT_imem_master_aw_peek;
  tUWide PORT_imem_master_w_peek;
  tUWide PORT_imem_master_ar_peek;
  tUWide PORT_mem_master_aw_peek;
  tUWide PORT_mem_master_w_peek;
  tUWide PORT_mem_master_ar_peek;
  tUWide PORT_imem_events;
  tUWide PORT_dmem_word128_snd;
  tUWide PORT_dmem_st_amo_val;
  tUWide PORT_dmem_events;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_server_fence_request_put;
  tUInt8 DEF_WILL_FIRE_server_fence_i_request_put;
  tUInt8 DEF_dcache_RDY_server_flush_response_get____d82;
  tUInt8 DEF_dcache_RDY_server_flush_request_put____d80;
  tUInt8 DEF_rg_state__h1063;
 
 /* Local definitions */
 private:
  tUWide DEF__0_CONCAT_DONTCARE___d24;
  tUInt32 DEF_v__h1351;
  tUInt32 DEF_v__h1197;
  tUWide DEF_x__h1961;
  tUInt64 DEF_icache_addr____d25;
  tUInt8 DEF_x__h1332;
  tUInt8 DEF_NOT_cfg_verbosity_read_ULE_1___d9;
  tUWide DEF__0_CONCAT_dcache_events__4_BIT_11_9_0_CONCAT_0__ETC___d78;
  tUWide DEF__0_CONCAT_dcache_events__4_BIT_9_3_4_CONCAT_0_C_ETC___d77;
  tUWide DEF__0_CONCAT_dcache_events__4_BIT_7_7_8_CONCAT_0_C_ETC___d76;
  tUWide DEF__0_CONCAT_dcache_events__4_BIT_5_1_2_CONCAT_0_C_ETC___d75;
  tUWide DEF__0_CONCAT_dcache_events__4_BIT_3_5_6_CONCAT_0_C_ETC___d74;
  tUWide DEF__0_CONCAT_icache_events__7_BIT_11_2_3_CONCAT_0__ETC___d43;
  tUWide DEF__0_CONCAT_icache_events__7_BIT_3_6_7_CONCAT_0_C_ETC___d42;
  tUWide DEF__0_CONCAT_dcache_events__4_BIT_1_9_0_CONCAT_0_C_ETC___d73;
 
 /* Rules */
 public:
  void RL_rl_reset();
  void RL_rl_reset_complete();
  void RL_rl_sfence_vma();
 
 /* Methods */
 public:
  tUInt8 METH_imem_is_i32_not_i16();
  tUInt8 METH_RDY_imem_is_i32_not_i16();
  tUInt8 METH_dma_server_aw_canPut();
  tUInt8 METH_RDY_dma_server_aw_canPut();
  tUInt8 METH_dma_server_w_canPut();
  tUInt8 METH_RDY_dma_server_w_canPut();
  tUInt8 METH_dma_server_b_canPeek();
  tUInt8 METH_RDY_dma_server_b_canPeek();
  tUInt8 METH_dma_server_b_peek();
  tUInt8 METH_RDY_dma_server_b_peek();
  tUInt8 METH_dma_server_ar_canPut();
  tUInt8 METH_RDY_dma_server_ar_canPut();
  tUInt8 METH_dma_server_r_canPeek();
  tUInt8 METH_RDY_dma_server_r_canPeek();
  tUWide METH_dma_server_r_peek();
  tUInt8 METH_RDY_dma_server_r_peek();
  void METH_server_reset_request_put(tUInt8 ARG_server_reset_request_put);
  tUInt8 METH_RDY_server_reset_request_put();
  void METH_server_reset_response_get();
  tUInt8 METH_RDY_server_reset_response_get();
  void METH_imem_req(tUInt8 ARG_imem_req_f3,
		     tUInt64 ARG_imem_req_addr,
		     tUInt8 ARG_imem_req_priv,
		     tUInt8 ARG_imem_req_sstatus_SUM,
		     tUInt8 ARG_imem_req_mstatus_MXR,
		     tUInt64 ARG_imem_req_satp);
  tUInt8 METH_RDY_imem_req();
  void METH_imem_commit();
  tUInt8 METH_RDY_imem_commit();
  tUInt8 METH_imem_valid();
  tUInt8 METH_RDY_imem_valid();
  tUInt64 METH_imem_pc();
  tUInt8 METH_RDY_imem_pc();
  tUInt32 METH_imem_instr();
  tUInt8 METH_RDY_imem_instr();
  tUInt8 METH_imem_exc();
  tUInt8 METH_RDY_imem_exc();
  tUInt8 METH_imem_exc_code();
  tUInt8 METH_RDY_imem_exc_code();
  tUInt64 METH_imem_tval();
  tUInt8 METH_RDY_imem_tval();
  tUWide METH_imem_events();
  tUInt8 METH_RDY_imem_events();
  tUInt8 METH_imem_master_aw_canPeek();
  tUInt8 METH_RDY_imem_master_aw_canPeek();
  tUWide METH_imem_master_aw_peek();
  tUInt8 METH_RDY_imem_master_aw_peek();
  void METH_imem_master_aw_drop();
  tUInt8 METH_RDY_imem_master_aw_drop();
  tUInt8 METH_imem_master_w_canPeek();
  tUInt8 METH_RDY_imem_master_w_canPeek();
  tUWide METH_imem_master_w_peek();
  tUInt8 METH_RDY_imem_master_w_peek();
  void METH_imem_master_w_drop();
  tUInt8 METH_RDY_imem_master_w_drop();
  tUInt8 METH_imem_master_b_canPut();
  tUInt8 METH_RDY_imem_master_b_canPut();
  void METH_imem_master_b_put(tUInt8 ARG_imem_master_b_put_val);
  tUInt8 METH_RDY_imem_master_b_put();
  tUInt8 METH_imem_master_ar_canPeek();
  tUInt8 METH_RDY_imem_master_ar_canPeek();
  tUWide METH_imem_master_ar_peek();
  tUInt8 METH_RDY_imem_master_ar_peek();
  void METH_imem_master_ar_drop();
  tUInt8 METH_RDY_imem_master_ar_drop();
  tUInt8 METH_imem_master_r_canPut();
  tUInt8 METH_RDY_imem_master_r_canPut();
  void METH_imem_master_r_put(tUWide ARG_imem_master_r_put_val);
  tUInt8 METH_RDY_imem_master_r_put();
  void METH_dmem_req(tUInt8 ARG_dmem_req_op,
		     tUInt8 ARG_dmem_req_f3,
		     tUInt8 ARG_dmem_req_is_unsigned,
		     tUInt8 ARG_dmem_req_amo_funct5,
		     tUInt64 ARG_dmem_req_addr,
		     tUWide ARG_dmem_req_store_value,
		     tUInt8 ARG_dmem_req_priv,
		     tUInt8 ARG_dmem_req_sstatus_SUM,
		     tUInt8 ARG_dmem_req_mstatus_MXR,
		     tUInt64 ARG_dmem_req_satp);
  tUInt8 METH_RDY_dmem_req();
  void METH_dmem_commit();
  tUInt8 METH_RDY_dmem_commit();
  tUInt8 METH_dmem_valid();
  tUInt8 METH_RDY_dmem_valid();
  tUInt8 METH_dmem_word128_fst();
  tUInt8 METH_RDY_dmem_word128_fst();
  tUWide METH_dmem_word128_snd();
  tUInt8 METH_RDY_dmem_word128_snd();
  tUWide METH_dmem_st_amo_val();
  tUInt8 METH_RDY_dmem_st_amo_val();
  tUInt8 METH_dmem_exc();
  tUInt8 METH_RDY_dmem_exc();
  tUInt8 METH_dmem_exc_code();
  tUInt8 METH_RDY_dmem_exc_code();
  tUWide METH_dmem_events();
  tUInt8 METH_RDY_dmem_events();
  tUInt8 METH_mem_master_aw_canPeek();
  tUInt8 METH_RDY_mem_master_aw_canPeek();
  tUWide METH_mem_master_aw_peek();
  tUInt8 METH_RDY_mem_master_aw_peek();
  void METH_mem_master_aw_drop();
  tUInt8 METH_RDY_mem_master_aw_drop();
  tUInt8 METH_mem_master_w_canPeek();
  tUInt8 METH_RDY_mem_master_w_canPeek();
  tUWide METH_mem_master_w_peek();
  tUInt8 METH_RDY_mem_master_w_peek();
  void METH_mem_master_w_drop();
  tUInt8 METH_RDY_mem_master_w_drop();
  tUInt8 METH_mem_master_b_canPut();
  tUInt8 METH_RDY_mem_master_b_canPut();
  void METH_mem_master_b_put(tUInt8 ARG_mem_master_b_put_val);
  tUInt8 METH_RDY_mem_master_b_put();
  tUInt8 METH_mem_master_ar_canPeek();
  tUInt8 METH_RDY_mem_master_ar_canPeek();
  tUWide METH_mem_master_ar_peek();
  tUInt8 METH_RDY_mem_master_ar_peek();
  void METH_mem_master_ar_drop();
  tUInt8 METH_RDY_mem_master_ar_drop();
  tUInt8 METH_mem_master_r_canPut();
  tUInt8 METH_RDY_mem_master_r_canPut();
  void METH_mem_master_r_put(tUWide ARG_mem_master_r_put_val);
  tUInt8 METH_RDY_mem_master_r_put();
  void METH_server_fence_i_request_put(tUInt8 ARG_server_fence_i_request_put);
  tUInt8 METH_RDY_server_fence_i_request_put();
  void METH_server_fence_i_response_get();
  tUInt8 METH_RDY_server_fence_i_response_get();
  void METH_server_fence_request_put(tUInt8 ARG_server_fence_request_put);
  tUInt8 METH_RDY_server_fence_request_put();
  void METH_server_fence_response_get();
  tUInt8 METH_RDY_server_fence_response_get();
  void METH_sfence_vma_server_request_put(tUInt8 ARG_sfence_vma_server_request_put);
  tUInt8 METH_RDY_sfence_vma_server_request_put();
  void METH_sfence_vma_server_response_get();
  tUInt8 METH_RDY_sfence_vma_server_response_get();
  void METH_dma_server_aw_put(tUWide ARG_dma_server_aw_put_val);
  tUInt8 METH_RDY_dma_server_aw_put();
  void METH_dma_server_w_put(tUWide ARG_dma_server_w_put_val);
  tUInt8 METH_RDY_dma_server_w_put();
  void METH_dma_server_b_drop();
  tUInt8 METH_RDY_dma_server_b_drop();
  void METH_dma_server_ar_put(tUWide ARG_dma_server_ar_put_val);
  tUInt8 METH_RDY_dma_server_ar_put();
  void METH_dma_server_r_drop();
  tUInt8 METH_RDY_dma_server_r_drop();
  void METH_ma_ddr4_ready();
  tUInt8 METH_RDY_ma_ddr4_ready();
  tUInt8 METH_mv_status();
  tUInt8 METH_RDY_mv_status();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkNear_Mem &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkNear_Mem &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkNear_Mem &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkNear_Mem &backing);
};

#endif /* ifndef __mkNear_Mem_h__ */
