/*
 * Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
 * 
 * On Fri Mar 25 15:59:20 CET 2022
 * 
 */

/* Generation options: */
#ifndef __mkNear_Mem_IO_AXI4_h__
#define __mkNear_Mem_IO_AXI4_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkNear_Mem_IO_AXI4 module */
class MOD_mkNear_Mem_IO_AXI4 : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_ConfigReg<tUInt8> INST_cfg_verbosity;
  MOD_CReg<tUInt64> INST_crg_time;
  MOD_CReg<tUInt64> INST_crg_timecmp;
  MOD_Fifo<tUInt8> INST_f_reset_reqs;
  MOD_Fifo<tUInt8> INST_f_reset_rsps;
  MOD_Fifo<tUInt8> INST_f_sw_interrupt_req;
  MOD_Fifo<tUInt8> INST_f_timer_interrupt_req;
  MOD_Reg<tUInt64> INST_rg_addr_base;
  MOD_Reg<tUInt64> INST_rg_addr_lim;
  MOD_Reg<tUInt8> INST_rg_msip;
  MOD_ConfigReg<tUInt8> INST_rg_mtip;
  MOD_Reg<tUInt8> INST_rg_state;
  MOD_Fifo<tUWide> INST_slavePortShim_arff;
  MOD_Fifo<tUWide> INST_slavePortShim_awff;
  MOD_Fifo<tUInt8> INST_slavePortShim_bff;
  MOD_Fifo<tUWide> INST_slavePortShim_rff;
  MOD_Fifo<tUWide> INST_slavePortShim_wff;
 
 /* Constructor */
 public:
  MOD_mkNear_Mem_IO_AXI4(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_axi4_slave_aw_put_val;
  tUWide PORT_axi4_slave_w_put_val;
  tUWide PORT_axi4_slave_ar_put_val;
  tUWide PORT_axi4_slave_r_peek;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_slavePortShim_rff_i_notEmpty____d311;
  tUInt8 DEF_slavePortShim_bff_i_notEmpty____d310;
  tUInt64 DEF_byte_addr__h3477;
  tUInt8 DEF_slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d138;
  tUWide DEF_slavePortShim_awff_first____d136;
  tUWide DEF_slavePortShim_wff_first____d142;
  tUInt64 DEF_rdata___1__h2849;
  tUInt64 DEF_rdata___1__h2861;
  tUInt64 DEF_y__h3486;
  tUInt8 DEF_rg_msip__h2826;
  tUInt8 DEF_rg_mtip_read____d22;
  tUInt64 DEF_slavePortShim_awff_first__36_BITS_92_TO_29___d137;
  tUInt8 DEF_slavePortShim_wff_first__42_BIT_9___d143;
  tUInt8 DEF_slavePortShim_awff_first__36_BITS_92_TO_29_37__ETC___d140;
  tUInt8 DEF_rg_msip_07_EQ_slavePortShim_wff_first__42_BIT__ETC___d144;
  tUInt8 DEF_NOT_crg_time_port0__read__4_ULT_crg_timecmp_po_ETC___d25;
  tUInt8 DEF_NOT_slavePortShim_awff_first__36_BITS_92_TO_29_ETC___d141;
 
 /* Local definitions */
 private:
  tUInt32 DEF_v__h10510;
  tUInt32 DEF_v__h10388;
  tUInt32 DEF_v__h9958;
  tUInt32 DEF_v__h9837;
  tUInt32 DEF_v__h9731;
  tUInt32 DEF_v__h9346;
  tUInt32 DEF_v__h9098;
  tUInt32 DEF_v__h3516;
  tUInt32 DEF_v__h3253;
  tUInt32 DEF_v__h2910;
  tUInt32 DEF_v__h2652;
  tUInt32 DEF_v__h2411;
  tUInt32 DEF_v__h2199;
  tUInt32 DEF_v__h2020;
  tUInt32 DEF_v__h1773;
  tUWide DEF_slavePortShim_arff_first____d44;
  tUInt8 DEF_x__h9318;
  tUInt8 DEF_NOT_cfg_verbosity_read_ULE_1_1___d32;
  tUWide DEF_slavePortShim_arff_first__4_BITS_97_TO_93_5_CO_ETC___d124;
 
 /* Rules */
 public:
  void RL_rl_reset();
  void RL_rl_soft_reset();
  void RL_rl_tick_timer();
  void RL_rl_compare();
  void RL_rl_process_rd_req();
  void RL_rl_process_wr_req();
 
 /* Methods */
 public:
  void METH_server_reset_request_put(tUInt8 ARG_server_reset_request_put);
  tUInt8 METH_RDY_server_reset_request_put();
  void METH_server_reset_response_get();
  tUInt8 METH_RDY_server_reset_response_get();
  void METH_set_addr_map(tUInt64 ARG_set_addr_map_addr_base, tUInt64 ARG_set_addr_map_addr_lim);
  tUInt8 METH_RDY_set_addr_map();
  tUInt8 METH_axi4_slave_aw_canPut();
  tUInt8 METH_RDY_axi4_slave_aw_canPut();
  void METH_axi4_slave_aw_put(tUWide ARG_axi4_slave_aw_put_val);
  tUInt8 METH_RDY_axi4_slave_aw_put();
  tUInt8 METH_axi4_slave_w_canPut();
  tUInt8 METH_RDY_axi4_slave_w_canPut();
  void METH_axi4_slave_w_put(tUWide ARG_axi4_slave_w_put_val);
  tUInt8 METH_RDY_axi4_slave_w_put();
  tUInt8 METH_axi4_slave_b_canPeek();
  tUInt8 METH_RDY_axi4_slave_b_canPeek();
  tUInt8 METH_axi4_slave_b_peek();
  tUInt8 METH_RDY_axi4_slave_b_peek();
  void METH_axi4_slave_b_drop();
  tUInt8 METH_RDY_axi4_slave_b_drop();
  tUInt8 METH_axi4_slave_ar_canPut();
  tUInt8 METH_RDY_axi4_slave_ar_canPut();
  void METH_axi4_slave_ar_put(tUWide ARG_axi4_slave_ar_put_val);
  tUInt8 METH_RDY_axi4_slave_ar_put();
  tUInt8 METH_axi4_slave_r_canPeek();
  tUInt8 METH_RDY_axi4_slave_r_canPeek();
  tUWide METH_axi4_slave_r_peek();
  tUInt8 METH_RDY_axi4_slave_r_peek();
  void METH_axi4_slave_r_drop();
  tUInt8 METH_RDY_axi4_slave_r_drop();
  tUInt8 METH_get_timer_interrupt_req_get();
  tUInt8 METH_RDY_get_timer_interrupt_req_get();
  tUInt8 METH_get_sw_interrupt_req_get();
  tUInt8 METH_RDY_get_sw_interrupt_req_get();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkNear_Mem_IO_AXI4 &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkNear_Mem_IO_AXI4 &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkNear_Mem_IO_AXI4 &backing);
};

#endif /* ifndef __mkNear_Mem_IO_AXI4_h__ */
