/*
 * Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
 * 
 * On Tue Mar  8 15:41:57 GMT 2022
 * 
 */

/* Generation options: */
#ifndef __mkRISCV_MBox_h__
#define __mkRISCV_MBox_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkRISCV_MBox module */
class MOD_mkRISCV_MBox : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_ConfigReg<tUInt8> INST_cfg_verbosity;
  MOD_Wire<tUInt64> INST_dw_result;
  MOD_Wire<tUInt8> INST_dw_valid;
  MOD_Reg<tUInt64> INST_intDiv_rg_denom2;
  MOD_Reg<tUInt8> INST_intDiv_rg_denom_is_signed;
  MOD_Reg<tUInt64> INST_intDiv_rg_n;
  MOD_Reg<tUInt8> INST_intDiv_rg_numer_is_signed;
  MOD_Reg<tUInt64> INST_intDiv_rg_quo;
  MOD_Reg<tUInt8> INST_intDiv_rg_quoIsNeg;
  MOD_Reg<tUInt8> INST_intDiv_rg_remIsNeg;
  MOD_Reg<tUInt8> INST_intDiv_rg_state;
  MOD_Reg<tUInt8> INST_rg_f3;
  MOD_Reg<tUInt8> INST_rg_is_OP_not_OP_32;
  MOD_Reg<tUInt64> INST_rg_result;
  MOD_Reg<tUInt8> INST_rg_state;
  MOD_Reg<tUInt64> INST_rg_v1;
  MOD_Reg<tUInt64> INST_rg_v2;
 
 /* Constructor */
 public:
  MOD_mkRISCV_MBox(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_intDiv_rg_numer_is_signed__h532;
  tUInt8 DEF_intDiv_rg_denom_is_signed__h553;
  tUInt64 DEF_rg_v2__h5639;
  tUInt64 DEF_b__h5980;
 
 /* Local definitions */
 private:
  tUInt8 DEF_rg_is_OP_not_OP_32__h4425;
  tUInt8 DEF_x__h5546;
  tUInt8 DEF_rg_v1_BIT_63___h719;
  tUInt8 DEF_rg_v2_BIT_63___h770;
  tUInt32 DEF_v__h5665;
  tUInt64 DEF_a__h5979;
  tUInt64 DEF_y__h4179;
  tUInt64 DEF_y__h4031;
  tUWide DEF_IF_rg_v1_BIT_63_5_THEN_INV_0x0_CONCAT_IF_rg_v1_ETC___d184;
  tUWide DEF__0x0_CONCAT_IF_rg_v1_BIT_63_5_THEN_INV_rg_v1_08_ETC___d178;
  tUWide DEF__0x0_CONCAT_IF_rg_v1_BIT_63_5_THEN_INV_rg_v1_08_ETC___d174;
  tUWide DEF__0x0_CONCAT_IF_rg_v1_BIT_63_5_THEN_INV_rg_v1_08_ETC___d170;
  tUWide DEF__0x0_CONCAT_IF_rg_v1_BIT_63_5_THEN_INV_rg_v1_08_ETC___d167;
  tUWide DEF__0x0_CONCAT_rg_v1_BITS_63_TO_32_42_43_MUL_0x0_C_ETC___d164;
  tUWide DEF__0x0_CONCAT_rg_v1_BITS_31_TO_0_49_50_MUL_0x0_CO_ETC___d161;
  tUWide DEF__0x0_CONCAT_rg_v1_BITS_63_TO_32_42_43_MUL_0x0_C_ETC___d157;
  tUWide DEF__0x0_CONCAT_rg_v1_BITS_31_TO_0_49_50_MUL_0x0_CO_ETC___d151;
  tUWide DEF__0x0_CONCAT_rg_v1_BITS_63_TO_32_42_43_MUL_0x0_C_ETC___d146;
  tUWide DEF_IF_rg_v1_BIT_63_5_EQ_rg_v2_BIT_63_0_6_THEN_0x0_ETC___d139;
  tUWide DEF__0x0_CONCAT_IF_rg_v1_BIT_63_5_THEN_INV_rg_v1_08_ETC___d133;
  tUWide DEF__0x0_CONCAT_IF_rg_v1_BIT_63_5_THEN_INV_rg_v1_08_ETC___d129;
  tUWide DEF__0x0_CONCAT_IF_rg_v1_BIT_63_5_THEN_INV_rg_v1_08_ETC___d123;
  tUWide DEF_rg_v1_MUL_rg_v2___d105;
  tUWide DEF__0x0_CONCAT_IF_rg_v1_BIT_63_5_THEN_INV_rg_v1_08_ETC___d118;
  tUWide DEF_SEXT_rg_v1_BITS_31_TO_0_49_87_MUL_SEXT_rg_v2_B_ETC___d189;
  tUInt8 DEF_rg_v1_BIT_63_5_EQ_rg_v2_BIT_63_0___d36;
  tUWide DEF_prod__h4475;
  tUWide DEF_prod___1__h4585;
  tUWide DEF_prod___1__h5263;
  tUWide DEF_prod__h5195;
  tUInt64 DEF_x__h4159;
  tUWide DEF_x__h5265;
  tUWide DEF_x__h4587;
  tUWide DEF_x__h5295;
  tUWide DEF_y__h5296;
  tUWide DEF_x__h5297;
  tUWide DEF_y__h5298;
  tUWide DEF_x__h5299;
  tUWide DEF_y__h5300;
  tUWide DEF_x__h4961;
  tUWide DEF_y__h4962;
  tUWide DEF_x__h4963;
  tUWide DEF_y__h4964;
  tUWide DEF_x__h4965;
  tUWide DEF_y__h4966;
  tUWide DEF_x__h4617;
  tUWide DEF_y__h4618;
  tUWide DEF_x__h4619;
  tUWide DEF_y__h4620;
  tUWide DEF_x__h4621;
  tUWide DEF_y__h4622;
 
 /* Rules */
 public:
  void RL_intDiv_rl_start_div_by_zero();
  void RL_intDiv_rl_start_overflow();
  void RL_intDiv_rl_start_s();
  void RL_intDiv_rl_loop1();
  void RL_intDiv_rl_loop2();
  void RL_rl_mul();
  void RL_rl_mul2();
  void RL_rg_div_rem();
 
 /* Methods */
 public:
  void METH_set_verbosity(tUInt8 ARG_set_verbosity_verbosity);
  tUInt8 METH_RDY_set_verbosity();
  void METH_req_reset();
  tUInt8 METH_RDY_req_reset();
  void METH_rsp_reset();
  tUInt8 METH_RDY_rsp_reset();
  void METH_req(tUInt8 ARG_req_is_OP_not_OP_32,
		tUInt8 ARG_req_f3,
		tUInt64 ARG_req_v1,
		tUInt64 ARG_req_v2);
  tUInt8 METH_RDY_req();
  tUInt8 METH_valid();
  tUInt8 METH_RDY_valid();
  tUInt64 METH_word();
  tUInt8 METH_RDY_word();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkRISCV_MBox &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkRISCV_MBox &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkRISCV_MBox &backing);
};

#endif /* ifndef __mkRISCV_MBox_h__ */
