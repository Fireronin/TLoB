/*
 * Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
 * 
 * On Mon Apr 25 22:01:34 UTC 2022
 * 
 */
#include "bluesim_primitives.h"
#include "model_top.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_top::MODEL_top()
{
  top_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_top()
{
  MODEL_top *model = new MODEL_top();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_top &INST_top = *((MOD_top *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_instance1_reqSent__h1626;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_instance1_putAXI4_AWFlit;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_instance1_putAXI4_AWFlit;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_instance1_putAXI4_WFlit;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_instance1_putAXI4_WFlit;
	 INST_top.DEF_instance1_awSent__h1235 = INST_top.INST_instance1_awSent.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_instance1_putAXI4_AWFlit = !((tUInt8)(INST_top.INST_instance1_shim_shim_awff_rv.METH_port0__read() >> 44u)) && !(INST_top.DEF_instance1_awSent__h1235);
	 DEF_INST_top_DEF_WILL_FIRE_RL_instance1_putAXI4_AWFlit = DEF_INST_top_DEF_CAN_FIRE_RL_instance1_putAXI4_AWFlit;
	 INST_top.DEF_instance1_shim_shim_wff_rv_port0__read____d16 = INST_top.INST_instance1_shim_shim_wff_rv.METH_port0__read();
	 DEF_INST_top_DEF_instance1_reqSent__h1626 = INST_top.INST_instance1_reqSent.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_instance1_putAXI4_WFlit = !INST_top.DEF_instance1_shim_shim_wff_rv_port0__read____d16.get_bits_in_word8(4u,
																	      17u,
																	      1u) && !DEF_INST_top_DEF_instance1_reqSent__h1626;
	 DEF_INST_top_DEF_WILL_FIRE_RL_instance1_putAXI4_WFlit = DEF_INST_top_DEF_CAN_FIRE_RL_instance1_putAXI4_WFlit;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_instance1_putAXI4_WFlit)
	   INST_top.RL_instance1_putAXI4_WFlit();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_instance1_putAXI4_AWFlit)
	   INST_top.RL_instance1_putAXI4_AWFlit();
	 INST_top.INST_instance1_shim_shim_rff_rv.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_instance1_shim_shim_arff_rv.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_instance1_shim_shim_bff_rv.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_instance1_shim_shim_wff_rv.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_instance1_shim_shim_awff_rv.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_instance1_shim_shim_awff_rv.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_instance1_shim_shim_wff_rv.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_instance1_shim_shim_bff_rv.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_instance1_shim_shim_arff_rv.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_instance1_shim_shim_rff_rv.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_instance1_nextWriteAddr.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_instance1_awSent.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_instance1_reqSent.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_instance1_rspCnt.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_instance1_cnt.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_top::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  top_instance = new MOD_top(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (top_instance->INST_instance1_shim_shim_awff_rv.set_clk_0)("CLK");
  (top_instance->INST_instance1_shim_shim_wff_rv.set_clk_0)("CLK");
  (top_instance->INST_instance1_shim_shim_bff_rv.set_clk_0)("CLK");
  (top_instance->INST_instance1_shim_shim_arff_rv.set_clk_0)("CLK");
  (top_instance->INST_instance1_shim_shim_rff_rv.set_clk_0)("CLK");
  (top_instance->set_clk_0)("CLK");
}
void MODEL_top::destroy_model()
{
  delete top_instance;
  top_instance = NULL;
}
void MODEL_top::reset_model(bool asserted)
{
  (top_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_top::get_instance()
{
  return top_instance;
}

/* Fill in version numbers */
void MODEL_top::get_version(char const **name, char const **build)
{
  *name = "2021.07";
  *build = "4cac6eb";
}

/* Get the model creation time */
time_t MODEL_top::get_creation_time()
{
  
  /* Mon Apr 25 22:01:34 UTC 2022 */
  return 1650924094llu;
}

/* State dumping function */
void MODEL_top::dump_state()
{
  (top_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_top & top_backing(tSimStateHdl simHdl)
{
  static MOD_top *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_top(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_top::dump_VCD_defs()
{
  (top_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_top::dump_VCD(tVCDDumpType dt)
{
  (top_instance->dump_VCD)(dt, vcd_depth(sim_hdl), top_backing(sim_hdl));
}
