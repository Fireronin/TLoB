/*
 * Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
 * 
 * On Wed Dec 15 19:40:13 CET 2021
 * 
 */
#include "bluesim_primitives.h"
#include "model_top.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_top::MODEL_top()
{
  top_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_top()
{
  MODEL_top *model = new MODEL_top();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_top &INST_top = *((MOD_top *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_selectInput_0_whas__6_AND_selectInput_0_wget__7___d28;
	 tUInt8 DEF_INST_top_DEF_NOT_moreFlits_0_BIT_2_1___d22;
	 tUInt8 DEF_INST_top_DEF_moreFlits_0_BIT_2___d21;
	 tUInt8 DEF_INST_top_DEF_moreFlits___d20;
	 tUInt8 DEF_INST_top_DEF_bf1_i_notEmpty____d6;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_mkConnectionGetPut;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_mkConnectionGetPut;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_set_input_canPeek_wire;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_set_input_canPeek_wire;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_set_input_peek_wires;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_set_input_peek_wires;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_set_output_canPut_wire;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_set_output_canPut_wire;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_arbitrate;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_arbitrate;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_arbitration_fail;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_arbitration_fail;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_legal_destination_fail;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_legal_destination_fail;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_input_first_flit;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_input_follow_flit;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_output_selected;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_output_selected;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE___me_check_7;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE___me_check_7;
	 DEF_INST_top_DEF_CAN_FIRE_RL_mkConnectionGetPut = INST_top.INST_ff2.METH_i_notEmpty() && INST_top.INST_ff1.METH_i_notFull();
	 DEF_INST_top_DEF_WILL_FIRE_RL_mkConnectionGetPut = DEF_INST_top_DEF_CAN_FIRE_RL_mkConnectionGetPut;
	 DEF_INST_top_DEF_CAN_FIRE_RL_set_input_canPeek_wire = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_set_input_canPeek_wire = DEF_INST_top_DEF_CAN_FIRE_RL_set_input_canPeek_wire;
	 DEF_INST_top_DEF_bf1_i_notEmpty____d6 = INST_top.INST_bf1.METH_i_notEmpty();
	 DEF_INST_top_DEF_CAN_FIRE_RL_set_input_peek_wires = DEF_INST_top_DEF_bf1_i_notEmpty____d6;
	 DEF_INST_top_DEF_WILL_FIRE_RL_set_input_peek_wires = DEF_INST_top_DEF_CAN_FIRE_RL_set_input_peek_wires;
	 DEF_INST_top_DEF_CAN_FIRE_RL_set_output_canPut_wire = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_set_output_canPut_wire = DEF_INST_top_DEF_CAN_FIRE_RL_set_output_canPut_wire;
	 DEF_INST_top_DEF_CAN_FIRE___me_check_7 = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE___me_check_7 = DEF_INST_top_DEF_CAN_FIRE___me_check_7;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_mkConnectionGetPut)
	   INST_top.RL_mkConnectionGetPut();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_set_input_canPeek_wire)
	   INST_top.RL_set_input_canPeek_wire();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_set_input_peek_wires)
	   INST_top.RL_set_input_peek_wires();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_set_output_canPut_wire)
	   INST_top.RL_set_output_canPut_wire();
	 DEF_INST_top_DEF_moreFlits___d20 = INST_top.INST_moreFlits.METH_read();
	 INST_top.DEF_inputDest_0_wget____d13 = INST_top.INST_inputDest_0.METH_wget();
	 INST_top.DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14 = INST_top.DEF_inputDest_0_wget____d13;
	 INST_top.DEF_inputCanPeek_0_whas____d9 = INST_top.INST_inputCanPeek_0.METH_whas();
	 INST_top.DEF_inputCanPeek_0_wget____d10 = INST_top.INST_inputCanPeek_0.METH_wget();
	 DEF_INST_top_DEF_moreFlits_0_BIT_2___d21 = (tUInt8)(DEF_INST_top_DEF_moreFlits___d20 >> 2u);
	 INST_top.DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17 = INST_top.INST_outputCanPut_0.METH_whas() && INST_top.INST_outputCanPut_0.METH_wget();
	 INST_top.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11 = INST_top.DEF_inputCanPeek_0_whas____d9 && INST_top.DEF_inputCanPeek_0_wget____d10;
	 INST_top.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19 = INST_top.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11 && (INST_top.DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14 && INST_top.DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17);
	 DEF_INST_top_DEF_NOT_moreFlits_0_BIT_2_1___d22 = !DEF_INST_top_DEF_moreFlits_0_BIT_2___d21;
	 DEF_INST_top_DEF_CAN_FIRE_RL_arbitrate = INST_top.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19 && DEF_INST_top_DEF_NOT_moreFlits_0_BIT_2_1___d22;
	 DEF_INST_top_DEF_WILL_FIRE_RL_arbitrate = DEF_INST_top_DEF_CAN_FIRE_RL_arbitrate;
	 DEF_INST_top_DEF_CAN_FIRE_RL_input_follow_flit = DEF_INST_top_DEF_bf1_i_notEmpty____d6 && (((DEF_INST_top_DEF_moreFlits_0_BIT_2___d21 && (tUInt8)((tUInt8)1u & (DEF_INST_top_DEF_moreFlits___d20 >> 1u))) && INST_top.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11) && ((tUInt8)((tUInt8)1u & DEF_INST_top_DEF_moreFlits___d20) && INST_top.DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17));
	 INST_top.DEF_WILL_FIRE_RL_input_follow_flit = DEF_INST_top_DEF_CAN_FIRE_RL_input_follow_flit;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_arbitrate)
	   INST_top.RL_arbitrate();
	 DEF_INST_top_DEF_selectInput_0_whas__6_AND_selectInput_0_wget__7___d28 = INST_top.INST_selectInput_0.METH_whas() && INST_top.INST_selectInput_0.METH_wget();
	 DEF_INST_top_DEF_CAN_FIRE_RL_arbitration_fail = (DEF_INST_top_DEF_selectInput_0_whas__6_AND_selectInput_0_wget__7___d28 && (!(INST_top.DEF_inputCanPeek_0_whas____d9) || !(INST_top.DEF_inputCanPeek_0_wget____d10))) && !DEF_INST_top_DEF_CAN_FIRE_RL_arbitrate;
	 DEF_INST_top_DEF_WILL_FIRE_RL_arbitration_fail = DEF_INST_top_DEF_CAN_FIRE_RL_arbitration_fail;
	 DEF_INST_top_DEF_CAN_FIRE_RL_input_first_flit = DEF_INST_top_DEF_bf1_i_notEmpty____d6 && ((DEF_INST_top_DEF_NOT_moreFlits_0_BIT_2_1___d22 && DEF_INST_top_DEF_selectInput_0_whas__6_AND_selectInput_0_wget__7___d28) && INST_top.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11);
	 INST_top.DEF_WILL_FIRE_RL_input_first_flit = DEF_INST_top_DEF_CAN_FIRE_RL_input_first_flit;
	 INST_top.DEF_NOT_inputDest_0_wget__3___d36 = !(INST_top.DEF_inputDest_0_wget____d13);
	 INST_top.DEF_IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37 = INST_top.DEF_NOT_inputDest_0_wget__3___d36;
	 DEF_INST_top_DEF_CAN_FIRE_RL_legal_destination_fail = (DEF_INST_top_DEF_selectInput_0_whas__6_AND_selectInput_0_wget__7___d28 && INST_top.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11) && INST_top.DEF_IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37;
	 DEF_INST_top_DEF_WILL_FIRE_RL_legal_destination_fail = DEF_INST_top_DEF_CAN_FIRE_RL_legal_destination_fail;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_arbitration_fail)
	   INST_top.RL_arbitration_fail();
	 if (INST_top.DEF_WILL_FIRE_RL_input_first_flit)
	   INST_top.RL_input_first_flit();
	 if (INST_top.DEF_WILL_FIRE_RL_input_follow_flit)
	   INST_top.RL_input_follow_flit();
	 DEF_INST_top_DEF_CAN_FIRE_RL_output_selected = INST_top.INST_bf2.METH_i_notFull() && (INST_top.INST_toOutput_0.METH_whas() && INST_top.DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17);
	 DEF_INST_top_DEF_WILL_FIRE_RL_output_selected = DEF_INST_top_DEF_CAN_FIRE_RL_output_selected;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_legal_destination_fail)
	   INST_top.RL_legal_destination_fail();
	 if (DEF_INST_top_DEF_WILL_FIRE___me_check_7)
	   INST_top.__me_check_7();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_output_selected)
	   INST_top.RL_output_selected();
	 INST_top.INST_selectInput_0.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_toDfltOutput.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_toOutput_0.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_dfltOutputCanPut.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_outputCanPut_0.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_inputDest_0.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_inputPeek_0.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_inputCanPeek_0.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_ff1.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_ff2.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_bf1.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_bf2.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_moreFlits.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_arbiter_firstHot.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_top::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  top_instance = new MOD_top(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (top_instance->INST_ff1.set_clk_0)("CLK");
  (top_instance->INST_ff2.set_clk_0)("CLK");
  (top_instance->INST_bf1.set_clk_0)("CLK");
  (top_instance->INST_bf2.set_clk_0)("CLK");
  (top_instance->INST_inputCanPeek_0.set_clk_0)("CLK");
  (top_instance->INST_inputPeek_0.set_clk_0)("CLK");
  (top_instance->INST_inputDest_0.set_clk_0)("CLK");
  (top_instance->INST_outputCanPut_0.set_clk_0)("CLK");
  (top_instance->INST_dfltOutputCanPut.set_clk_0)("CLK");
  (top_instance->INST_toOutput_0.set_clk_0)("CLK");
  (top_instance->INST_toDfltOutput.set_clk_0)("CLK");
  (top_instance->INST_selectInput_0.set_clk_0)("CLK");
  (top_instance->set_clk_0)("CLK");
}
void MODEL_top::destroy_model()
{
  delete top_instance;
  top_instance = NULL;
}
void MODEL_top::reset_model(bool asserted)
{
  (top_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_top::get_instance()
{
  return top_instance;
}

/* Fill in version numbers */
void MODEL_top::get_version(char const **name, char const **build)
{
  *name = "2021.07";
  *build = "4cac6eb";
}

/* Get the model creation time */
time_t MODEL_top::get_creation_time()
{
  
  /* Wed Dec 15 18:40:13 UTC 2021 */
  return 1639593613llu;
}

/* State dumping function */
void MODEL_top::dump_state()
{
  (top_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_top & top_backing(tSimStateHdl simHdl)
{
  static MOD_top *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_top(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_top::dump_VCD_defs()
{
  (top_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_top::dump_VCD(tVCDDumpType dt)
{
  (top_instance->dump_VCD)(dt, vcd_depth(sim_hdl), top_backing(sim_hdl));
}
