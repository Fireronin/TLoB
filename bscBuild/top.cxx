/*
 * Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
 * 
 * On Fri Apr 29 16:57:29 UTC 2022
 * 
 */
#include "bluesim_primitives.h"
#include "top.h"


/* Constructor */
MOD_top::MOD_top(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_fifo1_data(simHdl, "fifo1_data", this, 32u, 0u, (tUInt8)0u),
    INST_fifo1_fifo(simHdl, "fifo1_fifo", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_fifo1_fifo2(simHdl, "fifo1_fifo2", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_fifo1_isFull(simHdl, "fifo1_isFull", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_fifo2_data(simHdl, "fifo2_data", this, 32u, 0u, (tUInt8)0u),
    INST_fifo2_fifo(simHdl, "fifo2_fifo", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_fifo2_fifo2(simHdl, "fifo2_fifo2", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_fifo2_isFull(simHdl, "fifo2_isFull", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_fifo3_data(simHdl, "fifo3_data", this, 32u, 0u, (tUInt8)0u),
    INST_fifo3_fifo(simHdl, "fifo3_fifo", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_fifo3_fifo2(simHdl, "fifo3_fifo2", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_fifo3_isFull(simHdl, "fifo3_isFull", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 17u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_top::init_symbols_0()
{
  init_symbol(&symbols[0u], "fifo1_data", SYM_MODULE, &INST_fifo1_data);
  init_symbol(&symbols[1u], "fifo1_fifo", SYM_MODULE, &INST_fifo1_fifo);
  init_symbol(&symbols[2u], "fifo1_fifo2", SYM_MODULE, &INST_fifo1_fifo2);
  init_symbol(&symbols[3u], "fifo1_isFull", SYM_MODULE, &INST_fifo1_isFull);
  init_symbol(&symbols[4u], "fifo2_data", SYM_MODULE, &INST_fifo2_data);
  init_symbol(&symbols[5u], "fifo2_fifo", SYM_MODULE, &INST_fifo2_fifo);
  init_symbol(&symbols[6u], "fifo2_fifo2", SYM_MODULE, &INST_fifo2_fifo2);
  init_symbol(&symbols[7u], "fifo2_isFull", SYM_MODULE, &INST_fifo2_isFull);
  init_symbol(&symbols[8u], "fifo3_data", SYM_MODULE, &INST_fifo3_data);
  init_symbol(&symbols[9u], "fifo3_fifo", SYM_MODULE, &INST_fifo3_fifo);
  init_symbol(&symbols[10u], "fifo3_fifo2", SYM_MODULE, &INST_fifo3_fifo2);
  init_symbol(&symbols[11u], "fifo3_isFull", SYM_MODULE, &INST_fifo3_isFull);
  init_symbol(&symbols[12u], "RL_fifo1_mkConnectionVtoAf", SYM_RULE);
  init_symbol(&symbols[13u], "RL_fifo2_mkConnectionVtoAf", SYM_RULE);
  init_symbol(&symbols[14u], "RL_fifo3_mkConnectionVtoAf", SYM_RULE);
  init_symbol(&symbols[15u], "RL_mkConnectionGetPut", SYM_RULE);
  init_symbol(&symbols[16u], "RL_mkConnectionGetPut_1", SYM_RULE);
}


/* Rule actions */

void MOD_top::RL_fifo1_mkConnectionVtoAf()
{
  tUInt32 DEF_x__h289;
  DEF_x__h289 = INST_fifo1_fifo2.METH_first();
  INST_fifo1_fifo.METH_enq(DEF_x__h289);
}

void MOD_top::RL_fifo2_mkConnectionVtoAf()
{
  tUInt32 DEF_x__h587;
  DEF_x__h587 = INST_fifo2_fifo2.METH_first();
  INST_fifo2_fifo.METH_enq(DEF_x__h587);
}

void MOD_top::RL_fifo3_mkConnectionVtoAf()
{
  tUInt32 DEF_x__h884;
  DEF_x__h884 = INST_fifo3_fifo2.METH_first();
  INST_fifo3_fifo.METH_enq(DEF_x__h884);
}

void MOD_top::RL_mkConnectionGetPut()
{
  tUInt32 DEF_v__h948;
  DEF_v__h948 = INST_fifo2_data.METH_read();
  INST_fifo2_isFull.METH_write((tUInt8)0u);
  INST_fifo1_data.METH_write(DEF_v__h948);
  INST_fifo1_isFull.METH_write((tUInt8)1u);
}

void MOD_top::RL_mkConnectionGetPut_1()
{
  tUInt32 DEF_v__h1081;
  DEF_v__h1081 = INST_fifo3_data.METH_read();
  INST_fifo3_isFull.METH_write((tUInt8)0u);
  INST_fifo2_data.METH_write(DEF_v__h1081);
  INST_fifo2_isFull.METH_write((tUInt8)1u);
}


/* Methods */


/* Reset routines */

void MOD_top::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_fifo3_isFull.reset_RST(ARG_rst_in);
  INST_fifo3_fifo2.reset_RST(ARG_rst_in);
  INST_fifo3_fifo.reset_RST(ARG_rst_in);
  INST_fifo3_data.reset_RST(ARG_rst_in);
  INST_fifo2_isFull.reset_RST(ARG_rst_in);
  INST_fifo2_fifo2.reset_RST(ARG_rst_in);
  INST_fifo2_fifo.reset_RST(ARG_rst_in);
  INST_fifo2_data.reset_RST(ARG_rst_in);
  INST_fifo1_isFull.reset_RST(ARG_rst_in);
  INST_fifo1_fifo2.reset_RST(ARG_rst_in);
  INST_fifo1_fifo.reset_RST(ARG_rst_in);
  INST_fifo1_data.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_top::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_top::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_fifo1_data.dump_state(indent + 2u);
  INST_fifo1_fifo.dump_state(indent + 2u);
  INST_fifo1_fifo2.dump_state(indent + 2u);
  INST_fifo1_isFull.dump_state(indent + 2u);
  INST_fifo2_data.dump_state(indent + 2u);
  INST_fifo2_fifo.dump_state(indent + 2u);
  INST_fifo2_fifo2.dump_state(indent + 2u);
  INST_fifo2_isFull.dump_state(indent + 2u);
  INST_fifo3_data.dump_state(indent + 2u);
  INST_fifo3_fifo.dump_state(indent + 2u);
  INST_fifo3_fifo2.dump_state(indent + 2u);
  INST_fifo3_isFull.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_top::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 13u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_fifo1_data.dump_VCD_defs(num);
  num = INST_fifo1_fifo.dump_VCD_defs(num);
  num = INST_fifo1_fifo2.dump_VCD_defs(num);
  num = INST_fifo1_isFull.dump_VCD_defs(num);
  num = INST_fifo2_data.dump_VCD_defs(num);
  num = INST_fifo2_fifo.dump_VCD_defs(num);
  num = INST_fifo2_fifo2.dump_VCD_defs(num);
  num = INST_fifo2_isFull.dump_VCD_defs(num);
  num = INST_fifo3_data.dump_VCD_defs(num);
  num = INST_fifo3_fifo.dump_VCD_defs(num);
  num = INST_fifo3_fifo2.dump_VCD_defs(num);
  num = INST_fifo3_isFull.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_top::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_top &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_top::vcd_defs(tVCDDumpType dt, MOD_top &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_top::vcd_prims(tVCDDumpType dt, MOD_top &backing)
{
  INST_fifo1_data.dump_VCD(dt, backing.INST_fifo1_data);
  INST_fifo1_fifo.dump_VCD(dt, backing.INST_fifo1_fifo);
  INST_fifo1_fifo2.dump_VCD(dt, backing.INST_fifo1_fifo2);
  INST_fifo1_isFull.dump_VCD(dt, backing.INST_fifo1_isFull);
  INST_fifo2_data.dump_VCD(dt, backing.INST_fifo2_data);
  INST_fifo2_fifo.dump_VCD(dt, backing.INST_fifo2_fifo);
  INST_fifo2_fifo2.dump_VCD(dt, backing.INST_fifo2_fifo2);
  INST_fifo2_isFull.dump_VCD(dt, backing.INST_fifo2_isFull);
  INST_fifo3_data.dump_VCD(dt, backing.INST_fifo3_data);
  INST_fifo3_fifo.dump_VCD(dt, backing.INST_fifo3_fifo);
  INST_fifo3_fifo2.dump_VCD(dt, backing.INST_fifo3_fifo2);
  INST_fifo3_isFull.dump_VCD(dt, backing.INST_fifo3_isFull);
}
