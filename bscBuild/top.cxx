/*
 * Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
 * 
 * On Wed Dec 15 19:40:13 CET 2021
 * 
 */
#include "bluesim_primitives.h"
#include "top.h"


/* String declarations */
static std::string const __str_literal_8("", 0u);
static std::string const __str_literal_11("\n", 1u);
static std::string const __str_literal_7(" ", 1u);
static std::string const __str_literal_10(" (not a valid one-hot destination)", 34u);
static std::string const __str_literal_9(" >", 2u);
static std::string const __str_literal_1("%0t -- %m error: input#%0d ", 27u);
static std::string const __str_literal_4("<V ", 3u);
static std::string const __str_literal_12("Error: \"OneWayBus.bsv\", line 262, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_input_first_flit] and\n  [RL_input_follow_flit] ) fired in the same clock cycle.\n",
					  182u);
static std::string const __str_literal_5("False", 5u);
static std::string const __str_literal_6("True", 4u);
static std::string const __str_literal_3("requested an invalid destination: ", 34u);
static std::string const __str_literal_2("was selected but did not emit a request", 39u);


/* Constructor */
MOD_top::MOD_top(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_arbiter_firstHot(simHdl, "arbiter_firstHot", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_bf1(simHdl, "bf1", this, 2u, 2u, (tUInt8)1u, 0u),
    INST_bf2(simHdl, "bf2", this, 2u, 2u, (tUInt8)1u, 0u),
    INST_dfltOutputCanPut(simHdl, "dfltOutputCanPut", this, 1u, (tUInt8)0u),
    INST_ff1(simHdl, "ff1", this, 8u, 2u, (tUInt8)1u, 0u),
    INST_ff2(simHdl, "ff2", this, 8u, 2u, (tUInt8)1u, 0u),
    INST_inputCanPeek_0(simHdl, "inputCanPeek_0", this, 1u, (tUInt8)0u),
    INST_inputDest_0(simHdl, "inputDest_0", this, 1u, (tUInt8)0u),
    INST_inputPeek_0(simHdl, "inputPeek_0", this, 2u, (tUInt8)0u),
    INST_moreFlits(simHdl, "moreFlits", this, 3u, (tUInt8)2u, (tUInt8)0u),
    INST_outputCanPut_0(simHdl, "outputCanPut_0", this, 1u, (tUInt8)0u),
    INST_selectInput_0(simHdl, "selectInput_0", this, 1u, (tUInt8)0u),
    INST_toDfltOutput(simHdl, "toDfltOutput", this, 2u, (tUInt8)0u),
    INST_toOutput_0(simHdl, "toOutput_0", this, 2u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h3896(12297829382473034410llu),
    DEF_v__h3705(12297829382473034410llu)
{
  symbol_count = 27u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_top::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[1u], "arbiter_firstHot", SYM_MODULE, &INST_arbiter_firstHot);
  init_symbol(&symbols[2u], "bf1", SYM_MODULE, &INST_bf1);
  init_symbol(&symbols[3u], "bf2", SYM_MODULE, &INST_bf2);
  init_symbol(&symbols[4u], "dfltOutputCanPut", SYM_MODULE, &INST_dfltOutputCanPut);
  init_symbol(&symbols[5u], "ff1", SYM_MODULE, &INST_ff1);
  init_symbol(&symbols[6u], "ff2", SYM_MODULE, &INST_ff2);
  init_symbol(&symbols[7u], "inputCanPeek_0", SYM_MODULE, &INST_inputCanPeek_0);
  init_symbol(&symbols[8u], "inputDest_0", SYM_MODULE, &INST_inputDest_0);
  init_symbol(&symbols[9u], "inputPeek_0", SYM_MODULE, &INST_inputPeek_0);
  init_symbol(&symbols[10u], "moreFlits", SYM_MODULE, &INST_moreFlits);
  init_symbol(&symbols[11u], "outputCanPut_0", SYM_MODULE, &INST_outputCanPut_0);
  init_symbol(&symbols[12u], "RL_arbitrate", SYM_RULE);
  init_symbol(&symbols[13u], "RL_arbitration_fail", SYM_RULE);
  init_symbol(&symbols[14u], "RL_input_first_flit", SYM_RULE);
  init_symbol(&symbols[15u], "RL_input_follow_flit", SYM_RULE);
  init_symbol(&symbols[16u], "RL_legal_destination_fail", SYM_RULE);
  init_symbol(&symbols[17u], "RL_mkConnectionGetPut", SYM_RULE);
  init_symbol(&symbols[18u], "RL_output_selected", SYM_RULE);
  init_symbol(&symbols[19u], "RL_set_input_canPeek_wire", SYM_RULE);
  init_symbol(&symbols[20u], "RL_set_input_peek_wires", SYM_RULE);
  init_symbol(&symbols[21u], "RL_set_output_canPut_wire", SYM_RULE);
  init_symbol(&symbols[22u], "selectInput_0", SYM_MODULE, &INST_selectInput_0);
  init_symbol(&symbols[23u], "toDfltOutput", SYM_MODULE, &INST_toDfltOutput);
  init_symbol(&symbols[24u], "toOutput_0", SYM_MODULE, &INST_toOutput_0);
  init_symbol(&symbols[25u],
	      "WILL_FIRE_RL_input_first_flit",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_input_first_flit,
	      1u);
  init_symbol(&symbols[26u],
	      "WILL_FIRE_RL_input_follow_flit",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_input_follow_flit,
	      1u);
}


/* Rule actions */

void MOD_top::RL_mkConnectionGetPut()
{
  tUInt8 DEF_v__h421;
  DEF_v__h421 = INST_ff2.METH_first();
  INST_ff2.METH_deq();
  INST_ff1.METH_enq(DEF_v__h421);
}

void MOD_top::RL_set_input_canPeek_wire()
{
  tUInt8 DEF_bf1_notEmpty____d5;
  DEF_bf1_notEmpty____d5 = INST_bf1.METH_notEmpty();
  INST_inputCanPeek_0.METH_wset(DEF_bf1_notEmpty____d5);
}

void MOD_top::RL_set_input_peek_wires()
{
  tUInt8 DEF_bf1_first____d7;
  DEF_bf1_first____d7 = INST_bf1.METH_first();
  INST_inputPeek_0.METH_wset(DEF_bf1_first____d7);
  INST_inputDest_0.METH_wset((tUInt8)1u);
}

void MOD_top::RL_set_output_canPut_wire()
{
  tUInt8 DEF_bf2_notFull____d8;
  DEF_bf2_notFull____d8 = INST_bf2.METH_notFull();
  INST_outputCanPut_0.METH_wset(DEF_bf2_notFull____d8);
}

void MOD_top::RL_arbitrate()
{
  tUInt8 DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d25;
  tUInt8 DEF_arbiter_firstHot__h3084;
  DEF_arbiter_firstHot__h3084 = INST_arbiter_firstHot.METH_read();
  DEF_inputDest_0_wget____d13 = INST_inputDest_0.METH_wget();
  DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14 = DEF_inputDest_0_wget____d13;
  DEF_inputCanPeek_0_whas____d9 = INST_inputCanPeek_0.METH_whas();
  DEF_inputCanPeek_0_wget____d10 = INST_inputCanPeek_0.METH_wget();
  DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17 = INST_outputCanPut_0.METH_whas() && INST_outputCanPut_0.METH_wget();
  DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11 = DEF_inputCanPeek_0_whas____d9 && DEF_inputCanPeek_0_wget____d10;
  DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19 = DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11 && (DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14 && DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17);
  DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d25 = DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19 || DEF_arbiter_firstHot__h3084;
  INST_arbiter_firstHot.METH_write(DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d25);
  INST_selectInput_0.METH_wset(DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d25);
}

void MOD_top::RL_arbitration_fail()
{
  DEF_signed_0___d34 = 0u;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h3705 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl,
		   this,
		   "s,64,-32,s",
		   &__str_literal_1,
		   DEF_v__h3705,
		   DEF_signed_0___d34,
		   &__str_literal_2);
    dollar_finish(sim_hdl, "32", 0u);
  }
}

void MOD_top::RL_legal_destination_fail()
{
  tUInt8 DEF_inputDest_0_whas__2_AND_NOT_inputDest_0_wget__3_6___d40;
  tUInt8 DEF_NOT_inputDest_0_whas__2_1_OR_inputDest_0_wget__3___d42;
  tUInt8 DEF_inputDest_0_whas____d12;
  DEF_inputDest_0_whas____d12 = INST_inputDest_0.METH_whas();
  DEF_signed_0___d34 = 0u;
  DEF_inputDest_0_wget____d13 = INST_inputDest_0.METH_wget();
  DEF_NOT_inputDest_0_wget__3___d36 = !DEF_inputDest_0_wget____d13;
  DEF_NOT_inputDest_0_whas__2_1_OR_inputDest_0_wget__3___d42 = !DEF_inputDest_0_whas____d12 || DEF_inputDest_0_wget____d13;
  DEF_inputDest_0_whas__2_AND_NOT_inputDest_0_wget__3_6___d40 = DEF_inputDest_0_whas____d12 && DEF_NOT_inputDest_0_wget__3___d36;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h3896 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl,
		 this,
		 "s,64,-32,s",
		 &__str_literal_1,
		 DEF_v__h3896,
		 DEF_signed_0___d34,
		 &__str_literal_3);
    dollar_write(sim_hdl, this, "s", &__str_literal_4);
    if (DEF_inputDest_0_whas__2_AND_NOT_inputDest_0_wget__3_6___d40)
      dollar_write(sim_hdl, this, "s", &__str_literal_5);
    if (DEF_NOT_inputDest_0_whas__2_1_OR_inputDest_0_wget__3___d42)
      dollar_write(sim_hdl, this, "s", &__str_literal_6);
    dollar_write(sim_hdl, this, "s", &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_9);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_10, &__str_literal_11);
    dollar_finish(sim_hdl, "32", 0u);
  }
}

void MOD_top::RL_input_first_flit()
{
  DEF_inputDest_0_wget____d13 = INST_inputDest_0.METH_wget();
  DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14 = DEF_inputDest_0_wget____d13;
  DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48 = INST_inputPeek_0.METH_wget();
  DEF_NOT_inputDest_0_wget__3___d36 = !DEF_inputDest_0_wget____d13;
  DEF_IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37 = DEF_NOT_inputDest_0_wget__3___d36;
  INST_bf1.METH_deq();
  if (DEF_IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37)
    INST_toDfltOutput.METH_wset(DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48);
  if (DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14)
    INST_toOutput_0.METH_wset(DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48);
}

void MOD_top::RL_input_follow_flit()
{
  tUInt8 DEF__0_CONCAT_DONTCARE___d56;
  DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48 = INST_inputPeek_0.METH_wget();
  DEF__0_CONCAT_DONTCARE___d56 = (tUInt8)2u;
  INST_bf1.METH_deq();
  INST_toOutput_0.METH_wset(DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48);
  INST_moreFlits.METH_write(DEF__0_CONCAT_DONTCARE___d56);
}

void MOD_top::RL_output_selected()
{
  tUInt8 DEF_toOutput_0_wget____d61;
  DEF_toOutput_0_wget____d61 = INST_toOutput_0.METH_wget();
  INST_bf2.METH_enq(DEF_toOutput_0_wget____d61);
}

void MOD_top::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_input_first_flit && DEF_WILL_FIRE_RL_input_follow_flit)
      dollar_error(sim_hdl, this, "s", &__str_literal_12);
}


/* Methods */


/* Reset routines */

void MOD_top::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_moreFlits.reset_RST(ARG_rst_in);
  INST_ff2.reset_RST(ARG_rst_in);
  INST_ff1.reset_RST(ARG_rst_in);
  INST_bf2.reset_RST(ARG_rst_in);
  INST_bf1.reset_RST(ARG_rst_in);
  INST_arbiter_firstHot.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_top::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_top::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_arbiter_firstHot.dump_state(indent + 2u);
  INST_bf1.dump_state(indent + 2u);
  INST_bf2.dump_state(indent + 2u);
  INST_dfltOutputCanPut.dump_state(indent + 2u);
  INST_ff1.dump_state(indent + 2u);
  INST_ff2.dump_state(indent + 2u);
  INST_inputCanPeek_0.dump_state(indent + 2u);
  INST_inputDest_0.dump_state(indent + 2u);
  INST_inputPeek_0.dump_state(indent + 2u);
  INST_moreFlits.dump_state(indent + 2u);
  INST_outputCanPut_0.dump_state(indent + 2u);
  INST_selectInput_0.dump_state(indent + 2u);
  INST_toDfltOutput.dump_state(indent + 2u);
  INST_toOutput_0.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_top::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 30u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_inputDest_0_wget__3___d36", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_input_first_flit", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_input_follow_flit", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "inputCanPeek_0_wget____d10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "inputCanPeek_0_whas____d9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "inputDest_0_wget____d13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_0___d34", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h3705", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h3896", 64u);
  num = INST_arbiter_firstHot.dump_VCD_defs(num);
  num = INST_bf1.dump_VCD_defs(num);
  num = INST_bf2.dump_VCD_defs(num);
  num = INST_dfltOutputCanPut.dump_VCD_defs(num);
  num = INST_ff1.dump_VCD_defs(num);
  num = INST_ff2.dump_VCD_defs(num);
  num = INST_inputCanPeek_0.dump_VCD_defs(num);
  num = INST_inputDest_0.dump_VCD_defs(num);
  num = INST_inputPeek_0.dump_VCD_defs(num);
  num = INST_moreFlits.dump_VCD_defs(num);
  num = INST_outputCanPut_0.dump_VCD_defs(num);
  num = INST_selectInput_0.dump_VCD_defs(num);
  num = INST_toDfltOutput.dump_VCD_defs(num);
  num = INST_toOutput_0.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_top::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_top &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_top::vcd_defs(tVCDDumpType dt, MOD_top &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37) != DEF_IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37, 1u);
	backing.DEF_IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37 = DEF_IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37;
      }
      ++num;
      if ((backing.DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14) != DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14, 1u);
	backing.DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14 = DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14;
      }
      ++num;
      if ((backing.DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48) != DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48, 2u);
	backing.DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48 = DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48;
      }
      ++num;
      if ((backing.DEF_NOT_inputDest_0_wget__3___d36) != DEF_NOT_inputDest_0_wget__3___d36)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_inputDest_0_wget__3___d36, 1u);
	backing.DEF_NOT_inputDest_0_wget__3___d36 = DEF_NOT_inputDest_0_wget__3___d36;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_input_first_flit) != DEF_WILL_FIRE_RL_input_first_flit)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_input_first_flit, 1u);
	backing.DEF_WILL_FIRE_RL_input_first_flit = DEF_WILL_FIRE_RL_input_first_flit;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_input_follow_flit) != DEF_WILL_FIRE_RL_input_follow_flit)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_input_follow_flit, 1u);
	backing.DEF_WILL_FIRE_RL_input_follow_flit = DEF_WILL_FIRE_RL_input_follow_flit;
      }
      ++num;
      if ((backing.DEF_inputCanPeek_0_wget____d10) != DEF_inputCanPeek_0_wget____d10)
      {
	vcd_write_val(sim_hdl, num, DEF_inputCanPeek_0_wget____d10, 1u);
	backing.DEF_inputCanPeek_0_wget____d10 = DEF_inputCanPeek_0_wget____d10;
      }
      ++num;
      if ((backing.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19) != DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19)
      {
	vcd_write_val(sim_hdl, num, DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19, 1u);
	backing.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19 = DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19;
      }
      ++num;
      if ((backing.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11) != DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11)
      {
	vcd_write_val(sim_hdl, num, DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11, 1u);
	backing.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11 = DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11;
      }
      ++num;
      if ((backing.DEF_inputCanPeek_0_whas____d9) != DEF_inputCanPeek_0_whas____d9)
      {
	vcd_write_val(sim_hdl, num, DEF_inputCanPeek_0_whas____d9, 1u);
	backing.DEF_inputCanPeek_0_whas____d9 = DEF_inputCanPeek_0_whas____d9;
      }
      ++num;
      if ((backing.DEF_inputDest_0_wget____d13) != DEF_inputDest_0_wget____d13)
      {
	vcd_write_val(sim_hdl, num, DEF_inputDest_0_wget____d13, 1u);
	backing.DEF_inputDest_0_wget____d13 = DEF_inputDest_0_wget____d13;
      }
      ++num;
      if ((backing.DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17) != DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17)
      {
	vcd_write_val(sim_hdl, num, DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17, 1u);
	backing.DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17 = DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17;
      }
      ++num;
      if ((backing.DEF_signed_0___d34) != DEF_signed_0___d34)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_0___d34, 32u);
	backing.DEF_signed_0___d34 = DEF_signed_0___d34;
      }
      ++num;
      if ((backing.DEF_v__h3705) != DEF_v__h3705)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h3705, 64u);
	backing.DEF_v__h3705 = DEF_v__h3705;
      }
      ++num;
      if ((backing.DEF_v__h3896) != DEF_v__h3896)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h3896, 64u);
	backing.DEF_v__h3896 = DEF_v__h3896;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37, 1u);
      backing.DEF_IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37 = DEF_IF_inputDest_0_whas__2_THEN_NOT_inputDest_0_wg_ETC___d37;
      vcd_write_val(sim_hdl, num++, DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14, 1u);
      backing.DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14 = DEF_IF_inputDest_0_whas__2_THEN_inputDest_0_wget___ETC___d14;
      vcd_write_val(sim_hdl, num++, DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48, 2u);
      backing.DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48 = DEF_IF_inputPeek_0_whas__6_THEN_inputPeek_0_wget___ETC___d48;
      vcd_write_val(sim_hdl, num++, DEF_NOT_inputDest_0_wget__3___d36, 1u);
      backing.DEF_NOT_inputDest_0_wget__3___d36 = DEF_NOT_inputDest_0_wget__3___d36;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_input_first_flit, 1u);
      backing.DEF_WILL_FIRE_RL_input_first_flit = DEF_WILL_FIRE_RL_input_first_flit;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_input_follow_flit, 1u);
      backing.DEF_WILL_FIRE_RL_input_follow_flit = DEF_WILL_FIRE_RL_input_follow_flit;
      vcd_write_val(sim_hdl, num++, DEF_inputCanPeek_0_wget____d10, 1u);
      backing.DEF_inputCanPeek_0_wget____d10 = DEF_inputCanPeek_0_wget____d10;
      vcd_write_val(sim_hdl, num++, DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19, 1u);
      backing.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19 = DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0_ETC___d19;
      vcd_write_val(sim_hdl, num++, DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11, 1u);
      backing.DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11 = DEF_inputCanPeek_0_whas_AND_inputCanPeek_0_wget__0___d11;
      vcd_write_val(sim_hdl, num++, DEF_inputCanPeek_0_whas____d9, 1u);
      backing.DEF_inputCanPeek_0_whas____d9 = DEF_inputCanPeek_0_whas____d9;
      vcd_write_val(sim_hdl, num++, DEF_inputDest_0_wget____d13, 1u);
      backing.DEF_inputDest_0_wget____d13 = DEF_inputDest_0_wget____d13;
      vcd_write_val(sim_hdl, num++, DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17, 1u);
      backing.DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17 = DEF_outputCanPut_0_whas__5_AND_outputCanPut_0_wget__6___d17;
      vcd_write_val(sim_hdl, num++, DEF_signed_0___d34, 32u);
      backing.DEF_signed_0___d34 = DEF_signed_0___d34;
      vcd_write_val(sim_hdl, num++, DEF_v__h3705, 64u);
      backing.DEF_v__h3705 = DEF_v__h3705;
      vcd_write_val(sim_hdl, num++, DEF_v__h3896, 64u);
      backing.DEF_v__h3896 = DEF_v__h3896;
    }
}

void MOD_top::vcd_prims(tVCDDumpType dt, MOD_top &backing)
{
  INST_arbiter_firstHot.dump_VCD(dt, backing.INST_arbiter_firstHot);
  INST_bf1.dump_VCD(dt, backing.INST_bf1);
  INST_bf2.dump_VCD(dt, backing.INST_bf2);
  INST_dfltOutputCanPut.dump_VCD(dt, backing.INST_dfltOutputCanPut);
  INST_ff1.dump_VCD(dt, backing.INST_ff1);
  INST_ff2.dump_VCD(dt, backing.INST_ff2);
  INST_inputCanPeek_0.dump_VCD(dt, backing.INST_inputCanPeek_0);
  INST_inputDest_0.dump_VCD(dt, backing.INST_inputDest_0);
  INST_inputPeek_0.dump_VCD(dt, backing.INST_inputPeek_0);
  INST_moreFlits.dump_VCD(dt, backing.INST_moreFlits);
  INST_outputCanPut_0.dump_VCD(dt, backing.INST_outputCanPut_0);
  INST_selectInput_0.dump_VCD(dt, backing.INST_selectInput_0);
  INST_toDfltOutput.dump_VCD(dt, backing.INST_toDfltOutput);
  INST_toOutput_0.dump_VCD(dt, backing.INST_toOutput_0);
}
