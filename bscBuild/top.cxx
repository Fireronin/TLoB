/*
 * Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
 * 
 * On Mon Apr 25 22:01:34 UTC 2022
 * 
 */
#include "bluesim_primitives.h"
#include "top.h"


/* Literal declarations */
static unsigned int const UWide_literal_96_h0_arr[] = { 0u, 0u, 0u };
static tUWide const UWide_literal_96_h0(96u, UWide_literal_96_h0_arr);
static unsigned int const UWide_literal_146_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
											    2863311530u,
											    2863311530u,
											    2863311530u,
											    43690u };
static tUWide const UWide_literal_146_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(146u,
									    UWide_literal_146_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr);
static unsigned int const UWide_literal_133_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
											 2863311530u,
											 2863311530u,
											 2863311530u,
											 10u };
static tUWide const UWide_literal_133_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(133u,
									 UWide_literal_133_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr);


/* String declarations */
static std::string const __str_literal_1("%0t - MASTER %d - to %d - payload %d ", 37u);


/* Constructor */
MOD_top::MOD_top(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_instance1_awSent(simHdl, "instance1_awSent", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_instance1_cnt(simHdl, "instance1_cnt", this, 32u, 0u, (tUInt8)0u),
    INST_instance1_nextWriteAddr(simHdl, "instance1_nextWriteAddr", this, 14u, 0u, (tUInt8)0u),
    INST_instance1_reqSent(simHdl, "instance1_reqSent", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_instance1_rspCnt(simHdl, "instance1_rspCnt", this, 32u, 0u, (tUInt8)0u),
    INST_instance1_shim_shim_arff_rv(simHdl,
				     "instance1_shim_shim_arff_rv",
				     this,
				     45u,
				     11728124029610llu,
				     (tUInt8)0u),
    INST_instance1_shim_shim_awff_rv(simHdl,
				     "instance1_shim_shim_awff_rv",
				     this,
				     45u,
				     11728124029610llu,
				     (tUInt8)0u),
    INST_instance1_shim_shim_bff_rv(simHdl,
				    "instance1_shim_shim_bff_rv",
				    this,
				    4u,
				    (tUInt8)2u,
				    (tUInt8)0u),
    INST_instance1_shim_shim_rff_rv(simHdl,
				    "instance1_shim_shim_rff_rv",
				    this,
				    133u,
				    bs_wide_tmp(133u).set_bits_in_word(UWide_literal_133_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_bits_in_word8(4u,
																	      0u,
																	      5u),
								       4u,
								       0u,
								       5u).set_whole_word(UWide_literal_133_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(3u),
											  3u).set_whole_word(UWide_literal_133_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(2u),
													     2u).set_whole_word(UWide_literal_133_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(1u),
																1u).set_whole_word(UWide_literal_133_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(0u),
																		   0u),
				    (tUInt8)0u),
    INST_instance1_shim_shim_wff_rv(simHdl,
				    "instance1_shim_shim_wff_rv",
				    this,
				    146u,
				    bs_wide_tmp(146u).set_bits_in_word(UWide_literal_146_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_bits_in_word32(4u,
																		  0u,
																		  18u),
								       4u,
								       0u,
								       18u).set_whole_word(UWide_literal_146_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(3u),
											   3u).set_whole_word(UWide_literal_146_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(2u),
													      2u).set_whole_word(UWide_literal_146_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(1u),
																 1u).set_whole_word(UWide_literal_146_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(0u),
																		    0u),
				    (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_instance1_shim_shim_wff_rv_port0__read____d16(146u),
    DEF_v__h1922(12297829382473034410llu),
    DEF__1_CONCAT_0_CONCAT_instance1_cnt_2_PLUS_1000_3__ETC___d26(146u),
    DEF_f_wdata__h1725(128u)
{
  symbol_count = 13u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_top::init_symbols_0()
{
  init_symbol(&symbols[0u], "instance1_awSent", SYM_MODULE, &INST_instance1_awSent);
  init_symbol(&symbols[1u], "instance1_awSent__h1235", SYM_DEF, &DEF_instance1_awSent__h1235, 1u);
  init_symbol(&symbols[2u], "instance1_cnt", SYM_MODULE, &INST_instance1_cnt);
  init_symbol(&symbols[3u], "instance1_nextWriteAddr", SYM_MODULE, &INST_instance1_nextWriteAddr);
  init_symbol(&symbols[4u], "instance1_reqSent", SYM_MODULE, &INST_instance1_reqSent);
  init_symbol(&symbols[5u], "instance1_rspCnt", SYM_MODULE, &INST_instance1_rspCnt);
  init_symbol(&symbols[6u],
	      "instance1_shim_shim_arff_rv",
	      SYM_MODULE,
	      &INST_instance1_shim_shim_arff_rv);
  init_symbol(&symbols[7u],
	      "instance1_shim_shim_awff_rv",
	      SYM_MODULE,
	      &INST_instance1_shim_shim_awff_rv);
  init_symbol(&symbols[8u],
	      "instance1_shim_shim_bff_rv",
	      SYM_MODULE,
	      &INST_instance1_shim_shim_bff_rv);
  init_symbol(&symbols[9u],
	      "instance1_shim_shim_rff_rv",
	      SYM_MODULE,
	      &INST_instance1_shim_shim_rff_rv);
  init_symbol(&symbols[10u],
	      "instance1_shim_shim_wff_rv",
	      SYM_MODULE,
	      &INST_instance1_shim_shim_wff_rv);
  init_symbol(&symbols[11u], "RL_instance1_putAXI4_AWFlit", SYM_RULE);
  init_symbol(&symbols[12u], "RL_instance1_putAXI4_WFlit", SYM_RULE);
}


/* Rule actions */

void MOD_top::RL_instance1_putAXI4_AWFlit()
{
  tUInt32 DEF_x__h1253;
  tUInt8 DEF_instance1_nextWriteAddr_EQ_2_4_OR_instance1_aw_ETC___d15;
  tUInt64 DEF__1_CONCAT_DONTCARE_CONCAT_instance1_nextWriteAd_ETC___d13;
  tUInt32 DEF_v_awaddr__h1388;
  DEF__read__h1078 = INST_instance1_nextWriteAddr.METH_read();
  DEF_instance1_awSent__h1235 = INST_instance1_awSent.METH_read();
  DEF_v_awaddr__h1388 = (tUInt32)(16383u & (268435455u & (DEF__read__h1078 * 10u)));
  DEF__1_CONCAT_DONTCARE_CONCAT_instance1_nextWriteAd_ETC___d13 = 35184372088831llu & (((((tUInt64)((tUInt8)2u)) << 43u) | (((tUInt64)(DEF_v_awaddr__h1388)) << 29u)) | (tUInt64)(2730666u));
  DEF_instance1_nextWriteAddr_EQ_2_4_OR_instance1_aw_ETC___d15 = DEF__read__h1078 == 2u || DEF_instance1_awSent__h1235;
  DEF_x__h1253 = 16383u & (DEF__read__h1078 + 1u);
  INST_instance1_nextWriteAddr.METH_write(DEF_x__h1253);
  INST_instance1_shim_shim_awff_rv.METH_port0__write(DEF__1_CONCAT_DONTCARE_CONCAT_instance1_nextWriteAd_ETC___d13);
  INST_instance1_awSent.METH_write(DEF_instance1_nextWriteAddr_EQ_2_4_OR_instance1_aw_ETC___d15);
}

void MOD_top::RL_instance1_putAXI4_WFlit()
{
  tUInt32 DEF_instance1_cnt_2_PLUS_1000___d23;
  tUInt32 DEF_x__h1871;
  tUInt8 DEF_instance1_cnt_2_EQ_1___d27;
  tUInt32 DEF_IF_instance1_cnt_2_EQ_1_7_THEN_0_ELSE_instance_ETC___d29;
  tUInt32 DEF_x__h1941;
  tUInt32 DEF_signed_1___d31;
  DEF_signed_1___d31 = 1u;
  DEF_x__h1941 = INST_instance1_cnt.METH_read();
  DEF__read__h1078 = INST_instance1_nextWriteAddr.METH_read();
  DEF_instance1_cnt_2_EQ_1___d27 = DEF_x__h1941 == 1u;
  DEF_x__h1871 = DEF_x__h1941 + 1u;
  DEF_IF_instance1_cnt_2_EQ_1_7_THEN_0_ELSE_instance_ETC___d29 = DEF_instance1_cnt_2_EQ_1___d27 ? 0u : DEF_x__h1871;
  DEF_instance1_cnt_2_PLUS_1000___d23 = DEF_x__h1941 + 1000u;
  DEF_f_wdata__h1725.set_whole_word(UWide_literal_96_h0.get_whole_word(2u),
				    3u).set_whole_word(UWide_literal_96_h0.get_whole_word(1u),
						       2u).build_concat((((tUInt64)(UWide_literal_96_h0.get_whole_word(0u))) << 32u) | (tUInt64)(DEF_instance1_cnt_2_PLUS_1000___d23),
									0u,
									64u);
  DEF__1_CONCAT_0_CONCAT_instance1_cnt_2_PLUS_1000_3__ETC___d26.set_bits_in_word(262143u & ((((tUInt32)((tUInt8)1u)) << 17u) | DEF_f_wdata__h1725.get_bits_in_word32(3u,
																				     15u,
																				     17u)),
										 4u,
										 0u,
										 18u).set_whole_word(primExtract32(32u,
														   128u,
														   DEF_f_wdata__h1725,
														   32u,
														   110u,
														   32u,
														   79u),
												     3u).set_whole_word(primExtract32(32u,
																      128u,
																      DEF_f_wdata__h1725,
																      32u,
																      78u,
																      32u,
																      47u),
															2u).set_whole_word(primExtract32(32u,
																			 128u,
																			 DEF_f_wdata__h1725,
																			 32u,
																			 46u,
																			 32u,
																			 15u),
																	   1u).set_whole_word((DEF_f_wdata__h1725.get_bits_in_word32(0u,
																								     0u,
																								     15u) << 17u) | 87381u,
																			      0u);
  INST_instance1_shim_shim_wff_rv.METH_port0__write(DEF__1_CONCAT_0_CONCAT_instance1_cnt_2_PLUS_1000_3__ETC___d26);
  INST_instance1_cnt.METH_write(DEF_IF_instance1_cnt_2_EQ_1_7_THEN_0_ELSE_instance_ETC___d29);
  if (DEF_instance1_cnt_2_EQ_1___d27)
    INST_instance1_reqSent.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h1922 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,64,-32,14,32",
		   &__str_literal_1,
		   DEF_v__h1922,
		   DEF_signed_1___d31,
		   DEF__read__h1078,
		   DEF_instance1_cnt_2_PLUS_1000___d23);
}


/* Methods */


/* Reset routines */

void MOD_top::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_instance1_shim_shim_wff_rv.reset_RST(ARG_rst_in);
  INST_instance1_shim_shim_rff_rv.reset_RST(ARG_rst_in);
  INST_instance1_shim_shim_bff_rv.reset_RST(ARG_rst_in);
  INST_instance1_shim_shim_awff_rv.reset_RST(ARG_rst_in);
  INST_instance1_shim_shim_arff_rv.reset_RST(ARG_rst_in);
  INST_instance1_rspCnt.reset_RST(ARG_rst_in);
  INST_instance1_reqSent.reset_RST(ARG_rst_in);
  INST_instance1_nextWriteAddr.reset_RST(ARG_rst_in);
  INST_instance1_cnt.reset_RST(ARG_rst_in);
  INST_instance1_awSent.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_top::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_top::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_instance1_awSent.dump_state(indent + 2u);
  INST_instance1_cnt.dump_state(indent + 2u);
  INST_instance1_nextWriteAddr.dump_state(indent + 2u);
  INST_instance1_reqSent.dump_state(indent + 2u);
  INST_instance1_rspCnt.dump_state(indent + 2u);
  INST_instance1_shim_shim_arff_rv.dump_state(indent + 2u);
  INST_instance1_shim_shim_awff_rv.dump_state(indent + 2u);
  INST_instance1_shim_shim_bff_rv.dump_state(indent + 2u);
  INST_instance1_shim_shim_rff_rv.dump_state(indent + 2u);
  INST_instance1_shim_shim_wff_rv.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_top::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 17u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_1_CONCAT_0_CONCAT_instance1_cnt_2_PLUS_1000_3__ETC___d26", 146u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h1078", 14u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "f_wdata__h1725", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "instance1_awSent__h1235", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "instance1_shim_shim_wff_rv_port0__read____d16", 146u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1922", 64u);
  num = INST_instance1_awSent.dump_VCD_defs(num);
  num = INST_instance1_cnt.dump_VCD_defs(num);
  num = INST_instance1_nextWriteAddr.dump_VCD_defs(num);
  num = INST_instance1_reqSent.dump_VCD_defs(num);
  num = INST_instance1_rspCnt.dump_VCD_defs(num);
  num = INST_instance1_shim_shim_arff_rv.dump_VCD_defs(num);
  num = INST_instance1_shim_shim_awff_rv.dump_VCD_defs(num);
  num = INST_instance1_shim_shim_bff_rv.dump_VCD_defs(num);
  num = INST_instance1_shim_shim_rff_rv.dump_VCD_defs(num);
  num = INST_instance1_shim_shim_wff_rv.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_top::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_top &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_top::vcd_defs(tVCDDumpType dt, MOD_top &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 146u);
    vcd_write_x(sim_hdl, num++, 14u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 146u);
    vcd_write_x(sim_hdl, num++, 64u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF__1_CONCAT_0_CONCAT_instance1_cnt_2_PLUS_1000_3__ETC___d26) != DEF__1_CONCAT_0_CONCAT_instance1_cnt_2_PLUS_1000_3__ETC___d26)
      {
	vcd_write_val(sim_hdl, num, DEF__1_CONCAT_0_CONCAT_instance1_cnt_2_PLUS_1000_3__ETC___d26, 146u);
	backing.DEF__1_CONCAT_0_CONCAT_instance1_cnt_2_PLUS_1000_3__ETC___d26 = DEF__1_CONCAT_0_CONCAT_instance1_cnt_2_PLUS_1000_3__ETC___d26;
      }
      ++num;
      if ((backing.DEF__read__h1078) != DEF__read__h1078)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h1078, 14u);
	backing.DEF__read__h1078 = DEF__read__h1078;
      }
      ++num;
      if ((backing.DEF_f_wdata__h1725) != DEF_f_wdata__h1725)
      {
	vcd_write_val(sim_hdl, num, DEF_f_wdata__h1725, 128u);
	backing.DEF_f_wdata__h1725 = DEF_f_wdata__h1725;
      }
      ++num;
      if ((backing.DEF_instance1_awSent__h1235) != DEF_instance1_awSent__h1235)
      {
	vcd_write_val(sim_hdl, num, DEF_instance1_awSent__h1235, 1u);
	backing.DEF_instance1_awSent__h1235 = DEF_instance1_awSent__h1235;
      }
      ++num;
      if ((backing.DEF_instance1_shim_shim_wff_rv_port0__read____d16) != DEF_instance1_shim_shim_wff_rv_port0__read____d16)
      {
	vcd_write_val(sim_hdl, num, DEF_instance1_shim_shim_wff_rv_port0__read____d16, 146u);
	backing.DEF_instance1_shim_shim_wff_rv_port0__read____d16 = DEF_instance1_shim_shim_wff_rv_port0__read____d16;
      }
      ++num;
      if ((backing.DEF_v__h1922) != DEF_v__h1922)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1922, 64u);
	backing.DEF_v__h1922 = DEF_v__h1922;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF__1_CONCAT_0_CONCAT_instance1_cnt_2_PLUS_1000_3__ETC___d26, 146u);
      backing.DEF__1_CONCAT_0_CONCAT_instance1_cnt_2_PLUS_1000_3__ETC___d26 = DEF__1_CONCAT_0_CONCAT_instance1_cnt_2_PLUS_1000_3__ETC___d26;
      vcd_write_val(sim_hdl, num++, DEF__read__h1078, 14u);
      backing.DEF__read__h1078 = DEF__read__h1078;
      vcd_write_val(sim_hdl, num++, DEF_f_wdata__h1725, 128u);
      backing.DEF_f_wdata__h1725 = DEF_f_wdata__h1725;
      vcd_write_val(sim_hdl, num++, DEF_instance1_awSent__h1235, 1u);
      backing.DEF_instance1_awSent__h1235 = DEF_instance1_awSent__h1235;
      vcd_write_val(sim_hdl, num++, DEF_instance1_shim_shim_wff_rv_port0__read____d16, 146u);
      backing.DEF_instance1_shim_shim_wff_rv_port0__read____d16 = DEF_instance1_shim_shim_wff_rv_port0__read____d16;
      vcd_write_val(sim_hdl, num++, DEF_v__h1922, 64u);
      backing.DEF_v__h1922 = DEF_v__h1922;
    }
}

void MOD_top::vcd_prims(tVCDDumpType dt, MOD_top &backing)
{
  INST_instance1_awSent.dump_VCD(dt, backing.INST_instance1_awSent);
  INST_instance1_cnt.dump_VCD(dt, backing.INST_instance1_cnt);
  INST_instance1_nextWriteAddr.dump_VCD(dt, backing.INST_instance1_nextWriteAddr);
  INST_instance1_reqSent.dump_VCD(dt, backing.INST_instance1_reqSent);
  INST_instance1_rspCnt.dump_VCD(dt, backing.INST_instance1_rspCnt);
  INST_instance1_shim_shim_arff_rv.dump_VCD(dt, backing.INST_instance1_shim_shim_arff_rv);
  INST_instance1_shim_shim_awff_rv.dump_VCD(dt, backing.INST_instance1_shim_shim_awff_rv);
  INST_instance1_shim_shim_bff_rv.dump_VCD(dt, backing.INST_instance1_shim_shim_bff_rv);
  INST_instance1_shim_shim_rff_rv.dump_VCD(dt, backing.INST_instance1_shim_shim_rff_rv);
  INST_instance1_shim_shim_wff_rv.dump_VCD(dt, backing.INST_instance1_shim_shim_wff_rv);
}
