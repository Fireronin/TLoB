
BITS: "bit"
INT: "int"

int: NUMBER

start: tcl_type_full_list

tcl_type_full_list: tcl_type_full* -> list_of
//tcl_func_list: tcl_func*

//tcl_func: tcl_module
   // | tcl_function

type: typeprimary -> t_single
    | typeprimary "(" type ("," type)*  ")" -> t_parametric


typeprimary: [package_name_solo](identifier_u | identifier_l)["#(" type  ("," type)* ")"] -> tp_parametric
    | "bit" "[" typenat ":" typenat "]" -> bit
    | "int" -> int
    //| identifier_l -> string_placeholder
    | typenat -> int_value
    | tcl_tc_m_f_function

// typeide: WORD
typenat: NUMBER

identifier_l: /[a-z_$][\w$_']*/ 
identifier_u: /[A-Z][\w$_]*/ 
type_ide: identifier_u
type_ide_poly: identifier_l

package_name_solo: identifier_u ":"":"

interface_decl: [atribute_instances] "interface" type_def_type ";" (interface_member_decl)* "endinterface" (":" type_ide)*

type_def_type: tcl_package_name (type_formals)* 
            | type_ide_poly (type_formals)*

type_formals: "#(" type_formal ("," type_formal)* ")" -> list_of

type_formal: "numeric" "type" identifier_l -> numeric_type_formal
            | "type" identifier_l -> type_type_formal
            | identifier_l
            | type_def_type

interface_member_decl: method_proto

method_proto: [atribute_instances] "method" type identifier_l ((("(" method_proto_formals ")")*) | "()") ";"

method_proto_formals: (method_proto_formal ("," method_proto_formal)*)

method_proto_formal: [atribute_instances] type identifier_l


tcl_position: "{" "position" "{" tcl_path NUMBER NUMBER ["{" "Library" identifier_u "}"] "}" "}"
// todo check paths with spaces
tcl_path: ["%/"] /\w+/ ["/" /\w+/ ]*  "." /\w+/

tcl_type_full: tcl_interface_dec
            | tcl_typeclass
            | tcl_struct
            | tcl_enum
            | tcl_tagged_union
            | tcl_primary
            | tcl_alias
            | tcl_list
            | tcl_function
            | tcl_module

tcl_width: "{" "width" NUMBER "}" 


tcl_package_name: identifier_u ":"":" identifier_u  -> package_name
        | identifier_u -> name_only

// Typeclass grammar
tcl_typeclass: "Typeclass" "{" type_def_type "}" [tcl_tc_superclasses] ["coherent"] [tcl_tc_dependencies] tcl_tc_members [tcl_tc_instances] tcl_position

tcl_tc_superclasses: "{" "superclasses" (type_def_type | "{" (type_def_type | "{" type_def_type "}")+ "}"  ) "}" -> list_of

tcl_tc_instances: "{" "instances" "{" (tcl_tc_i_instance)*  "}" "}"
               |  "{" "instances" tcl_tc_i_instance "}"
               
tcl_tc_i_instance: type
                | "{" type [tcl_tc_provisos] "}"

tcl_tc_provisos: "provisos" "(" type ("," type)* ")"

tcl_tc_dependencies: "{" "dependencies" "{" tcl_tc_d_dependency* "}" "}"

tcl_tc_d_dependency: "{"  tcl_tc_dd_l "determines" tcl_tc_dd_l "}"

tcl_tc_dd_l: "(" type ("," type)* ")" -> list_of
        | type -> list_of

tcl_tc_members: "{" "members" "{" (tcl_tc_m_value | tcl_tc_m_function | tcl_tc_m_module)* "}" "}"

tcl_tc_m_value: "{" type_def_type identifier_l "}"

tcl_tc_m_module: "{" "{" ["module"] type [tcl_tc_provisos] "}" identifier_l "}"

tcl_tc_m_function: "{" "{" tcl_tc_m_f_function [tcl_tc_provisos] "}" (identifier_l | /\S/ | /\S\S/ ) "}"

tcl_tc_m_f_function: "function" type identifier_l "("  tcl_tc_m_f_argument ("," tcl_tc_m_f_argument )* ")"

tcl_tc_m_f_argument: type_def_type identifier_l
                | tcl_tc_m_f_function
// Primary 
tcl_primary: "Primary" type_def_type [tcl_width]
    | "Primary" "{" type_def_type "}" "polymorphic" [tcl_width]

// Enum
tcl_enum: "Enum" tcl_package_name tcl_e_members [tcl_width] tcl_position
tcl_e_members: "{" "members" "{" identifier_u* "}" "}" -> to_list
            | "{" "members" identifier_u "}" -> to_list
// Alias
tcl_alias: "Alias" ( type_def_type | "{" type_def_type "}") (type |"{" type "}") tcl_position



// List this is type on it's own weird ??
tcl_list: "List" "{" type_def_type "}" "polymorphic" "{" type identifier_l "}" 
// Struct and TaggedUnion
tcl_struct: "Struct" tcl_package_name tcl_stu_members tcl_position -> struct
        | "Struct" "{" type_def_type "}" "polymorphic" tcl_stu_members tcl_position -> poly_struct

tcl_tagged_union: "TaggedUnion" tcl_package_name tcl_stu_members [tcl_width] tcl_position
        | "TaggedUnion" "{" type_def_type "}" "polymorphic"  tcl_stu_members  [tcl_width] tcl_position

tcl_stu_members: "{" "members" "{" tcl_stu_member* "}" "}"

tcl_stu_member: "{" (type |"void") (identifier_u|identifier_l) [tcl_width] "}"

// Interface
atribute_instances: "ATRIBUTE INSTANCES TODO"

tcl_interface_dec: "Interface" "{" type_def_type "}" tcl_i_members tcl_position 
        | "Interface" "{" type_def_type "}" "polymorphic"  tcl_i_members  tcl_position
        | "Interface" type_def_type tcl_i_members tcl_position
   // | "Interface"  identifier_u ":"":" type_def_type  tcl_members tcl_position

tcl_i_members:  "{" "members" "{" ( "{" (tcl_im_method | tcl_im_subinterface) "}"  )* "}" "}" -> list_of

tcl_im_subinterface: "interface" type identifier_l tcl_imm_input_types

tcl_im_method: "method" "{" type identifier_l tcl_imm_input_types "{"  [tcl_imm_prefix] [tcl_imm_result] [tcl_imm_ports] [tcl_imm_other] "}" "}"

tcl_imm_other: "{" "(" "*" identifier_l "*" ")" "}" -> string_placeholder

tcl_imm_prefix: "{" "(" "*" "prefix" "=" "\"" "\""  "*" ")" "}"

tcl_imm_result: "{" "(" "*" "result" "=" "\"UNUSED\"" "*" ")" "}"

tcl_imm_input_types: (type | "{" type* "}" ) -> list_of

tcl_imm_ports: "{" "(*" "ports =" "[" [tcl_immp_name ( "," tcl_immp_name )* ] "]" "*)" "}" -> list_of

tcl_immp_name: "\""  identifier_l "\"" -> string_placeholder

// Functions via defs func package_name

tcl_function: "{" "function" [package_name_solo] tcl_f_identifier [tcl_f_result] [tcl_f_arguments] [tcl_provisos] tcl_position "}"


tcl_f_identifier: "{" identifier_l "}" ->string_placeholder
            | identifier_l ->string_placeholder
            | /\S{1,3}/ -> string_placeholder



tcl_f_result: "{" "result"  type "}" 
            | "{" "result" "{" "{" type "}" "}" "}" 

tcl_f_arguments: "{" "arguments" tcl_fa_argument  "}"
            | "{" "arguments" "{" tcl_fa_argument* "}"  "}"

tcl_fa_argument: "{" tcl_tc_m_f_function "}" 
            | type
            | "{" type "}"

//// module
tcl_module: "{" "module" [package_name_solo] tcl_f_identifier tcl_m_interface [tcl_f_arguments] [tcl_provisos] tcl_position "}"

tcl_m_interface: "{" "interface" (type | "{" "{" type "}" "}" ) "}"

//////// Other crap


//tcl_arguments: "{" "arguments" "{" type type* "}" "}"

//tcl_module: "{" "module" identifier_u ":" ":" identifier_l tcl_interface_use [tcl_func_arguments] [tcl_provisos] tcl_position "}"






 

tcl_provisos: "{" "provisos" "{" ("{" type "}" | type )* "}" "}"
            | "{" "provisos" type "}"

//// flags imports
%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS_INLINE
%import common.WORD

%import common.WS
%ignore WS

%ignore WS_INLINE