//
// Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
//
// On Sun May  8 13:28:39 BST 2022
//
//
// Ports:
// Name                         I/O  size props
// awid                           O     1
// awaddr                         O    14
// awlen                          O     8
// awsize                         O     3
// awburst                        O     2
// awlock                         O     1
// awcache                        O     4
// awprot                         O     3
// awqos                          O     4
// awregion                       O     4
// awvalid                        O     1
// wdata                          O   128
// wstrb                          O    16
// wlast                          O     1
// wvalid                         O     1
// bready                         O     1
// arid                           O     1
// araddr                         O    14
// arlen                          O     8
// arsize                         O     3
// arburst                        O     2
// arlock                         O     1
// arcache                        O     4
// arprot                         O     3
// arqos                          O     4
// arregion                       O     4
// arvalid                        O     1
// rready                         O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// awready                        I     1
// wready                         I     1
// bvalid                         I     1
// bid                            I     1
// bresp                          I     2
// arready                        I     1
// rvalid                         I     1
// rid                            I     1
// rdata                          I   128
// rresp                          I     2
// rlast                          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module axiMaster1_synth(CLK,
			RST_N,

			awid,

			awaddr,

			awlen,

			awsize,

			awburst,

			awlock,

			awcache,

			awprot,

			awqos,

			awregion,

			awvalid,

			awready,

			wdata,

			wstrb,

			wlast,

			wvalid,

			wready,

			bvalid,
			bid,
			bresp,

			bready,

			arid,

			araddr,

			arlen,

			arsize,

			arburst,

			arlock,

			arcache,

			arprot,

			arqos,

			arregion,

			arvalid,

			arready,

			rvalid,
			rid,
			rdata,
			rresp,
			rlast,

			rready);
  input  CLK;
  input  RST_N;

  // value method aw_awid
  output awid;

  // value method aw_awaddr
  output [13 : 0] awaddr;

  // value method aw_awlen
  output [7 : 0] awlen;

  // value method aw_awsize
  output [2 : 0] awsize;

  // value method aw_awburst
  output [1 : 0] awburst;

  // value method aw_awlock
  output awlock;

  // value method aw_awcache
  output [3 : 0] awcache;

  // value method aw_awprot
  output [2 : 0] awprot;

  // value method aw_awqos
  output [3 : 0] awqos;

  // value method aw_awregion
  output [3 : 0] awregion;

  // value method aw_awuser

  // value method aw_awvalid
  output awvalid;

  // action method aw_awready
  input  awready;

  // value method w_wdata
  output [127 : 0] wdata;

  // value method w_wstrb
  output [15 : 0] wstrb;

  // value method w_wlast
  output wlast;

  // value method w_wuser

  // value method w_wvalid
  output wvalid;

  // action method w_wready
  input  wready;

  // action method b_bflit
  input  bvalid;
  input  bid;
  input  [1 : 0] bresp;

  // value method b_bready
  output bready;

  // value method ar_arid
  output arid;

  // value method ar_araddr
  output [13 : 0] araddr;

  // value method ar_arlen
  output [7 : 0] arlen;

  // value method ar_arsize
  output [2 : 0] arsize;

  // value method ar_arburst
  output [1 : 0] arburst;

  // value method ar_arlock
  output arlock;

  // value method ar_arcache
  output [3 : 0] arcache;

  // value method ar_arprot
  output [2 : 0] arprot;

  // value method ar_arqos
  output [3 : 0] arqos;

  // value method ar_arregion
  output [3 : 0] arregion;

  // value method ar_aruser

  // value method ar_arvalid
  output arvalid;

  // action method ar_arready
  input  arready;

  // action method r_rflit
  input  rvalid;
  input  rid;
  input  [127 : 0] rdata;
  input  [1 : 0] rresp;
  input  rlast;

  // value method r_rready
  output rready;

  // signals for module outputs
  wire [127 : 0] wdata;
  wire [15 : 0] wstrb;
  wire [13 : 0] araddr, awaddr;
  wire [7 : 0] arlen, awlen;
  wire [3 : 0] arcache, arqos, arregion, awcache, awqos, awregion;
  wire [2 : 0] arprot, arsize, awprot, awsize;
  wire [1 : 0] arburst, awburst;
  wire arid,
       arlock,
       arvalid,
       awid,
       awlock,
       awvalid,
       bready,
       rready,
       wlast,
       wvalid;

  // inlined wires
  wire [145 : 0] master_shim_shim_wff_rv$port0__write_1,
		 master_shim_shim_wff_rv$port1__read,
		 master_shim_shim_wff_rv$port2__read;
  wire [132 : 0] master_shim_shim_rff_rv$port0__write_1,
		 master_shim_shim_rff_rv$port1__read;
  wire [131 : 0] axi_sig_rSig_snk_putWire$wget;
  wire [44 : 0] master_shim_shim_arff_rv$port2__read,
		master_shim_shim_awff_rv$port0__write_1,
		master_shim_shim_awff_rv$port1__read,
		master_shim_shim_awff_rv$port2__read;
  wire [3 : 0] master_shim_shim_bff_rv$port0__write_1,
	       master_shim_shim_bff_rv$port1__read,
	       master_shim_shim_bff_rv$port2__read;
  wire [2 : 0] axi_sig_bSig_snk_putWire$wget;
  wire axi_sig_arSig_src_dropWire$whas,
       axi_sig_awSig_src_dropWire$whas,
       axi_sig_bSig_snk_putWire$whas,
       axi_sig_rSig_snk_putWire$whas,
       axi_sig_wSig_src_dropWire$whas,
       master_shim_shim_arff_rv$EN_port1__write,
       master_shim_shim_awff_rv$EN_port1__write,
       master_shim_shim_bff_rv$EN_port0__write,
       master_shim_shim_rff_rv$EN_port0__write,
       master_shim_shim_wff_rv$EN_port1__write;

  // register master_awSent
  reg master_awSent;
  wire master_awSent$D_IN, master_awSent$EN;

  // register master_cnt
  reg [31 : 0] master_cnt;
  wire [31 : 0] master_cnt$D_IN;
  wire master_cnt$EN;

  // register master_nextWriteAddr
  reg [13 : 0] master_nextWriteAddr;
  wire [13 : 0] master_nextWriteAddr$D_IN;
  wire master_nextWriteAddr$EN;

  // register master_reqSent
  reg master_reqSent;
  wire master_reqSent$D_IN, master_reqSent$EN;

  // register master_rspCnt
  reg [31 : 0] master_rspCnt;
  wire [31 : 0] master_rspCnt$D_IN;
  wire master_rspCnt$EN;

  // register master_shim_shim_arff_rv
  reg [44 : 0] master_shim_shim_arff_rv;
  wire [44 : 0] master_shim_shim_arff_rv$D_IN;
  wire master_shim_shim_arff_rv$EN;

  // register master_shim_shim_awff_rv
  reg [44 : 0] master_shim_shim_awff_rv;
  wire [44 : 0] master_shim_shim_awff_rv$D_IN;
  wire master_shim_shim_awff_rv$EN;

  // register master_shim_shim_bff_rv
  reg [3 : 0] master_shim_shim_bff_rv;
  wire [3 : 0] master_shim_shim_bff_rv$D_IN;
  wire master_shim_shim_bff_rv$EN;

  // register master_shim_shim_rff_rv
  reg [132 : 0] master_shim_shim_rff_rv;
  wire [132 : 0] master_shim_shim_rff_rv$D_IN;
  wire master_shim_shim_rff_rv$EN;

  // register master_shim_shim_wff_rv
  reg [145 : 0] master_shim_shim_wff_rv;
  wire [145 : 0] master_shim_shim_wff_rv$D_IN;
  wire master_shim_shim_wff_rv$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_master_putAXI4_AWFlit;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h1811;
  // synopsys translate_on

  // remaining internal signals
  wire [144 : 0] master_shim_shim_wff_rvport1__read_BITS_144_TO_0__q3;
  wire [127 : 0] wf_wdata__h1764;
  wire [43 : 0] master_shim_shim_arff_rv_BITS_43_TO_0__q1,
		master_shim_shim_awff_rvport1__read_BITS_43_TO_0__q2;
  wire [31 : 0] master_cnt_7_PLUS_1000___d18;

  // value method aw_awid
  assign awid = master_shim_shim_awff_rvport1__read_BITS_43_TO_0__q2[43] ;

  // value method aw_awaddr
  assign awaddr =
	     master_shim_shim_awff_rvport1__read_BITS_43_TO_0__q2[42:29] ;

  // value method aw_awlen
  assign awlen = master_shim_shim_awff_rvport1__read_BITS_43_TO_0__q2[28:21] ;

  // value method aw_awsize
  assign awsize =
	     master_shim_shim_awff_rvport1__read_BITS_43_TO_0__q2[20:18] ;

  // value method aw_awburst
  assign awburst =
	     master_shim_shim_awff_rvport1__read_BITS_43_TO_0__q2[17:16] ;

  // value method aw_awlock
  assign awlock = master_shim_shim_awff_rvport1__read_BITS_43_TO_0__q2[15] ;

  // value method aw_awcache
  assign awcache =
	     master_shim_shim_awff_rvport1__read_BITS_43_TO_0__q2[14:11] ;

  // value method aw_awprot
  assign awprot = master_shim_shim_awff_rvport1__read_BITS_43_TO_0__q2[10:8] ;

  // value method aw_awqos
  assign awqos = master_shim_shim_awff_rvport1__read_BITS_43_TO_0__q2[7:4] ;

  // value method aw_awregion
  assign awregion =
	     master_shim_shim_awff_rvport1__read_BITS_43_TO_0__q2[3:0] ;

  // value method aw_awvalid
  assign awvalid = master_shim_shim_awff_rv$port1__read[44] ;

  // value method w_wdata
  assign wdata =
	     master_shim_shim_wff_rvport1__read_BITS_144_TO_0__q3[144:17] ;

  // value method w_wstrb
  assign wstrb = master_shim_shim_wff_rvport1__read_BITS_144_TO_0__q3[16:1] ;

  // value method w_wlast
  assign wlast = master_shim_shim_wff_rvport1__read_BITS_144_TO_0__q3[0] ;

  // value method w_wvalid
  assign wvalid = master_shim_shim_wff_rv$port1__read[145] ;

  // value method b_bready
  assign bready = !master_shim_shim_bff_rv[3] ;

  // value method ar_arid
  assign arid = master_shim_shim_arff_rv_BITS_43_TO_0__q1[43] ;

  // value method ar_araddr
  assign araddr = master_shim_shim_arff_rv_BITS_43_TO_0__q1[42:29] ;

  // value method ar_arlen
  assign arlen = master_shim_shim_arff_rv_BITS_43_TO_0__q1[28:21] ;

  // value method ar_arsize
  assign arsize = master_shim_shim_arff_rv_BITS_43_TO_0__q1[20:18] ;

  // value method ar_arburst
  assign arburst = master_shim_shim_arff_rv_BITS_43_TO_0__q1[17:16] ;

  // value method ar_arlock
  assign arlock = master_shim_shim_arff_rv_BITS_43_TO_0__q1[15] ;

  // value method ar_arcache
  assign arcache = master_shim_shim_arff_rv_BITS_43_TO_0__q1[14:11] ;

  // value method ar_arprot
  assign arprot = master_shim_shim_arff_rv_BITS_43_TO_0__q1[10:8] ;

  // value method ar_arqos
  assign arqos = master_shim_shim_arff_rv_BITS_43_TO_0__q1[7:4] ;

  // value method ar_arregion
  assign arregion = master_shim_shim_arff_rv_BITS_43_TO_0__q1[3:0] ;

  // value method ar_arvalid
  assign arvalid = master_shim_shim_arff_rv[44] ;

  // value method r_rready
  assign rready = !master_shim_shim_rff_rv[132] ;

  // rule RL_master_putAXI4_AWFlit
  assign WILL_FIRE_RL_master_putAXI4_AWFlit =
	     !master_shim_shim_awff_rv[44] && !master_shim_shim_wff_rv[145] &&
	     !master_awSent ;

  // inlined wires
  assign axi_sig_bSig_snk_putWire$wget = { bid, bresp } ;
  assign axi_sig_bSig_snk_putWire$whas =
	     bvalid && !master_shim_shim_bff_rv[3] ;
  assign axi_sig_rSig_snk_putWire$wget = { rid, rdata, rresp, rlast } ;
  assign axi_sig_rSig_snk_putWire$whas =
	     rvalid && !master_shim_shim_rff_rv[132] ;
  assign axi_sig_awSig_src_dropWire$whas =
	     master_shim_shim_awff_rv$port1__read[44] && awready ;
  assign axi_sig_wSig_src_dropWire$whas =
	     master_shim_shim_wff_rv$port1__read[145] && wready ;
  assign axi_sig_arSig_src_dropWire$whas =
	     master_shim_shim_arff_rv[44] && arready ;
  assign master_shim_shim_awff_rv$port0__write_1 =
	     { 2'd2, master_nextWriteAddr, 29'd633514 } ;
  assign master_shim_shim_awff_rv$port1__read =
	     WILL_FIRE_RL_master_putAXI4_AWFlit ?
	       master_shim_shim_awff_rv$port0__write_1 :
	       master_shim_shim_awff_rv ;
  assign master_shim_shim_awff_rv$EN_port1__write =
	     master_shim_shim_awff_rv$port1__read[44] &&
	     axi_sig_awSig_src_dropWire$whas ;
  assign master_shim_shim_awff_rv$port2__read =
	     master_shim_shim_awff_rv$EN_port1__write ?
	       45'h0AAAAAAAAAAA :
	       master_shim_shim_awff_rv$port1__read ;
  assign master_shim_shim_wff_rv$port0__write_1 =
	     { 1'd1, wf_wdata__h1764, 17'd131071 } ;
  assign master_shim_shim_wff_rv$port1__read =
	     WILL_FIRE_RL_master_putAXI4_AWFlit ?
	       master_shim_shim_wff_rv$port0__write_1 :
	       master_shim_shim_wff_rv ;
  assign master_shim_shim_wff_rv$EN_port1__write =
	     master_shim_shim_wff_rv$port1__read[145] &&
	     axi_sig_wSig_src_dropWire$whas ;
  assign master_shim_shim_wff_rv$port2__read =
	     master_shim_shim_wff_rv$EN_port1__write ?
	       146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       master_shim_shim_wff_rv$port1__read ;
  assign master_shim_shim_bff_rv$EN_port0__write =
	     !master_shim_shim_bff_rv[3] && axi_sig_bSig_snk_putWire$whas ;
  assign master_shim_shim_bff_rv$port0__write_1 =
	     { 1'd1, axi_sig_bSig_snk_putWire$wget } ;
  assign master_shim_shim_bff_rv$port1__read =
	     master_shim_shim_bff_rv$EN_port0__write ?
	       master_shim_shim_bff_rv$port0__write_1 :
	       master_shim_shim_bff_rv ;
  assign master_shim_shim_bff_rv$port2__read =
	     master_shim_shim_bff_rv$port1__read[3] ?
	       4'd2 :
	       master_shim_shim_bff_rv$port1__read ;
  assign master_shim_shim_arff_rv$EN_port1__write =
	     master_shim_shim_arff_rv[44] && axi_sig_arSig_src_dropWire$whas ;
  assign master_shim_shim_arff_rv$port2__read =
	     master_shim_shim_arff_rv$EN_port1__write ?
	       45'h0AAAAAAAAAAA :
	       master_shim_shim_arff_rv ;
  assign master_shim_shim_rff_rv$EN_port0__write =
	     !master_shim_shim_rff_rv[132] && axi_sig_rSig_snk_putWire$whas ;
  assign master_shim_shim_rff_rv$port0__write_1 =
	     { 1'd1, axi_sig_rSig_snk_putWire$wget } ;
  assign master_shim_shim_rff_rv$port1__read =
	     master_shim_shim_rff_rv$EN_port0__write ?
	       master_shim_shim_rff_rv$port0__write_1 :
	       master_shim_shim_rff_rv ;

  // register master_awSent
  assign master_awSent$D_IN = 1'd1 ;
  assign master_awSent$EN =
	     WILL_FIRE_RL_master_putAXI4_AWFlit &&
	     master_nextWriteAddr == 14'd1 ;

  // register master_cnt
  assign master_cnt$D_IN = 32'h0 ;
  assign master_cnt$EN = 1'b0 ;

  // register master_nextWriteAddr
  assign master_nextWriteAddr$D_IN = master_nextWriteAddr + 14'd1 ;
  assign master_nextWriteAddr$EN = WILL_FIRE_RL_master_putAXI4_AWFlit ;

  // register master_reqSent
  assign master_reqSent$D_IN = 1'b0 ;
  assign master_reqSent$EN = 1'b0 ;

  // register master_rspCnt
  assign master_rspCnt$D_IN = master_rspCnt + 32'd1 ;
  assign master_rspCnt$EN =
	     master_shim_shim_bff_rv$port1__read[3] &&
	     master_rspCnt != 32'd2 ;

  // register master_shim_shim_arff_rv
  assign master_shim_shim_arff_rv$D_IN =
	     master_shim_shim_arff_rv$port2__read ;
  assign master_shim_shim_arff_rv$EN = 1'b1 ;

  // register master_shim_shim_awff_rv
  assign master_shim_shim_awff_rv$D_IN =
	     master_shim_shim_awff_rv$port2__read ;
  assign master_shim_shim_awff_rv$EN = 1'b1 ;

  // register master_shim_shim_bff_rv
  assign master_shim_shim_bff_rv$D_IN = master_shim_shim_bff_rv$port2__read ;
  assign master_shim_shim_bff_rv$EN = 1'b1 ;

  // register master_shim_shim_rff_rv
  assign master_shim_shim_rff_rv$D_IN = master_shim_shim_rff_rv$port1__read ;
  assign master_shim_shim_rff_rv$EN = 1'b1 ;

  // register master_shim_shim_wff_rv
  assign master_shim_shim_wff_rv$D_IN = master_shim_shim_wff_rv$port2__read ;
  assign master_shim_shim_wff_rv$EN = 1'b1 ;

  // remaining internal signals
  assign master_cnt_7_PLUS_1000___d18 = master_cnt + 32'd1000 ;
  assign master_shim_shim_arff_rv_BITS_43_TO_0__q1 =
	     master_shim_shim_arff_rv[43:0] ;
  assign master_shim_shim_awff_rvport1__read_BITS_43_TO_0__q2 =
	     master_shim_shim_awff_rv$port1__read[43:0] ;
  assign master_shim_shim_wff_rvport1__read_BITS_144_TO_0__q3 =
	     master_shim_shim_wff_rv$port1__read[144:0] ;
  assign wf_wdata__h1764 = { 96'd0, master_cnt_7_PLUS_1000___d18 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        master_awSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_cnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	master_nextWriteAddr <= `BSV_ASSIGNMENT_DELAY 14'd0;
	master_reqSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_rspCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	master_shim_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY 45'h0AAAAAAAAAAA;
	master_shim_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY 45'h0AAAAAAAAAAA;
	master_shim_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 4'd2;
	master_shim_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    133'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	master_shim_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (master_awSent$EN)
	  master_awSent <= `BSV_ASSIGNMENT_DELAY master_awSent$D_IN;
	if (master_cnt$EN)
	  master_cnt <= `BSV_ASSIGNMENT_DELAY master_cnt$D_IN;
	if (master_nextWriteAddr$EN)
	  master_nextWriteAddr <= `BSV_ASSIGNMENT_DELAY
	      master_nextWriteAddr$D_IN;
	if (master_reqSent$EN)
	  master_reqSent <= `BSV_ASSIGNMENT_DELAY master_reqSent$D_IN;
	if (master_rspCnt$EN)
	  master_rspCnt <= `BSV_ASSIGNMENT_DELAY master_rspCnt$D_IN;
	if (master_shim_shim_arff_rv$EN)
	  master_shim_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_shim_shim_arff_rv$D_IN;
	if (master_shim_shim_awff_rv$EN)
	  master_shim_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_shim_shim_awff_rv$D_IN;
	if (master_shim_shim_bff_rv$EN)
	  master_shim_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_shim_shim_bff_rv$D_IN;
	if (master_shim_shim_rff_rv$EN)
	  master_shim_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_shim_shim_rff_rv$D_IN;
	if (master_shim_shim_wff_rv$EN)
	  master_shim_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_shim_shim_wff_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    master_awSent = 1'h0;
    master_cnt = 32'hAAAAAAAA;
    master_nextWriteAddr = 14'h2AAA;
    master_reqSent = 1'h0;
    master_rspCnt = 32'hAAAAAAAA;
    master_shim_shim_arff_rv = 45'h0AAAAAAAAAAA;
    master_shim_shim_awff_rv = 45'h0AAAAAAAAAAA;
    master_shim_shim_bff_rv = 4'hA;
    master_shim_shim_rff_rv = 133'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    master_shim_shim_wff_rv = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_master_putAXI4_AWFlit)
	begin
	  v__h1811 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_master_putAXI4_AWFlit)
	$display("%0t - MASTER %d - to %d - payload %d ",
		 v__h1811,
		 $signed(32'd1),
		 master_nextWriteAddr,
		 master_cnt_7_PLUS_1000___d18);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi_sig_awSig_src_dropWire$whas &&
	  !master_shim_shim_awff_rv$port1__read[44])
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi_sig_wSig_src_dropWire$whas &&
	  !master_shim_shim_wff_rv$port1__read[145])
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi_sig_bSig_snk_putWire$whas && master_shim_shim_bff_rv[3])
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (master_shim_shim_bff_rv$port1__read[3] && master_rspCnt == 32'd2)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi_sig_arSig_src_dropWire$whas && !master_shim_shim_arff_rv[44])
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi_sig_rSig_snk_putWire$whas && master_shim_shim_rff_rv[132])
	$display("WARNING: %m - putting into a Sink that can't be put into");
  end
  // synopsys translate_on
endmodule  // axiMaster1_synth

