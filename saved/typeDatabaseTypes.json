Interface ClockHacks::OutputBit {members {{method {Bit#(1) out {} {{(* ports = [] *)}}}}}} {position {src_BSV/ClockHacks.bsv 8 11}} {attributes {{(* always_enabled  *)} {(* always_ready  *)}}}
Interface ClockHacks::UnpackedClock {members {{interface Clock clk {}} {method {Action in Bit#(1) {{(* ports = ["x"] *)}}}}}} {position {src_BSV/ClockHacks.bsv 41 11}} {attributes {{(* always_enabled  *)} {(* always_ready  *)}}}
Interface ClockHacks::UnpackedReset {members {{interface Reset rst {}} {method {Action in Bit#(1) {{(* ports = ["x"] *)}}}}}} {position {src_BSV/ClockHacks.bsv 61 11}} {attributes {{(* always_enabled  *)} {(* always_ready  *)}}}
Interface ClockHacks::BlockIfc {members {{interface Clock clk {}} {interface Reset rst {}}}} {position {src_BSV/ClockHacks.bsv 83 11}}
Interface Giraffe_IFC::JTAG_IFC {members {{method {Action tdi Bit#(1) {{(* ports = ["tdi"] *)} {(* result = "unused0" *)} {(* prefix = "" *)}}}} {method {Action tms Bit#(1) {{(* ports = ["tms"] *)} {(* result = "unused1" *)} {(* prefix = "" *)}}}} {method {Action tclk Bit#(1) {{(* ports = ["tclk"] *)} {(* result = "unused2" *)} {(* prefix = "" *)}}}} {method {Bit#(1) tdo {} {{(* ports = [] *)} {(* result = "tdo" *)}}}} {interface Clock tclk_out {}}}} {position {src_BSV/Giraffe_IFC.bsv 24 11}} {attributes {{(* always_enabled  *)} {(* always_ready  *)}}}
Interface Giraffe_IFC::DMI_Master_IFC {members {{method {Action req_ready Bit#(1) {{(* ports = ["req_ready"] *)} {(* result = "unused0" *)} {(* prefix = "" *)}}}} {method {Bit#(1) req_valid {} {{(* ports = [] *)} {(* result = "req_valid" *)}}}} {method {Bit#(7) req_addr {} {{(* ports = [] *)} {(* result = "req_addr" *)}}}} {method {Bit#(32) req_data {} {{(* ports = [] *)} {(* result = "req_data" *)}}}} {method {Bit#(2) req_op {} {{(* ports = [] *)} {(* result = "req_op" *)}}}} {method {Bit#(1) rsp_ready {} {{(* ports = [] *)} {(* result = "rsp_ready" *)}}}} {method {Action rsp_valid Bit#(1) {{(* ports = ["rsp_valid"] *)} {(* result = "unused1" *)} {(* prefix = "" *)}}}} {method {Action rsp_data Bit#(32) {{(* ports = ["rsp_data"] *)} {(* result = "unused2" *)} {(* prefix = "" *)}}}} {method {Action rsp_response Bit#(2) {{(* ports = ["rsp_response"] *)} {(* result = "unused3" *)} {(* prefix = "" *)}}}}}} {position {src_BSV/Giraffe_IFC.bsv 41 11}} {attributes {{(* always_enabled  *)} {(* always_ready  *)}}}
Interface Giraffe_IFC::DMI_IFC {members {{method {Bit#(1) req_ready {} {{(* ports = [] *)} {(* result = "req_ready" *)}}}} {method {Action req_valid Bit#(1) {{(* ports = ["req_valid"] *)} {(* result = "unused0" *)} {(* prefix = "" *)}}}} {method {Action req_addr Bit#(7) {{(* ports = ["req_addr"] *)} {(* result = "unused1" *)} {(* prefix = "" *)}}}} {method {Action req_data Bit#(32) {{(* ports = ["req_data"] *)} {(* result = "unused2" *)} {(* prefix = "" *)}}}} {method {Action req_op Bit#(2) {{(* ports = ["req_op"] *)} {(* result = "unused3" *)} {(* prefix = "" *)}}}} {method {Action rsp_ready Bit#(1) {{(* ports = ["rsp_ready"] *)} {(* result = "unused4" *)} {(* prefix = "" *)}}}} {method {Bit#(1) rsp_valid {} {{(* ports = [] *)} {(* result = "rsp_valid" *)}}}} {method {Bit#(32) rsp_data {} {{(* ports = [] *)} {(* result = "rsp_data" *)}}}} {method {Bit#(2) rsp_response {} {{(* ports = [] *)} {(* result = "rsp_response" *)}}}}}} {position {src_BSV/Giraffe_IFC.bsv 71 11}} {attributes {{(* always_enabled  *)} {(* always_ready  *)}}}
Interface {Core_IFC::Core_IFC#(numeric type t_n_interrupt_sources)} polymorphic {members {{interface {ClientServer::Server#(Bool, Bool)} cpu_reset_server {}} {interface {AXI4_Types::AXI4_Master#(5, 64, 64, 0, 0, 0, 0, 0)} cpu_imem_master {}} {interface {AXI4_Types::AXI4_Master#(6, 64, 64, 0, 0, 0, 0, 0)} core_mem_master {}} {interface {AXI4_Types::AXI4_Slave#(6, 64, 512, 0, 0, 0, 0, 0)} dma_server {}} {method {{Vector::Vector#(t_n_interrupt_sources, PLIC::PLIC_Source_IFC)} core_external_interrupt_sources {} {}}} {method {Action nmi_req Bool {{(* ports = ["set_not_clear"] *)}}}} {interface DM_Common::DMI dm_dmi {}} {interface {ClientServer::Client#(Bool, Bool)} ndm_reset_client {}} {method {Action set_verbosity {Bit#(4) Bit#(64)} {{(* ports = ["verbosity", "logdelay"] *)}}}} {method {Action ma_ddr4_ready {} {{(* ports = [] *)}}}} {method {Bit#(8) mv_status {} {{(* ports = [] *)} {(* always_ready  *)}}}}}} {position {../src_Core/Core/Core_IFC.bsv 80 11}}
Interface Giraffe_IFC::Platform_IFC {members {{interface {AXI4_Types::AXI4_Slave_Sig#(4, 64, 64, 0, 0, 0, 0, 0)} slave0 {}} {interface {AXI4_Types::AXI4_Slave_Sig#(4, 64, 64, 0, 0, 0, 0, 0)} slave1 {}} {interface {AXI4_Types::AXI4_Slave_Sig#(4, 64, 64, 0, 0, 0, 0, 0)} slave2 {}} {interface {AXI4_Types::AXI4_Slave_Sig#(4, 64, 64, 0, 0, 0, 0, 0)} slave3 {}} {method {Bit#(1) interrupt0 {} {{(* ports = [] *)} {(* always_enabled  *)} {(* always_ready  *)}}}} {method {Bit#(1) interrupt1 {} {{(* ports = [] *)} {(* always_enabled  *)} {(* always_ready  *)}}}} {method {Bit#(1) interrupt2 {} {{(* ports = [] *)} {(* always_enabled  *)} {(* always_ready  *)}}}} {interface BusDefines::BusSend#(Bit#(8)) uart_out {}} {interface BusDefines::BusRecv#(Bit#(8)) uart_in {}}}} {position {src_BSV/Giraffe_IFC.bsv 147 11}}
Alias JtagTap::ABITS 6 {position {src_BSV/JtagTap.bsv 15 11}}
Alias JtagTap::IR_LENGTH 18 {position {src_BSV/JtagTap.bsv 20 12}}
Alias JtagTap::DR_LENGTH 40 {position {src_BSV/JtagTap.bsv 27 25}}
Enum JtagTap::JtagState {members {TEST_LOGIC_RESET RUN_TEST_IDLE SELECT_DR_SCAN CAPTURE_DR SHIFT_DR EXIT1_DR PAUSE_DR EXIT2_DR UPDATE_DR SELECT_IR_SCAN CAPTURE_IR SHIFT_IR EXIT1_IR PAUSE_IR EXIT2_IR UPDATE_IR}} {width 4} {position {src_BSV/JtagTap.bsv 79 6}}
Struct JtagTap::DTMCS {members {{Reserved::ReservedZero#(14) reserved {width 14}} {Bit#(1) dmihardreset {width 1}} {Bit#(1) dmireset {width 1}} {Reserved::ReservedZero#(1) reserved2 {width 1}} {Bit#(3) idle {width 3}} {Bit#(2) dmistat {width 2}} {Bit#(6) abits {width 6}} {Bit#(4) version {width 4}}}} {width 32} {position {src_BSV/JtagTap.bsv 90 6}}
Alias JtagTap::DMI_OP Bit#(2) {position {src_BSV/JtagTap.bsv 107 17}}
Struct JtagTap::DMI {members {{Bit#(6) address {width 6}} {Bit#(32) data {width 32}} {Bit#(2) op {width 2}}}} {width 40} {position {src_BSV/JtagTap.bsv 120 6}}
Interface JtagTap::JtagTap_IFC {members {{interface Giraffe_IFC::JTAG_IFC jtag {}} {interface Giraffe_IFC::DMI_Master_IFC dmi {}}}} {position {src_BSV/JtagTap.bsv 174 11}}
Interface P2_Core::P2_Core_IFC {members {{interface {AXI4_Types::AXI4_Master_Sig#(5, 64, 64, 0, 0, 0, 0, 0)} master0 {}} {interface {AXI4_Types::AXI4_Master_Sig#(6, 64, 64, 0, 0, 0, 0, 0)} master1 {}} {method {Action interrupt_reqs Bit#(0) {{(* ports = ["cpu_external_interrupt_req"] *)} {(* prefix = "" *)} {(* always_enabled  *)} {(* always_ready  *)}}}} {interface Giraffe_IFC::JTAG_IFC jtag {}}}} {position {src_BSV/P2_Core.bsv 82 11}}
Interface {CRC::CRC#(numeric type n)} polymorphic {members {{method {Action add Bit#(8) {{(* ports = ["data"] *)}}}} {method {Action clear {} {{(* ports = [] *)}}}} {method {Bit#(n) result {} {{(* ports = [] *)}}}} {method {ActionValue#(Bit#(n)) complete {} {{(* ports = [] *)}}}}}} {position {%/Libraries/CRC.bsv 19 11 {Library CRC}}}
Struct BRAM::BRAM_Configure {members {{Integer memorySize} {Integer latency} {BRAM::LoadFormat loadFormat} {Integer outFIFODepth} {Bool allowWriteResponseBypass {width 1}}}} {position {%/Libraries/BRAM.bsv 47 6 {Library BRAM}}}
TaggedUnion BRAM::LoadFormat {members {{void None {width 0}} {String Hex} {String Binary}}} {position {%/Libraries/BRAM.bsv 53 6 {Library BRAM}}}
Struct {BRAM_Compat::BRAMRequest#(type addr, type data)} polymorphic {members {{Bool write {width 1}} {addr address} {data datain}}} {position {%/Libraries/BRAM_Compat.bsv 23 19 {Library BRAM_Compat}}}
Struct {BRAM_Compat::BRAMRequestBE#(type addr, type data, numeric type n)} polymorphic {members {{Bit#(n) writeen} {addr address} {data datain}}} {position {%/Libraries/BRAM_Compat.bsv 29 19 {Library BRAM_Compat}}}
Alias {BRAM_Compat::BRAMServer#(type addr, type data)} {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} {position {%/Libraries/BRAM_Compat.bsv 31 49 {Library BRAM_Compat}}}
Alias {BRAM_Compat::BRAMClient#(type addr, type data)} {ClientServer::Client#(BRAM_Compat::BRAMRequest#(addr, data), data)} {position {%/Libraries/BRAM_Compat.bsv 32 49 {Library BRAM_Compat}}}
Alias {BRAM_Compat::BRAMServerBE#(type addr, type data, numeric type n)} {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} {position {%/Libraries/BRAM_Compat.bsv 34 54 {Library BRAM_Compat}}}
Alias {BRAM_Compat::BRAMClientBE#(type addr, type data, numeric type n)} {ClientServer::Client#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} {position {%/Libraries/BRAM_Compat.bsv 35 54 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM1Port#(type addr, type data)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} portA {}}}} {position {%/Libraries/BRAM_Compat.bsv 66 11 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM1PortBE#(type addr, type data, numeric type n)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} portA {}}}} {position {%/Libraries/BRAM_Compat.bsv 94 11 {Library BRAM_Compat}}}
Alias {BRAM::BRAM1PortBE8#(type addr, type data)} {BRAM::BRAM1PortBE#(addr, data, TDiv#(SizeOf#(data), 8))} {position {%/Libraries/BRAM.bsv 134 59 {Library BRAM}}}
Interface {BRAM_Compat::BRAM2Port#(type addr, type data)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} portA {}} {interface {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} portB {}}}} {position {%/Libraries/BRAM_Compat.bsv 61 11 {Library BRAM_Compat}}}
Interface {MemBRAM::BRAM#(numeric type aw, numeric type dw)} polymorphic {members {{method {Action put {{Bit#(TDiv#(dw, 8))} Bit#(aw) Bit#(dw)} {{(* ports = ["we", "addr", "d"] *)}}}} {method {Bit#(dw) peek {} {{(* ports = [] *)}}}}}} {position {../libs/BlueStuff/BlueUtils/MemBRAM.bsv 46 11}}
Interface {BRAM_Compat::BRAM2PortBE#(type addr, type data, numeric type n)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} portA {}} {interface {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} portB {}}}} {position {%/Libraries/BRAM_Compat.bsv 89 11 {Library BRAM_Compat}}}
Typeclass {BRAM::RequestToBRAM#(type bram_request_t, type bramifc_t)} {members {{{function Action f(bramifc_t x1, bram_request_t x2)} doRequest}}} {instances {{BRAM::RequestToBRAM#(BRAM::BRAMRequest#(addr, data), BRAMCore::BRAM_PORT#(addr, data))} {BRAM::RequestToBRAM#(BRAM::BRAMRequestBE#(addr, data, n), BRAMCore::BRAM_PORT_BE#(addr, data, n))}}} {position {%/Libraries/BRAM.bsv 429 11 {Library BRAM}}}
Typeclass {BRAM::RequestToResponse#(type bram_request_t)} {members {{{function Bool f(bram_request_t x1)} responseRequired} {{function Bool f(bram_request_t x1)} isWriteRequest}}} {instances {{BRAM::RequestToResponse#(BRAM::BRAMRequest#(addr, data))} {BRAM::RequestToResponse#(BRAM::BRAMRequestBE#(addr, data, n))}}} {position {%/Libraries/BRAM.bsv 432 11 {Library BRAM}}}
Typeclass {BRAM::BRAMToResponse#(type bramifc_t, type response_t)} {members {{{function ActionValue#(response_t) f(bramifc_t x1)} getResponse} {{function response_t f(bramifc_t x1)} readResponse}}} {instances {{BRAM::BRAMToResponse#(BRAMCore::BRAM_PORT#(addr, data), data)} {BRAM::BRAMToResponse#(BRAMCore::BRAM_PORT_BE#(addr, data, n), data)}}} {position {%/Libraries/BRAM.bsv 436 11 {Library BRAM}}}
Interface {BRAM::ServerWithClear#(type req, type resp)} polymorphic {members {{interface {ClientServer::Server#(req, resp)} server {}} {method {Action clear {} {{(* ports = [] *)} {(* always_ready  *)}}}}}} {position {%/Libraries/BRAM.bsv 443 11 {Library BRAM}}}
Interface BRAM::SizedReg {members {{method {Action _write Integer {{(* ports = ["i"] *)}}}} {method {Action addA Integer {{(* ports = ["i"] *)}}}} {method {Action addB Integer {{(* ports = ["d"] *)}}}} {method {Bool isLessThan Integer {{(* ports = ["i"] *)}}}} {method {Bool isGreaterThan Integer {{(* ports = ["i"] *)}}}} {method {Bool isEqualTo Integer {{(* ports = ["i"] *)}}}}}} {position {%/Libraries/BRAM.bsv 880 11 {Library BRAM}}}
Interface {GetPut::Get#(type a)} polymorphic {members {{method {ActionValue#(a) get {} {}}}}} {position {%/Libraries/GetPut.bs 88 10 {Library GetPut}}}
Interface {GetPut::GetS#(type a)} polymorphic {members {{method {a first {} {}}} {method {Action deq {} {}}}}} {position {%/Libraries/GetPut.bs 91 10 {Library GetPut}}}
Interface {GetPut::Put#(type a)} polymorphic {members {{method {Action put a {{(* prefix = "" *)} {(* result = "UNUSED" *)} {(* ports = ["put"] *)}}}}}} {position {%/Libraries/GetPut.bs 115 10 {Library GetPut}}}
Interface {GetPut::PutS#(type a)} polymorphic {members {{method {Action offer a {}}} {method {Bool accepted {} {}}}}} {position {%/Libraries/GetPut.bs 118 10 {Library GetPut}}}
Alias {GetPut::GetPut#(type a)} {Tuple2#(GetPut::Get#(a), GetPut::Put#(a))} {position {%/Libraries/GetPut.bs 127 5 {Library GetPut}}}
Typeclass {GetPut::ToGet#(type a, type b)} {dependencies {{a determines b}}} {members {{{function GetPut::Get#(b) f(a x1)} toGet}}} {instances {{GetPut::ToGet#(ActionValue#(a), a)} {GetPut::ToGet#(AlignedFIFOs::AlignedFIFO#(t), t)} {GetPut::ToGet#(Clocks::SyncFIFOIfc#(a), a)} {GetPut::ToGet#(CommitIfc::SendCommit#(a), a)} {GetPut::ToGet#(FIFO::FIFO#(a), a)} {GetPut::ToGet#(FIFOF::FIFOF#(a), a)} {GetPut::ToGet#(FIFOLevel::FIFOCountIfc#(a, n), a)} {GetPut::ToGet#(FIFOLevel::FIFOLevelIfc#(a, n), a)} {GetPut::ToGet#(FIFOLevel::SyncFIFOCountIfc#(a, n), a)} {GetPut::ToGet#(FIFOLevel::SyncFIFOLevelIfc#(a, n), a)} {GetPut::ToGet#(GetPut::Get#(a), a)} {GetPut::ToGet#(MasterSlaveCHERI::CheckedGet#(data_t), data_t)} {GetPut::ToGet#(NullCrossingFIFOF::CrossingFIFOF#(t), t)} {GetPut::ToGet#(PAClib::PipeOut#(a), a)} {GetPut::ToGet#(RWire#(a), a)} {GetPut::ToGet#(ReadOnly#(a), a)} {GetPut::ToGet#(Reg#(a), a)} {GetPut::ToGet#(Semi_FIFOF::FIFOF_O#(t), t)} {GetPut::ToGet#(SourceSink::Source#(t), t)} {GetPut::ToGet#(a, a)}}} {position {%/Libraries/GetPut.bs 417 6 {Library GetPut}}}
Typeclass {GetPut::ToPut#(type a, type b)} {dependencies {{a determines b}}} {members {{{function GetPut::Put#(b) f(a x1)} toPut}}} {instances {{GetPut::ToPut#(AlignedFIFOs::AlignedFIFO#(t), t)} {GetPut::ToPut#(Clocks::SyncFIFOIfc#(a), a)} {GetPut::ToPut#(CommitIfc::RecvCommit#(a), a)} {GetPut::ToPut#(FIFO::FIFO#(a), a)} {GetPut::ToPut#(FIFOF::FIFOF#(a), a)} {GetPut::ToPut#(FIFOLevel::FIFOCountIfc#(a, n), a)} {GetPut::ToPut#(FIFOLevel::FIFOLevelIfc#(a, n), a)} {GetPut::ToPut#(FIFOLevel::SyncFIFOCountIfc#(a, n), a)} {GetPut::ToPut#(FIFOLevel::SyncFIFOLevelIfc#(a, n), a)} {GetPut::ToPut#(GetPut::Put#(a), a)} {GetPut::ToPut#(MasterSlaveCHERI::CheckedPut#(data_t), data_t)} {GetPut::ToPut#(NullCrossingFIFOF::CrossingFIFOF#(t), t)} {GetPut::ToPut#(RWire#(a), a)} {GetPut::ToPut#(Reg#(a), a)} {GetPut::ToPut#(Semi_FIFOF::FIFOF_I#(t), t)} {GetPut::ToPut#(SourceSink::Sink#(t), t)} {GetPut::ToPut#(function Action f(a x1), a)}}} {position {%/Libraries/GetPut.bs 420 6 {Library GetPut}}}
Interface {ClientServer::Client#(type a, type b)} polymorphic {members {{interface GetPut::Get#(a) request {}} {interface GetPut::Put#(b) response {}}}} {position {%/Libraries/ClientServer.bs 34 10 {Library ClientServer}}}
Interface {ClientServer::Server#(type a, type b)} polymorphic {members {{interface GetPut::Put#(a) request {}} {interface GetPut::Get#(b) response {}}}} {position {%/Libraries/ClientServer.bs 45 10 {Library ClientServer}}}
Alias {ClientServer::ClientServer#(type a, type b)} {Tuple2#(ClientServer::Client#(a, b), ClientServer::Server#(a, b))} {position {%/Libraries/ClientServer.bs 100 5 {Library ClientServer}}}
TaggedUnion {ModuleContextCore::ModuleContext#(type c, type i)} polymorphic {members {{{module f#(c x1)(Tuple2#(c, i))} M}}} {position {%/Libraries/ModuleContextCore.bs 4 5 {Library ModuleContextCore}}}

Struct {Complex::Complex#(type any_t)} polymorphic {members {{any_t rel} {any_t img}}} {position {%/Libraries/Complex.bsv 22 11 {Library Complex}}}



Interface {FoldFIFOF::FoldFIFO#(type a)} polymorphic {members {{method {Action enq a {}}} {method {Action deq {} {}}} {method {a first {} {}}} {method {Bool notFull {} {}}} {method {Bool notEmpty {} {}}} {method {Action clear {} {}}} {method {b foldr {{function b f(a x1, b x2)} b} {}}}}} {position {%/Libraries/FoldFIFOF.bs 12 10 {Library FoldFIFOF}}}

Interface {SPSRAM::VSyncSRAM#(numeric type adrs, numeric type dtas)} polymorphic {members {{method {PrimAction exec {Bit#(adrs) Bit#(dtas) Bit#(1) Bit#(1)} {}}} {method {Bit#(dtas) rdata {} {}}}}} {position {%/Libraries/SPSRAM.bs 67 10 {Library SPSRAM}}}
Interface {BRAMFIFO::IBRAMFIFOF#(numeric type log2depth, type t)} polymorphic {members {{interface FIFOF::FIFOF#(t) fifo {}}}} {position {%/Libraries/BRAMFIFO.bsv 32 11 {Library BRAMFIFO}}}
Interface {BRAMFIFO::ISyncBRAMFIFOFIfc#(numeric type log2depth, type t)} polymorphic {members {{interface Clocks::SyncFIFOIfc#(t) fifo {}}}} {position {%/Libraries/BRAMFIFO.bsv 36 11 {Library BRAMFIFO}}}
Interface {AlignedFIFOs::Store#(type i, type a, numeric type n)} polymorphic {members {{method {Action write {i a} {{(* ports = ["idx", "value"] *)}}}} {method {Action prefetch i {{(* ports = ["idx"] *)}}}} {method {a read i {{(* ports = ["idx"] *)}}}}}} {position {%/Libraries/AlignedFIFOs.bsv 44 11 {Library AlignedFIFOs}}}
Interface {AlignedFIFOs::RawReg#(numeric type n)} polymorphic {members {{method {Action write Bit#(n) {{(* ports = ["x"] *)}}}} {method {Bit#(n) read {} {{(* ports = [] *)}}}}}} {position {%/Libraries/AlignedFIFOs.bsv 54 11 {Library AlignedFIFOs}}} {attributes {{(* always_ready  *)}}}
Interface {AlignedFIFOs::AlignedFIFO#(type a)} polymorphic {members {{method {Action enq a {{(* ports = ["x"] *)}}}} {method {a first {} {{(* ports = [] *)}}}} {method {Action deq {} {{(* ports = [] *)}}}} {method {Bool dNotFull {} {{(* ports = [] *)}}}} {method {Bool dNotEmpty {} {{(* ports = [] *)}}}} {method {Bool sNotFull {} {{(* ports = [] *)}}}} {method {Bool sNotEmpty {} {{(* ports = [] *)}}}} {method {Action dClear {} {{(* ports = [] *)}}}} {method {Action sClear {} {{(* ports = [] *)}}}}}} {position {%/Libraries/AlignedFIFOs.bsv 232 11 {Library AlignedFIFOs}}}
Interface {Pull::Pull#(type a)} polymorphic {members {{method {ActionValue#(a) pull {} {}}}}} {position {%/Libraries/Pull.bs 21 10 {Library Pull}}}
Interface {SRAM::ShiftReg#(numeric type n, type a)} polymorphic {members {{method {a output {} {}}} {method {Action shift a {}}}}} {position {%/Libraries/SRAM.bs 135 11 {Library SRAM}}}
Interface StmtFSMUtil::MEState {members {{method {Action set Integer {{(* ports = ["value"] *)}}}} {method {Action set_delayed Integer {{(* ports = ["value"] *)}}}} {method {Action reset {} {{(* ports = [] *)}}}} {method {Action reset_delayed {} {{(* ports = [] *)}}}} {method {Bool is Integer {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/StmtFSMUtil.bsv 7 11 {Library StmtFSMUtil}}}
Interface {StmtFSMUtil::MEStateInternal#(type a)} polymorphic {members {{method {Action set Integer {{(* ports = ["value"] *)}}}} {method {Action set_delayed Integer {{(* ports = ["value"] *)}}}} {method {Action reset {} {{(* ports = [] *)}}}} {method {Action reset_delayed {} {{(* ports = [] *)}}}} {method {Bool is Integer {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/StmtFSMUtil.bsv 15 11 {Library StmtFSMUtil}}}
Alias {SyncSRAM::SyncSRAMS#(numeric type lat, numeric type adrs, numeric type dtas)} {ClientServer::Server#(SyncSRAM::SyncSRAMrequest#(lat, adrs, dtas), Bit#(dtas))} {position {%/Libraries/SyncSRAM.bs 21 5 {Library SyncSRAM}}}
Alias {SyncSRAM::SyncSRAMC#(numeric type lat, numeric type adrs, numeric type dtas)} {ClientServer::Client#(SyncSRAM::SyncSRAMrequest#(lat, adrs, dtas), Bit#(dtas))} {position {%/Libraries/SyncSRAM.bs 30 5 {Library SyncSRAM}}}
Interface {SyncSRAM::SyncSRAMrequest#(numeric type lat, numeric type adrs, numeric type dtas)} polymorphic {members {{method {Bit#(adrs) addr {} {}}} {method {Bit#(dtas) wdata {} {}}} {method {Bit#(1) we {} {}}} {method {Bit#(1) ena {} {}}}}} {position {%/Libraries/SyncSRAM.bs 43 11 {Library SyncSRAM}}}
Interface {CommitIfc::SendCommit#(type a)} polymorphic {members {{method {a dataout {} {{(* ports = [] *)}}}} {method {Action ack {} {{(* ports = [] *)} {(* always_ready  *)}}}}}} {position {%/Libraries/CommitIfc.bsv 15 11 {Library CommitIfc}}}
Interface {CommitIfc::RecvCommit#(type a)} polymorphic {members {{method {Action datain a {{(* ports = ["din"] *)} {(* always_ready  *)}}}} {method {Bool accept {} {{(* ports = [] *)} {(* always_ready  *)}}}}}} {position {%/Libraries/CommitIfc.bsv 21 11 {Library CommitIfc}}}
Typeclass {CommitIfc::ToSendCommit#(type a, type b)} {dependencies {{a determines b}}} {members {{{function c#(CommitIfc::SendCommit#(b)) f(a x1)   provisos (IsModule#(c, d))} mkSendCommit}}} {instances {{CommitIfc::ToSendCommit#(Clocks::SyncFIFOIfc#(a), a)} {CommitIfc::ToSendCommit#(FIFO::FIFO#(a), a)} {CommitIfc::ToSendCommit#(FIFOF::FIFOF#(a), a)} {CommitIfc::ToSendCommit#(FIFOLevel::FIFOLevelIfc#(a, n), a)} {CommitIfc::ToSendCommit#(GetPut::Get#(a), a)   provisos (Bits#(a, sa))} {CommitIfc::ToSendCommit#(RWire#(a), a)}}} {position {%/Libraries/CommitIfc.bsv 147 11 {Library CommitIfc}}}
Typeclass {CommitIfc::ToRecvCommit#(type a, type b)} {dependencies {{a determines b}}} {members {{{function c#(CommitIfc::RecvCommit#(b)) f(a x1)   provisos (IsModule#(c, d))} mkRecvCommit}}} {instances {{CommitIfc::ToRecvCommit#(Clocks::SyncFIFOIfc#(a), a)   provisos (Bits#(a, sa))} {CommitIfc::ToRecvCommit#(FIFOF::FIFOF#(a), a)   provisos (Bits#(a, sa))} {CommitIfc::ToRecvCommit#(FIFOLevel::FIFOLevelIfc#(a, n), a)   provisos (Bits#(a, sa))} {CommitIfc::ToRecvCommit#(GetPut::Put#(a), a)   provisos (Bits#(a, sa))} {CommitIfc::ToRecvCommit#(RWire#(a), a)}}} {position {%/Libraries/CommitIfc.bsv 152 11 {Library CommitIfc}}}
Interface {CommitIfc::ClientCommit#(type req, type resp)} polymorphic {members {{interface CommitIfc::SendCommit#(req) request {}} {interface CommitIfc::RecvCommit#(resp) response {}}}} {position {%/Libraries/CommitIfc.bsv 354 11 {Library CommitIfc}}}
Interface {CommitIfc::ServerCommit#(type req, type resp)} polymorphic {members {{interface CommitIfc::RecvCommit#(req) request {}} {interface CommitIfc::SendCommit#(resp) response {}}}} {position {%/Libraries/CommitIfc.bsv 359 11 {Library CommitIfc}}}
Interface {CBus::CBus#(numeric type sa, numeric type sd)} polymorphic {members {{method {Action write {Bit#(sa) Bit#(sd)} {{(* ports = ["addr", "data"] *)}}}} {method {ActionValue#(Bit#(sd)) read Bit#(sa) {{(* ports = ["addr"] *)} {(* always_ready  *)}}}}}} {position {%/Libraries/CBus.bsv 16 11 {Library CBus}}}
Interface {CBus::IWithCBus#(type cbus_IFC, type device_IFC)} polymorphic {members {{method {cbus_IFC cbus_ifc {} {}}} {method {device_IFC device_ifc {} {}}}}} {position {%/Libraries/CBus.bsv 23 11 {Library CBus}}}
Alias {CBus::CBusItem#(numeric type sa, numeric type sd)} {CBus::CBus#(sa, sd)} {position {%/Libraries/CBus.bsv 33 23 {Library CBus}}}
Alias {CBus::ModWithCBus#(numeric type sa, numeric type sd, type i)} {ModuleContextCore::ModuleContext#(HList::HCons#(UnitAppendList::UAList#(CBus::CBus#(sa, sd)), HList::HNil), i)} {position {%/Libraries/CBus.bsv 36 46 {Library CBus}}}
Struct {CBus::CRAddr#(numeric type sa, numeric type sd)} polymorphic {members {{Bit#(sa) a} {Bit#(TLog#(sd)) o}}} {position {%/Libraries/CBus.bsv 41 6 {Library CBus}}}
Typeclass {CBus::ExtendNP#(type a, numeric type m, numeric type n)} {members {{{function a#(m) f(a#(n) x1)} extendNP} {{function a#(m) f(a#(n) x1)} zeroExtendNP} {{function a#(m) f(a#(n) x1)} signExtendNP} {{function a#(m) f(a#(n) x1)} truncateNP} {{function a#(m) f(a#(n) x1)} truncateLSBNP}}} {instances {{CBus::ExtendNP#(Bit, m, n)} {CBus::ExtendNP#(Int, m, n)} {CBus::ExtendNP#(UInt, m, n)}}} {position {%/Libraries/CBus.bsv 454 11 {Library CBus}}}

Interface {BGetPut::BGetS#(numeric type sa)} polymorphic {members {{method {Bit#(sa) gvalue {} {}}} {method {Bool gpresent {} {}}} {method {Action gcredit Bool {}}}}} {position {%/Libraries/BGetPut.bs 36 10 {Library BGetPut}}}
Interface {BGetPut::BPutS#(numeric type sa)} polymorphic {members {{method {Action pvalue Bit#(sa) {}}} {method {Action ppresent Bool {}}} {method {Bool pcredit {} {}}}}} {position {%/Libraries/BGetPut.bs 48 10 {Library BGetPut}}}
Alias {BGetPut::BGet#(type a)} BGetPut::BGetS#(SizeOf#(a)) {position {%/Libraries/BGetPut.bs 60 5 {Library BGetPut}}}
Alias {BGetPut::BPut#(type a)} BGetPut::BPutS#(SizeOf#(a)) {position {%/Libraries/BGetPut.bs 61 5 {Library BGetPut}}}
Alias {BGetPut::BGetPut#(type a)} {Tuple2#(BGetPut::BGetS#(SizeOf#(a)), GetPut::Put#(a))} {position {%/Libraries/BGetPut.bs 63 5 {Library BGetPut}}}
Alias {BGetPut::GetBPut#(type a)} {Tuple2#(GetPut::Get#(a), BGetPut::BPutS#(SizeOf#(a)))} {position {%/Libraries/BGetPut.bs 64 5 {Library BGetPut}}}
Interface {BGetPut::BClientS#(numeric type sa, numeric type sb)} polymorphic {members {{interface BGetPut::BGetS#(sa) request {}} {interface BGetPut::BPutS#(sb) response {}}}} {position {%/Libraries/BGetPut.bs 182 10 {Library BGetPut}}}
Interface {BGetPut::BServerS#(numeric type sa, numeric type sb)} polymorphic {members {{interface BGetPut::BPutS#(sa) request {}} {interface BGetPut::BGetS#(sb) response {}}}} {position {%/Libraries/BGetPut.bs 186 10 {Library BGetPut}}}
Alias {BGetPut::BClient#(type a, type b)} {BGetPut::BClientS#(SizeOf#(a), SizeOf#(b))} {position {%/Libraries/BGetPut.bs 208 5 {Library BGetPut}}}
Alias {BGetPut::BServer#(type a, type b)} {BGetPut::BServerS#(SizeOf#(a), SizeOf#(b))} {position {%/Libraries/BGetPut.bs 209 5 {Library BGetPut}}}
Alias {BGetPut::BClientServer#(type a, type b)} {Tuple2#(BGetPut::BClientS#(SizeOf#(a), SizeOf#(b)), ClientServer::Server#(a, b))} {position {%/Libraries/BGetPut.bs 210 5 {Library BGetPut}}}
Alias {BGetPut::ClientBServer#(type a, type b)} {Tuple2#(ClientServer::Client#(a, b), BGetPut::BServerS#(SizeOf#(a), SizeOf#(b)))} {position {%/Libraries/BGetPut.bs 211 5 {Library BGetPut}}}
Struct {ZBusUtil::ZBit#(type t)} polymorphic {members {{t word}}} {position {%/Libraries/ZBusUtil.bsv 34 19 {Library ZBusUtil}}}
Interface {ZBusUtil::ConvertToZ#(type i)} polymorphic {members {{method {ZBusUtil::ZBit#(i) convert {i Bool} {{(* ports = ["x1", "x2"] *)}}}}}} {position {%/Libraries/ZBusUtil.bsv 52 11 {Library ZBusUtil}}}
Interface {ZBusUtil::ConvertFromZ#(type i)} polymorphic {members {{method {i convert ZBusUtil::ZBit#(i) {{(* ports = ["x1"] *)}}}}}} {position {%/Libraries/ZBusUtil.bsv 91 11 {Library ZBusUtil}}}
Interface {ZBusUtil::ResolveZ#(type i)} polymorphic {members {{method {ZBusUtil::ZBit#(i) resolve {ZBusUtil::ZBit#(i) ZBusUtil::ZBit#(i)} {{(* ports = ["x1", "x2"] *)}}}}}} {position {%/Libraries/ZBusUtil.bsv 130 11 {Library ZBusUtil}}}
Interface {ZBus::ZBusInternalIFC#(type t)} polymorphic {members {{method {ZBusUtil::ZBit#(t) zout {} {{(* ports = [] *)}}}}}} {position {%/Libraries/ZBus.bsv 84 11 {Library ZBus}}}
Interface {ZBus::ZBusBusIFC#(type t)} polymorphic {members {{method {Action fromBusSample {ZBusUtil::ZBit#(t) Bool} {{(* ports = ["value", "isJust"] *)}}}} {method {ZBusUtil::ZBit#(t) toBusValue {} {{(* ports = [] *)}}}} {method {Bool toBusCtl {} {{(* ports = [] *)}}}}}} {position {%/Libraries/ZBus.bsv 158 11 {Library ZBus}}}
Enum ZBus::BState {members {HiZN HiZ Nothing}} {width 2} {position {%/Libraries/ZBus.bsv 227 35 {Library ZBus}}}
Interface {ZBus::ZBusClientIFC#(type t)} polymorphic {members {{method {Action drive t {{(* ports = ["value"] *)}}}} {method {t get {} {{(* ports = [] *)}}}} {method {Bool fromBusValid {} {{(* ports = [] *)}}}}}} {position {%/Libraries/ZBus.bsv 317 11 {Library ZBus}}}
Interface {ZBus::ZBusDualIFC#(type t)} polymorphic {members {{interface ZBus::ZBusBusIFC#(t) busIFC {}} {interface ZBus::ZBusClientIFC#(t) clientIFC {}}}} {position {%/Libraries/ZBus.bsv 323 11 {Library ZBus}}}
Interface {ProbeWire::ProbeWire#(type a)} polymorphic {members {{method {a id a {{(* ports = ["x"] *)}}}}}} {position {%/Libraries/ProbeWire.bsv 28 11 {Library ProbeWire}}}

Interface {SPSRAM::VSyncSRAM#(numeric type adrs, numeric type dtas)} polymorphic {members {{method {PrimAction exec {Bit#(adrs) Bit#(dtas) Bit#(1) Bit#(1)} {}}} {method {Bit#(dtas) rdata {} {}}}}} {position {%/Libraries/SPSRAM.bs 67 10 {Library SPSRAM}}}
Alias {TRAM::TRAM#(type tag, type adr, type dta)} {ClientServer::Server#(TRAM::TRAMreq#(tag, adr, dta), Tuple2#(tag, dta))} {position {%/Libraries/TRAM.bs 18 5 {Library TRAM}}}
Alias {TRAM::TRAMclient#(type tag, type adr, type dta)} {ClientServer::Client#(TRAM::TRAMreq#(tag, adr, dta), Tuple2#(tag, dta))} {position {%/Libraries/TRAM.bs 26 5 {Library TRAM}}}
TaggedUnion {TRAM::TRAMreq#(type tg, type adr, type dta)} polymorphic {members {{{Tuple2#(tg, adr)} Read} {{Tuple2#(adr, dta)} Write}}} {position {%/Libraries/TRAM.bs 45 5 {Library TRAM}}}
Alias {TRAM::TRAMresp#(type tg, type dta)} {Tuple2#(tg, dta)} {position {%/Libraries/TRAM.bs 57 5 {Library TRAM}}}
Interface {PAClib::PipeOut#(type t)} polymorphic {members {{method {t first {} {{(* ports = [] *)}}}} {method {Action deq {} {{(* ports = [] *)}}}} {method {Bool notEmpty {} {{(* ports = [] *)}}}}}} {position {%/Libraries/PAClib.bsv 44 11 {Library PAClib}}}
Alias {PAClib::Pipe#(type ta, type tb)} {module f#(PAClib::PipeOut#(ta) x1)(PAClib::PipeOut#(tb))} {position {%/Libraries/PAClib.bsv 55 9 {Library PAClib}}}
Typeclass {PAClib::VectorTreeReduce#(numeric type n, type a)} {members {{{module f#(module x1#(PAClib::PipeOut#(Tuple2#(a, a)) x1)(PAClib::PipeOut#(a)), Bit#(32) x2, PAClib::PipeOut#(Vector::Vector#(n, a)) x3)(PAClib::PipeOut#(a))} mkTreeReducePipe} {{module f#(function a x1(a x1, a x2), function a x2(a x1), Bit#(32) x3, PAClib::PipeOut#(Vector::Vector#(n, a)) x4)(PAClib::PipeOut#(a))} mkTreeReduceFn}}} {instances {{PAClib::VectorTreeReduce#(1, a)   provisos (Bits#(a, sa))} {PAClib::VectorTreeReduce#(2, a)   provisos (Bits#(a, sa))} {PAClib::VectorTreeReduce#(n, a)   provisos (PAClib::VectorTreeReduce#(n2, a), Div#(n, 2, n2), Bits#(a, sa))}}} {position {%/Libraries/PAClib.bsv 1582 11 {Library PAClib}}}
Alias LBus::LBUS_ADDR_SIZE 24 {position {%/Libraries/LBus.bsv 19 12 {Library LBus}}}
Alias LBus::LBUS_DATA_SIZE 32 {position {%/Libraries/LBus.bsv 20 12 {Library LBus}}}
Alias LBus::LBusContext {LBus::LBusContextP#(24, 32)} {position {%/Libraries/LBus.bsv 22 58 {Library LBus}}}
Alias LBus::LBusContextIfc {LBus::ILbLeaf#(24, 32)} {position {%/Libraries/LBus.bsv 23 58 {Library LBus}}}
Alias LBus::SA 24 {position {%/Libraries/LBus.bsv 29 24 {Library LBus}}}
Alias LBus::SD 32 {position {%/Libraries/LBus.bsv 30 24 {Library LBus}}}
Interface {LBus::LBSReg#(numeric type sa, numeric type sd)} polymorphic {members {{method {{LBus::LbAddr#(sa, sd)} lbsAddr {} {{(* ports = [] *)}}}} {method {Action lbsSet Bit#(sd) {{(* ports = ["x1"] *)}}}} {method {ActionValue#(Bit#(sd)) lbsGet {} {{(* ports = [] *)}}}}}} {position {%/Libraries/LBus.bsv 38 11 {Library LBus}}}
Interface {LBus::IntFlag#(numeric type sa, numeric type sd)} polymorphic {members {{method {Bit#(1) flag {} {{(* ports = [] *)}}}}}} {position {%/Libraries/LBus.bsv 48 11 {Library LBus}}}
TaggedUnion {LBus::LBSItem#(numeric type sa, numeric type sd)} polymorphic {members {{{LBus::LBSReg#(sa, sd)} Rg} {{LBus::IntFlag#(sa, sd)} Flg}}} {position {%/Libraries/LBus.bsv 55 3 {Library LBus}}}
TaggedUnion {LBus::LbAddr#(numeric type sa, numeric type sd)} polymorphic {members {{Bit#(sa) LbAddr}}} {position {%/Libraries/LBus.bsv 62 3 {Library LBus}}}
Struct {LBus::LBusContextP#(numeric type sa, numeric type sd)} polymorphic {members {{{List#(LBus::LBSItem#(sa, sd))} items} {{List#(LBus::ILbLeaf#(sa, sd))} leaves}}} {position {%/Libraries/LBus.bsv 86 19 {Library LBus}}}
Alias {LBus::LBusContextIfcP#(numeric type sa, numeric type sd)} {LBus::ILbLeaf#(sa, sd)} {position {%/Libraries/LBus.bsv 88 26 {Library LBus}}}
Interface {LBus::IWithLBus#(type busIfc, type deviceIfc)} polymorphic {members {{method {busIfc bus {} {}}} {method {deviceIfc device {} {}}}}} {position {%/Libraries/LBus.bsv 90 11 {Library LBus}}}
Alias {LBus::LBReg#(numeric type sa, numeric type sd, type i)} {LBus::IWithLBus#(LBus::LBSReg#(sa, sd), i)} {position {%/Libraries/LBus.bsv 95 40 {Library LBus}}}
Enum LBus::ResetType {members {SYNC ASYNC NONE}} {width 2} {position {%/Libraries/LBus.bsv 123 36 {Library LBus}}}
Interface {LBus::Accum#(numeric type n)} polymorphic {members {{method {Action add Bit#(n) {{(* ports = ["x1"] *)}}}} {method {Bit#(n) value {} {{(* ports = [] *)}}}}}} {position {%/Libraries/LBus.bsv 349 11 {Library LBus}}}
Interface LBus::Interrupt {members {{method {Action set {} {{(* ports = [] *)}}}} {method {Bool _read {} {{(* ports = [] *)}}}}}} {position {%/Libraries/LBus.bsv 397 11 {Library LBus}}}
Interface {LBus::RegHandler#(type a, type b)} polymorphic {members {{method {a getRequest {} {{(* ports = [] *)}}}} {method {Action storeResponse b {{(* ports = ["x1"] *)}}}}}} {position {%/Libraries/LBus.bsv 485 11 {Library LBus}}}
Enum LBus::LbRWop {members {LbRead LbWrite}} {width 1} {position {%/Libraries/LBus.bsv 565 32 {Library LBus}}}
Interface {LBus::ILBus#(numeric type sa, numeric type sd)} polymorphic {members {{method {Action req {Bool LBus::LbRWop Bit#(sa) Bit#(sd)} {{(* ports = ["valid", "op", "addr", "dat"] *)}}}} {method {Bit#(sd) rdDat {} {{(* ports = [] *)}}}} {method {Bit#(1) ack {} {{(* ports = [] *)}}}} {method {Bit#(1) inrpt {} {{(* ports = [] *)}}}}}} {position {%/Libraries/LBus.bsv 568 11 {Library LBus}}} {attributes {{(* always_enabled  *)} {(* always_ready  *)}}}
Struct {LBus::LbReq#(numeric type sa, numeric type sd)} polymorphic {members {{LBus::LbRWop wr {width 1}} {Bit#(sa) adr} {Bit#(sd) dat}}} {position {%/Libraries/LBus.bsv 579 19 {Library LBus}}}
Interface {LBus::ILbLeaf#(numeric type sa, numeric type sd)} polymorphic {members {{interface {GetPut::Put#(Maybe#(LBus::LbReq#(sa, sd)))} req {}} {interface GetPut::Get#(Maybe#(Bit#(sd))) ack {}} {interface GetPut::Get#(Bit#(1)) inrpt {{(* always_ready  *)}}}}} {position {%/Libraries/LBus.bsv 581 11 {Library LBus}}}
Interface {LBus::ILbNode#(numeric type sa, numeric type sd)} polymorphic {members {{interface {GetPut::Get#(Maybe#(LBus::LbReq#(sa, sd)))} req {}} {interface GetPut::Put#(Maybe#(Bit#(sd))) ack {}} {interface GetPut::Put#(Bit#(1)) inrpt {}}}} {position {%/Libraries/LBus.bsv 588 11 {Library LBus}}}
Interface {LBus::DutWithLBusIfc#(type i)} polymorphic {members {{method {i dutIfc {} {}}} {interface {LBus::ILbLeaf#(24, 32)} lbus {}}}} {position {%/Libraries/LBus.bsv 845 11 {Library LBus}}}
Typeclass {LBus::LBusAddable#(type m1, type m2)} {dependencies {{m1 determines m2} {m2 determines m1}}} {members {{{function m1#(LBus::DutWithLBusIfc#(a)) f(m2#(a) x1)} runWithLBus}}} {instances {{LBus::LBusAddable#(Module, ModuleContextCore::ModuleContext#(LBus::LBusContext))} {LBus::LBusAddable#(ModuleContextCore::ModuleContext#(c1), ModuleContextCore::ModuleContext#(HList::HCons#(LBus::LBusContext, c1)))}}} {position {%/Libraries/LBus.bsv 850 11 {Library LBus}}}
Enum LBus::LbState {members {Idle Req1 Req2 Req3}} {width 2} {position {%/Libraries/LBus.bsv 886 27 {Library LBus}}}
Interface {LBus::Fan#(type intype, type outtype)} polymorphic {members {{method {intype fanin {} {}}} {method {outtype fanout {} {}}}}} {position {%/Libraries/LBus.bsv 888 11 {Library LBus}}}
Interface {LBus::ILBusDriver#(numeric type sa, numeric type sd)} polymorphic {members {{method {Bool valid {} {{(* ports = [] *)}}}} {method {LBus::LbRWop op {} {{(* ports = [] *)}}}} {method {Bit#(sa) addr {} {{(* ports = [] *)}}}} {method {Bit#(sd) dat {} {{(* ports = [] *)}}}} {method {Action rdDat Bit#(sd) {{(* ports = ["x"] *)}}}} {method {Action ack Bit#(1) {{(* ports = ["x"] *)}}}} {method {Action inrpt Bit#(1) {{(* ports = ["x"] *)}}}}}} {position {%/Libraries/LBus.bsv 1034 11 {Library LBus}}}
Interface {LBus::ILBusHandler#(numeric type sa, numeric type sd)} polymorphic {members {{interface {LBus::ILBusDriver#(sa, sd)} driver {}} {interface {ClientServer::Server#(RAM::RAMreq#(Bit#(sa), Bit#(sd)), Bit#(sd))} lbserver {}} {method {Bool interrupting {} {{(* ports = [] *)}}}} {method {Action resetInterrupt {} {{(* ports = [] *)}}}}}} {position {%/Libraries/LBus.bsv 1062 11 {Library LBus}}}
Enum LBus::HandlerState {members {Idle Writing Reading}} {width 2} {position {%/Libraries/LBus.bsv 1070 30 {Library LBus}}}
Alias Wallace::Bit1 Bit#(1) {position {%/Libraries/Wallace.bs 22 5 {Library Wallace}}}
Alias Wallace::BitBag List#(Bit#(1)) {position {%/Libraries/Wallace.bs 23 5 {Library Wallace}}}

Interface {RegTwo::RegTwo#(type a)} polymorphic {members {{method {Action setA a {}}} {method {Action setB a {}}} {method {a get {} {}}}}} {position {%/Libraries/RegTwo.bs 7 10 {Library RegTwo}}}
Interface {RegTwo::VRegTwo#(numeric type n)} polymorphic {members {{method {PrimAction setA Bit#(n) {}}} {method {PrimAction setB Bit#(n) {}}} {method {Bit#(n) get {} {}}}}} {position {%/Libraries/RegTwo.bs 12 10 {Library RegTwo}}}
Alias {ModuleCollect::ModuleCollect#(type a, type b)} {ModuleContextCore::ModuleContext#(HList::HCons#(UnitAppendList::UAList#(a), HList::HNil), b)} {position {%/Libraries/ModuleCollect.bsv 14 45 {Library ModuleCollect}}}
Interface {ModuleCollect::IWithCollection#(type a, type i)} polymorphic {members {{method {i device {} {{(* ports = [] *)}}}} {method {List#(a) collection {} {{(* ports = [] *)}}}}}} {position {%/Libraries/ModuleCollect.bsv 36 11 {Library ModuleCollect}}}
Enum OVLAssertions::OVLSeverityLevel {members {OVL_FATAL OVL_ERROR OVL_WARNING OVL_INFO DEFAULT ILLEGAL}} {width 3} {position {%/Libraries/OVLAssertions.bsv 17 33}}
Enum OVLAssertions::OVLPropertyType {members {OVL_ASSERT OVL_ASSUME OVL_IGNORE DEFAULT ILLEGAL}} {width 3} {position {%/Libraries/OVLAssertions.bsv 22 33}}
Enum OVLAssertions::OVLCoverageLevel {members {OVL_COVER_NONE OVL_COVER_ALL OVL_COVER_SANITY OVL_COVER_BASIC OVL_COVER_CORNER OVL_COVER_STATISTIC DEFAULT ILLEGAL}} {width 32} {position {%/Libraries/OVLAssertions.bsv 30 33}}
Enum OVLAssertions::OVLActionOnNewStart {members {OVL_IGNORE_NEW_START OVL_RESET_ON_NEW_START OVL_ERROR_ON_NEW_START DEFAULT ILLEGAL}} {width 3} {position {%/Libraries/OVLAssertions.bsv 39 33}}
Enum OVLAssertions::OVLEdgeType {members {OVL_NOEDGE OVL_POSEDGE OVL_NEGEDGE OVL_ANYEDGE DEFAULT ILLEGAL}} {width 3} {position {%/Libraries/OVLAssertions.bsv 45 33}}
Enum OVLAssertions::OVLNecessaryCondition {members {OVL_TRIGGER_ON_MOST_PIPE OVL_TRIGGER_ON_FIRST_PIPE OVL_TRIGGER_ON_FIRST_NOPIPE DEFAULT ILLEGAL}} {width 3} {position {%/Libraries/OVLAssertions.bsv 50 33}}
Enum OVLAssertions::OVLInactive {members {OVL_ALL_ZEROS OVL_ALL_ONES OVL_ONE_COLD DEFAULT ILLEGAL}} {width 3} {position {%/Libraries/OVLAssertions.bsv 55 33}}
Struct {OVLAssertions::OVLDefaults#(type a)} polymorphic {members {{OVLAssertions::OVLSeverityLevel severity_level {width 3}} {OVLAssertions::OVLPropertyType property_type {width 3}} {String msg} {OVLAssertions::OVLCoverageLevel coverage_level {width 32}} {OVLAssertions::OVLActionOnNewStart action_on_new_start {width 3}} {OVLAssertions::OVLEdgeType edge_type {width 3}} {OVLAssertions::OVLNecessaryCondition necessary_condition {width 3}} {OVLAssertions::OVLInactive inactive {width 3}} {Int#(32) num_cks {width 32}} {Int#(32) min_cks {width 32}} {Int#(32) max_cks {width 32}} {Int#(32) min_ack_cycle {width 32}} {Int#(32) max_ack_cycle {width 32}} {Int#(32) max_ack_length {width 32}} {Int#(32) req_drop {width 32}} {Int#(32) deassert_count {width 32}} {Int#(32) depth {width 32}} {a value} {a min} {a max} {Bool check_overlapping {width 1}} {Bool check_missing_start {width 1}} {Bool simultaneous_push_pop {width 1}}}} {position {%/Libraries/OVLAssertions.bsv 81 19}}
Struct {OVLAssertions::OVLDefaultsTemplate#(type a)} polymorphic {members {{Maybe#(OVLAssertions::OVLSeverityLevel) severity_level {width 4}} {Maybe#(OVLAssertions::OVLPropertyType) property_type {width 4}} {Maybe#(String) msg} {Maybe#(OVLAssertions::OVLCoverageLevel) coverage_level {width 33}} {Maybe#(OVLAssertions::OVLActionOnNewStart) action_on_new_start {width 4}} {Maybe#(OVLAssertions::OVLEdgeType) edge_type {width 4}} {Maybe#(OVLAssertions::OVLNecessaryCondition) necessary_condition {width 4}} {Maybe#(OVLAssertions::OVLInactive) inactive {width 4}} {Maybe#(Int#(32)) num_cks {width 33}} {Maybe#(Int#(32)) min_cks {width 33}} {Maybe#(Int#(32)) max_cks {width 33}} {Maybe#(Int#(32)) min_ack_cycle {width 33}} {Maybe#(Int#(32)) max_ack_cycle {width 33}} {Maybe#(Int#(32)) max_ack_length {width 33}} {Maybe#(Int#(32)) req_drop {width 33}} {Maybe#(Int#(32)) deassert_count {width 33}} {Maybe#(Int#(32)) depth {width 33}} {Maybe#(a) value} {Maybe#(a) min} {Maybe#(a) max} {Maybe#(Bool) check_overlapping {width 2}} {Maybe#(Bool) check_missing_start {width 2}} {Maybe#(Bool) simultaneous_push_pop {width 2}}}} {position {%/Libraries/OVLAssertions.bsv 107 19}}
Interface {OVLAssertions::AssertTest_IFC#(type a)} polymorphic {members {{method {Action test a {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 648 11}}
Interface {OVLAssertions::VAssertTest_IFC#(numeric type n)} polymorphic {members {{method {Action test Bit#(n) {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 654 11}}
Interface {OVLAssertions::AssertSampleTest_IFC#(type a)} polymorphic {members {{method {Action sample Bool {{(* ports = ["value"] *)}}}} {method {Action test a {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 660 11}}
Interface {OVLAssertions::VAssertSampleTest_IFC#(numeric type n)} polymorphic {members {{method {Action sample Bit#(1) {{(* ports = ["value"] *)}}}} {method {Action test Bit#(n) {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 667 11}}
Interface {OVLAssertions::AssertStartTest_IFC#(type a)} polymorphic {members {{method {Action start Bool {{(* ports = ["value"] *)}}}} {method {Action test a {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 674 11}}
Interface {OVLAssertions::VAssertStartTest_IFC#(numeric type n)} polymorphic {members {{method {Action start Bit#(1) {{(* ports = ["value"] *)}}}} {method {Action test Bit#(n) {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 681 11}}
Interface {OVLAssertions::AssertStartStopTest_IFC#(type a)} polymorphic {members {{method {Action start Bool {{(* ports = ["value"] *)}}}} {method {Action stop Bool {{(* ports = ["value"] *)}}}} {method {Action test a {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 688 11}}
Interface {OVLAssertions::VAssertStartStopTest_IFC#(numeric type n)} polymorphic {members {{method {Action start Bit#(1) {{(* ports = ["value"] *)}}}} {method {Action stop Bit#(1) {{(* ports = ["value"] *)}}}} {method {Action test Bit#(n) {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 696 11}}
Interface {OVLAssertions::AssertTransitionTest_IFC#(type a)} polymorphic {members {{method {Action test a {{(* ports = ["value"] *)}}}} {method {Action start a {{(* ports = ["value"] *)}}}} {method {Action next a {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 2491 11}}
Interface {OVLAssertions::VAssertTransitionTest_IFC#(numeric type n)} polymorphic {members {{method {Action test Bit#(n) {{(* ports = ["value"] *)}}}} {method {Action start Bit#(n) {{(* ports = ["value"] *)}}}} {method {Action next Bit#(n) {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 2497 11}}
Interface {OVLAssertions::AssertQuiescentTest_IFC#(type a)} polymorphic {members {{method {Action sample Bool {{(* ports = ["value"] *)}}}} {method {Action state a {{(* ports = ["value"] *)}}}} {method {Action check a {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 2640 11}}
Interface {OVLAssertions::VAssertQuiescentTest_IFC#(numeric type n)} polymorphic {members {{method {Action sample Bit#(1) {{(* ports = ["value"] *)}}}} {method {Action state Bit#(n) {{(* ports = ["value"] *)}}}} {method {Action check Bit#(n) {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 2646 11}}
Interface {OVLAssertions::AssertFifoTest_IFC#(type a, type b)} polymorphic {members {{method {Action push a {{(* ports = ["value"] *)}}}} {method {Action pop b {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 2782 11}}
Interface {OVLAssertions::VAssertFifoTest_IFC#(numeric type n, numeric type m)} polymorphic {members {{method {Action push Bit#(n) {{(* ports = ["value"] *)}}}} {method {Action pop Bit#(m) {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/OVLAssertions.bsv 2787 11}}


Struct {Gray::Gray#(numeric type n)} polymorphic {members {{Bit#(n) code}}} {position {%/Libraries/Gray.bsv 15 19 {Library Gray}}}
TaggedUnion {UnitAppendList::UAList#(type a)} polymorphic {members {{void NoItems {width 0}} {a One} {{Tuple2#(UnitAppendList::UAList#(a), UnitAppendList::UAList#(a))} Append}}} {position {%/Libraries/UnitAppendList.bsv 7 3 {Library UnitAppendList}}}

Interface {BypassReg::WReg#(type a)} polymorphic {members {{method {Action bypass a {{(* ports = ["x"] *)}}}} {method {a _read {} {{(* ports = [] *)}}}} {method {Action _write a {{(* ports = ["x"] *)}}}}}} {position {%/Libraries/BypassReg.bsv 12 11 {Library BypassReg}}}
Interface {UniqueWrappers::Wrapper#(type a, type b)} polymorphic {members {{method {ActionValue#(b) func a {{(* ports = ["x"] *)}}}}}} {position {%/Libraries/UniqueWrappers.bsv 40 11 {Library UniqueWrappers}}}
Interface {UniqueWrappers::Wrapper2#(type a1, type a2, type b)} polymorphic {members {{method {ActionValue#(b) func {a1 a2} {{(* ports = ["x", "y"] *)}}}}}} {position {%/Libraries/UniqueWrappers.bsv 73 11 {Library UniqueWrappers}}}
Interface {UniqueWrappers::Wrapper3#(type a1, type a2, type a3, type b)} polymorphic {members {{method {ActionValue#(b) func {a1 a2 a3} {{(* ports = ["x", "y", "z"] *)}}}}}} {position {%/Libraries/UniqueWrappers.bsv 92 11 {Library UniqueWrappers}}}
Interface {FIFOLevel::FIFOLevelIfc#(type a_type, numeric type fifoDepth)} polymorphic {members {{method {Action enq a_type {{(* ports = ["x1"] *)}}}} {method {Action deq {} {{(* ports = [] *)}}}} {method {a_type first {} {{(* ports = [] *)}}}} {method {Action clear {} {{(* ports = [] *)}}}} {method {Bool notFull {} {{(* ports = [] *)}}}} {method {Bool notEmpty {} {{(* ports = [] *)}}}} {method {Bool isLessThan Integer {{(* ports = ["c1"] *)}}}} {method {Bool isGreaterThan Integer {{(* ports = ["c1"] *)}}}}}} {position {%/Libraries/FIFOLevel.bsv 42 11 {Library FIFOLevel}}}
Interface {FIFOLevel::SyncFIFOLevelIfc#(type a_type, numeric type fifoDepth)} polymorphic {members {{method {Action enq a_type {{(* ports = ["sendData"] *)}}}} {method {Action deq {} {{(* ports = [] *)}}}} {method {a_type first {} {{(* ports = [] *)}}}} {method {Bool sNotFull {} {{(* ports = [] *)}}}} {method {Bool sNotEmpty {} {{(* ports = [] *)}}}} {method {Bool dNotFull {} {{(* ports = [] *)}}}} {method {Bool dNotEmpty {} {{(* ports = [] *)}}}} {method {Bool sIsLessThan Integer {{(* ports = ["c1"] *)}}}} {method {Bool sIsGreaterThan Integer {{(* ports = ["c1"] *)}}}} {method {Bool dIsLessThan Integer {{(* ports = ["c1"] *)}}}} {method {Bool dIsGreaterThan Integer {{(* ports = ["c1"] *)}}}} {method {Action sClear {} {{(* ports = [] *)}}}} {method {Action dClear {} {{(* ports = [] *)}}}}}} {position {%/Libraries/FIFOLevel.bsv 220 11 {Library FIFOLevel}}}
Interface {FIFOLevel::FIFOCountIfc#(type a_type, numeric type fifoDepth)} polymorphic {members {{method {Action enq a_type {{(* ports = ["sendData"] *)}}}} {method {Action deq {} {{(* ports = [] *)}}}} {method {a_type first {} {{(* ports = [] *)}}}} {method {Bool notFull {} {{(* ports = [] *)}}}} {method {Bool notEmpty {} {{(* ports = [] *)}}}} {method {{UInt#(TLog#(TAdd#(fifoDepth, 1)))} count {} {{(* ports = [] *)}}}} {method {Action clear {} {{(* ports = [] *)}}}}}} {position {%/Libraries/FIFOLevel.bsv 557 11 {Library FIFOLevel}}}
Interface {FIFOLevel::SyncFIFOCountIfc#(type a_type, numeric type fifoDepth)} polymorphic {members {{method {Action enq a_type {{(* ports = ["sendData"] *)}}}} {method {Action deq {} {{(* ports = [] *)}}}} {method {a_type first {} {{(* ports = [] *)}}}} {method {Bool sNotFull {} {{(* ports = [] *)}}}} {method {Bool sNotEmpty {} {{(* ports = [] *)}}}} {method {Bool dNotFull {} {{(* ports = [] *)}}}} {method {Bool dNotEmpty {} {{(* ports = [] *)}}}} {method {{UInt#(TLog#(TAdd#(fifoDepth, 1)))} sCount {} {{(* ports = [] *)}}}} {method {{UInt#(TLog#(TAdd#(fifoDepth, 1)))} dCount {} {{(* ports = [] *)}}}} {method {Action sClear {} {{(* ports = [] *)}}}} {method {Action dClear {} {{(* ports = [] *)}}}}}} {position {%/Libraries/FIFOLevel.bsv 701 11 {Library FIFOLevel}}}
Struct {BRAM_Compat::BRAMRequest#(type addr, type data)} polymorphic {members {{Bool write {width 1}} {addr address} {data datain}}} {position {%/Libraries/BRAM_Compat.bsv 23 19 {Library BRAM_Compat}}}
Struct {BRAM_Compat::BRAMRequestBE#(type addr, type data, numeric type n)} polymorphic {members {{Bit#(n) writeen} {addr address} {data datain}}} {position {%/Libraries/BRAM_Compat.bsv 29 19 {Library BRAM_Compat}}}
Alias {BRAM_Compat::BRAMServer#(type addr, type data)} {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} {position {%/Libraries/BRAM_Compat.bsv 31 49 {Library BRAM_Compat}}}
Alias {BRAM_Compat::BRAMClient#(type addr, type data)} {ClientServer::Client#(BRAM_Compat::BRAMRequest#(addr, data), data)} {position {%/Libraries/BRAM_Compat.bsv 32 49 {Library BRAM_Compat}}}
Alias {BRAM_Compat::BRAMServerBE#(type addr, type data, numeric type n)} {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} {position {%/Libraries/BRAM_Compat.bsv 34 54 {Library BRAM_Compat}}}
Alias {BRAM_Compat::BRAMClientBE#(type addr, type data, numeric type n)} {ClientServer::Client#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} {position {%/Libraries/BRAM_Compat.bsv 35 54 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM_PORT#(type addr, type data)} polymorphic {members {{method {Action put {Bool addr data} {{(* ports = ["write", "address", "datain"] *)}}}} {method {data read {} {{(* ports = [] *)}}}}}} {position {%/Libraries/BRAM_Compat.bsv 46 11 {Library BRAM_Compat}}} {attributes {{(* always_ready  *)}}}
Interface {MemBRAM::BRAM#(numeric type aw, numeric type dw)} polymorphic {members {{method {Action put {{Bit#(TDiv#(dw, 8))} Bit#(aw) Bit#(dw)} {{(* ports = ["we", "addr", "d"] *)}}}} {method {Bit#(dw) peek {} {{(* ports = [] *)}}}}}} {position {../libs/BlueStuff/BlueUtils/MemBRAM.bsv 46 11}}
Interface {BRAM_Compat::BRAM_DUAL_PORT#(type addr, type data)} polymorphic {members {{interface {BRAM_Compat::BRAM_PORT#(addr, data)} a {}} {interface {BRAM_Compat::BRAM_PORT#(addr, data)} b {}}}} {position {%/Libraries/BRAM_Compat.bsv 56 11 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM2Port#(type addr, type data)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} portA {}} {interface {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} portB {}}}} {position {%/Libraries/BRAM_Compat.bsv 61 11 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM1Port#(type addr, type data)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} portA {}}}} {position {%/Libraries/BRAM_Compat.bsv 66 11 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM_PORT_BE#(type addr, type data, numeric type n)} polymorphic {members {{method {Action put {Bit#(n) addr data} {{(* ports = ["writeen", "address", "datain"] *)}}}} {method {data read {} {{(* ports = [] *)}}}}}} {position {%/Libraries/BRAM_Compat.bsv 74 11 {Library BRAM_Compat}}} {attributes {{(* always_ready  *)}}}
Interface {BRAM_Compat::BRAM_DUAL_PORT_BE#(type addr, type data, numeric type n)} polymorphic {members {{interface {BRAM_Compat::BRAM_PORT_BE#(addr, data, n)} a {}} {interface {BRAM_Compat::BRAM_PORT_BE#(addr, data, n)} b {}}}} {position {%/Libraries/BRAM_Compat.bsv 79 11 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM_BE#(type addr, type data, numeric type n)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} portA {}} {interface {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} portB {}}}} {position {%/Libraries/BRAM_Compat.bsv 84 11 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM2PortBE#(type addr, type data, numeric type n)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} portA {}} {interface {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} portB {}}}} {position {%/Libraries/BRAM_Compat.bsv 89 11 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM1PortBE#(type addr, type data, numeric type n)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} portA {}}}} {position {%/Libraries/BRAM_Compat.bsv 94 11 {Library BRAM_Compat}}}
Enum SVA::SeqRes {members {SeqFail SeqPending SeqHold SeqHoldStrong}} {width 2} {position {%/Libraries/SVA.bsv 79 48 {Library SVA}}}
Interface SVA::Sequence {members {{method {Bool running {} {{(* ports = [] *)}}}} {method {ActionValue#(SVA::SeqRes) advance {} {{(* ports = [] *)}}}}}} {position {%/Libraries/SVA.bsv 81 11 {Library SVA}}}
Interface SVA::Wrap1 {members {{method {SVA::SeqRes f Bool {{(* ports = ["b"] *)}}}}}} {position {%/Libraries/SVA.bsv 108 11 {Library SVA}}} {attributes {{(* always_ready  *)}}}
Interface SVA::Wrap2 {members {{method {{Tuple3#(Bool, Bool, SVA::SeqRes)} f SVA::SeqRes {{(* ports = ["r"] *)}}}}}} {position {%/Libraries/SVA.bsv 156 11 {Library SVA}}} {attributes {{(* always_ready  *)}}}
Interface SVA::Wrap3 {members {{method {Bool f SVA::SeqRes {{(* ports = ["r"] *)}}}}}} {position {%/Libraries/SVA.bsv 304 11 {Library SVA}}} {attributes {{(* always_ready  *)}}}
Interface SVA::Wrap4 {members {{method {SVA::SeqRes f {Bool Bool SVA::SeqRes SVA::SeqRes} {{(* ports = ["run_1", "run_2", "res_l", "res_r"] *)}}}}}} {position {%/Libraries/SVA.bsv 339 11 {Library SVA}}} {attributes {{(* always_ready  *)}}}
Interface SVA::Wrap5 {members {{method {SVA::SeqRes f {SVA::SeqRes SVA::SeqRes} {{(* ports = ["res_l", "res_r"] *)}}}}}} {position {%/Libraries/SVA.bsv 414 11 {Library SVA}}} {attributes {{(* always_ready  *)}}}
Interface SVA::Wrap6 {members {{method {{Tuple2#(Bool, SVA::SeqRes)} f SVA::SeqRes {{(* ports = ["r"] *)}}}}}} {position {%/Libraries/SVA.bsv 486 11 {Library SVA}}} {attributes {{(* always_ready  *)}}}
Interface SVA::Wrap7 {members {{method {{Tuple3#(Bool, Maybe#(SVA::SeqRes), SVA::SeqRes)} f {SVA::SeqRes SVA::SeqRes} {{(* ports = ["r", "ff"] *)}}}}}} {position {%/Libraries/SVA.bsv 545 11 {Library SVA}}} {attributes {{(* always_ready  *)}}}
Enum SVA::PropRes {members {PropTrue PropUndetermined PropFalse PropVacuous}} {width 2} {position {%/Libraries/SVA.bsv 735 55 {Library SVA}}}
Interface SVA::Property {members {{method {ActionValue#(SVA::PropRes) advance {} {{(* ports = [] *)}}}}}} {position {%/Libraries/SVA.bsv 737 11 {Library SVA}}}
Enum SVA::AssertRes {members {AssertOkay AssertFail}} {width 1} {position {%/Libraries/SVA.bsv 904 28 {Library SVA}}}
Interface SVA::Assertion {members {{method {ActionValue#(SVA::AssertRes) advance {} {{(* ports = [] *)}}}}}} {position {%/Libraries/SVA.bsv 906 11 {Library SVA}}}
Typeclass {CShow::CShow#(type a)} {members {{{function Fmt f(a x1)} cshow} {{function Fmt f(a x1)} cshowP}}} {instances {CShow::CShow#(Bit#(n)) CShow::CShow#(Char) CShow::CShow#(Fmt) CShow::CShow#(Int#(a)) CShow::CShow#(Real) CShow::CShow#(String) {CShow::CShow#(Tuple2#(a, b))   provisos (CShow::CShowTuple#(b), CShow::CShow#(a))} CShow::CShow#(UInt#(a)) {CShow::CShow#(a)   provisos (CShow::CShow'#(r), Generic#(a, r))} CShow::CShow#(void)}} {position {%/Libraries/CShow.bs 12 6 {Library CShow}}}
Typeclass {CShow::CShowTuple#(type a)} {members {{{function Fmt f(a x1)} cshowTuple}}} {instances {{CShow::CShowTuple#(Tuple2#(a, b))   provisos (CShow::CShowTuple#(b), CShow::CShow#(a))} {CShow::CShowTuple#(a)   provisos (CShow::CShow#(a))}}} {position {%/Libraries/CShow.bs 49 6 {Library CShow}}}

Typeclass {CShow::CShowSummand#(type a)} {members {{{function Fmt f(a x1)} cshowSummandNamed} {{function Fmt f(a x1)} cshowSummandAnon}}} {instances {{CShow::CShowSummand#(Meta#(MetaField#(name, idx), a))   provisos (CShow::CShow'#(a))} {CShow::CShowSummand#(Tuple2#(a, b))   provisos (CShow::CShowSummand#(b), CShow::CShowSummand#(a))} CShow::CShowSummand#(void)}} {position {%/Libraries/CShow.bs 101 6 {Library CShow}}}
Typeclass {IVec::IVec#(numeric type n, type t)} {dependencies {{t determines n} {n determines t}}} {members {{{function t#(a) f(Vector::Vector#(n, a) x1)} toIVec} {{function Vector::Vector#(n, a) f(t#(a) x1)} fromIVec}}} {instances {{IVec::IVec#(0, IVec::IVec0)} {IVec::IVec#(1, IVec::IVec1)} {IVec::IVec#(10, IVec::IVec10)} {IVec::IVec#(11, IVec::IVec11)} {IVec::IVec#(12, IVec::IVec12)} {IVec::IVec#(13, IVec::IVec13)} {IVec::IVec#(14, IVec::IVec14)} {IVec::IVec#(15, IVec::IVec15)} {IVec::IVec#(16, IVec::IVec16)} {IVec::IVec#(2, IVec::IVec2)} {IVec::IVec#(3, IVec::IVec3)} {IVec::IVec#(32, IVec::IVec32)} {IVec::IVec#(33, IVec::IVec33)} {IVec::IVec#(4, IVec::IVec4)} {IVec::IVec#(5, IVec::IVec5)} {IVec::IVec#(6, IVec::IVec6)} {IVec::IVec#(7, IVec::IVec7)} {IVec::IVec#(8, IVec::IVec8)} {IVec::IVec#(9, IVec::IVec9)}}} {position {%/Libraries/IVec.bs 28 6 {Library IVec}}}
Interface {IVec::IVec0#(type a)} polymorphic {members {}} {position {%/Libraries/IVec.bs 33 10 {Library IVec}}}
Interface {IVec::IVec1#(type a)} polymorphic {members {{method {a _m00 {} {}}}}} {position {%/Libraries/IVec.bs 45 10 {Library IVec}}}
Interface {IVec::IVec2#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}}}} {position {%/Libraries/IVec.bs 60 10 {Library IVec}}}
Interface {IVec::IVec3#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}}}} {position {%/Libraries/IVec.bs 78 10 {Library IVec}}}
Interface {IVec::IVec4#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}}}} {position {%/Libraries/IVec.bs 99 10 {Library IVec}}}
Interface {IVec::IVec5#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}}}} {position {%/Libraries/IVec.bs 123 10 {Library IVec}}}
Interface {IVec::IVec6#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}}}} {position {%/Libraries/IVec.bs 150 10 {Library IVec}}}
Interface {IVec::IVec7#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}} {method {a _m06 {} {}}}}} {position {%/Libraries/IVec.bs 180 10 {Library IVec}}}
Interface {IVec::IVec8#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}} {method {a _m06 {} {}}} {method {a _m07 {} {}}}}} {position {%/Libraries/IVec.bs 213 10 {Library IVec}}}
Interface {IVec::IVec9#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}} {method {a _m06 {} {}}} {method {a _m07 {} {}}} {method {a _m08 {} {}}}}} {position {%/Libraries/IVec.bs 249 10 {Library IVec}}}
Interface {IVec::IVec10#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}} {method {a _m06 {} {}}} {method {a _m07 {} {}}} {method {a _m08 {} {}}} {method {a _m09 {} {}}}}} {position {%/Libraries/IVec.bs 288 10 {Library IVec}}}
Interface {IVec::IVec11#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}} {method {a _m06 {} {}}} {method {a _m07 {} {}}} {method {a _m08 {} {}}} {method {a _m09 {} {}}} {method {a _m10 {} {}}}}} {position {%/Libraries/IVec.bs 330 10 {Library IVec}}}
Interface {IVec::IVec12#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}} {method {a _m06 {} {}}} {method {a _m07 {} {}}} {method {a _m08 {} {}}} {method {a _m09 {} {}}} {method {a _m10 {} {}}} {method {a _m11 {} {}}}}} {position {%/Libraries/IVec.bs 375 10 {Library IVec}}}
Interface {IVec::IVec13#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}} {method {a _m06 {} {}}} {method {a _m07 {} {}}} {method {a _m08 {} {}}} {method {a _m09 {} {}}} {method {a _m10 {} {}}} {method {a _m11 {} {}}} {method {a _m12 {} {}}}}} {position {%/Libraries/IVec.bs 423 10 {Library IVec}}}
Interface {IVec::IVec14#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}} {method {a _m06 {} {}}} {method {a _m07 {} {}}} {method {a _m08 {} {}}} {method {a _m09 {} {}}} {method {a _m10 {} {}}} {method {a _m11 {} {}}} {method {a _m12 {} {}}} {method {a _m13 {} {}}}}} {position {%/Libraries/IVec.bs 474 10 {Library IVec}}}
Interface {IVec::IVec15#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}} {method {a _m06 {} {}}} {method {a _m07 {} {}}} {method {a _m08 {} {}}} {method {a _m09 {} {}}} {method {a _m10 {} {}}} {method {a _m11 {} {}}} {method {a _m12 {} {}}} {method {a _m13 {} {}}} {method {a _m14 {} {}}}}} {position {%/Libraries/IVec.bs 528 10 {Library IVec}}}
Interface {IVec::IVec16#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}} {method {a _m06 {} {}}} {method {a _m07 {} {}}} {method {a _m08 {} {}}} {method {a _m09 {} {}}} {method {a _m10 {} {}}} {method {a _m11 {} {}}} {method {a _m12 {} {}}} {method {a _m13 {} {}}} {method {a _m14 {} {}}} {method {a _m15 {} {}}}}} {position {%/Libraries/IVec.bs 585 10 {Library IVec}}}
Interface {IVec::IVec32#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}} {method {a _m06 {} {}}} {method {a _m07 {} {}}} {method {a _m08 {} {}}} {method {a _m09 {} {}}} {method {a _m10 {} {}}} {method {a _m11 {} {}}} {method {a _m12 {} {}}} {method {a _m13 {} {}}} {method {a _m14 {} {}}} {method {a _m15 {} {}}} {method {a _m16 {} {}}} {method {a _m17 {} {}}} {method {a _m18 {} {}}} {method {a _m19 {} {}}} {method {a _m20 {} {}}} {method {a _m21 {} {}}} {method {a _m22 {} {}}} {method {a _m23 {} {}}} {method {a _m24 {} {}}} {method {a _m25 {} {}}} {method {a _m26 {} {}}} {method {a _m27 {} {}}} {method {a _m28 {} {}}} {method {a _m29 {} {}}} {method {a _m30 {} {}}} {method {a _m31 {} {}}}}} {position {%/Libraries/IVec.bs 645 10 {Library IVec}}}
Interface {IVec::IVec33#(type a)} polymorphic {members {{method {a _m00 {} {}}} {method {a _m01 {} {}}} {method {a _m02 {} {}}} {method {a _m03 {} {}}} {method {a _m04 {} {}}} {method {a _m05 {} {}}} {method {a _m06 {} {}}} {method {a _m07 {} {}}} {method {a _m08 {} {}}} {method {a _m09 {} {}}} {method {a _m10 {} {}}} {method {a _m11 {} {}}} {method {a _m12 {} {}}} {method {a _m13 {} {}}} {method {a _m14 {} {}}} {method {a _m15 {} {}}} {method {a _m16 {} {}}} {method {a _m17 {} {}}} {method {a _m18 {} {}}} {method {a _m19 {} {}}} {method {a _m20 {} {}}} {method {a _m21 {} {}}} {method {a _m22 {} {}}} {method {a _m23 {} {}}} {method {a _m24 {} {}}} {method {a _m25 {} {}}} {method {a _m26 {} {}}} {method {a _m27 {} {}}} {method {a _m28 {} {}}} {method {a _m29 {} {}}} {method {a _m30 {} {}}} {method {a _m31 {} {}}} {method {a _m32 {} {}}}}} {position {%/Libraries/IVec.bs 754 10 {Library IVec}}}
Interface {Randomizable::Randomize#(type a)} polymorphic {members {{interface Randomizable::Control cntrl {}} {method {ActionValue#(a) next {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Randomizable.bsv 13 11 {Library Randomizable}}}
Interface {Randomizable::VRandomize#(numeric type n)} polymorphic {members {{method {ActionValue#(Bit#(n)) next {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Randomizable.bsv 18 11 {Library Randomizable}}}
Enum CPU_Globals::Control {members {CONTROL_DISCARD CONTROL_STRAIGHT CONTROL_BRANCH CONTROL_CSRR_W CONTROL_CAPBRANCH CONTROL_SCR_W CONTROL_CSRR_S_or_C CONTROL_FENCE CONTROL_FENCE_I CONTROL_SFENCE_VMA CONTROL_MRET CONTROL_SRET CONTROL_URET CONTROL_WFI CONTROL_TRAP}} {width 4} {position {../src_Core/CPU/CPU_Globals.bsv 443 6}}
Typeclass {Randomizable::Randomizable#(type t)} {members {{{a#(Randomizable::Randomize#(t))   provisos (IsModule#(a, b))} mkRandomizer}}} {position {%/Libraries/Randomizable.bsv 180 11 {Library Randomizable}}}
Interface {GrayCounter::GrayCounter#(numeric type n)} polymorphic {members {{method {Action incr {} {{(* ports = [] *)}}}} {method {Action decr {} {{(* ports = [] *)}}}} {method {Action sWriteBin Bit#(n) {{(* ports = ["value"] *)}}}} {method {Bit#(n) sReadBin {} {{(* ports = [] *)}}}} {method {Action sWriteGray Gray::Gray#(n) {{(* ports = ["value"] *)}}}} {method {Gray::Gray#(n) sReadGray {} {{(* ports = [] *)}}}} {method {Bit#(n) dReadBin {} {{(* ports = [] *)}}}} {method {Gray::Gray#(n) dReadGray {} {{(* ports = [] *)}}}}}} {position {%/Libraries/GrayCounter.bsv 20 11 {Library GrayCounter}}}
TaggedUnion {UIntRange::UIntRange#(numeric type lo, numeric type hi)} polymorphic {members {{{Bit#(TLog#(TAdd#(hi, 1)))} U}}} {position {%/Libraries/UIntRange.bs 24 6 {Library UIntRange}}}
Struct {NumberTypes::WrapNumber#(numeric type sz)} polymorphic {members {{UInt#(sz) n}}} {position {%/Libraries/NumberTypes.bsv 12 33 {Library NumberTypes}}}
Struct {NumberTypes::BuffIndex#(numeric type sz, numeric type ln)} polymorphic {members {{UInt#(sz) bix}}} {position {%/Libraries/NumberTypes.bsv 47 35 {Library NumberTypes}}}
Interface {TriState::TriState#(type t)} polymorphic {members {{interface Inout#(t) io {}} {method {t _read {} {{(* ports = [] *)}}}}}} {position {%/Libraries/TriState.bsv 16 11 {Library TriState}}} {attributes {{(* always_enabled  *)} {(* always_ready  *)}}}
Interface {RPush::RPush#(type a)} polymorphic {members {{method {Action push a {}}} {method {Action clear {} {}}}}} {position {%/Libraries/RPush.bs 29 10 {Library RPush}}}
Struct HList::HNil {members {}} {position {%/Libraries/HList.bsv 3 19 {Library HList}}}
Struct {HList::HCons#(type e, type l)} polymorphic {members {{e hd} {l tl}}} {position {%/Libraries/HList.bsv 9 19 {Library HList}}}
Typeclass {HList::HList#(type l)} {members {}} {instances {{HList::HList#(HList::HCons#(e, l))   provisos (HList::HList#(l))} HList::HList#(HList::HNil)}} {position {%/Libraries/HList.bsv 13 11 {Library HList}}}
Typeclass {HList::HHead#(type l, type h)} {dependencies {{l determines h}}} {members {{{function h f(l x1)} hHead}}} {instances {{HList::HHead#(HList::HCons#(e, l), e)}}} {position {%/Libraries/HList.bsv 23 11 {Library HList}}}
Typeclass {HList::HTail#(type l, type lt)} {dependencies {{l determines lt}}} {members {{{function lt f(l x1)} hTail}}} {instances {{HList::HTail#(HList::HCons#(e, l), l)}}} {position {%/Libraries/HList.bsv 32 11 {Library HList}}}
Typeclass {HList::HLength#(type l, numeric type n)} {dependencies {{l determines n}}} {members {}} {instances {{HList::HLength#(HList::HCons#(e, l), nPlus1)   provisos (Add#(n, 1, nPlus1), HList::HLength#(l, n))} {HList::HLength#(HList::HNil, 0)}}} {position {%/Libraries/HList.bsv 41 11 {Library HList}}}
Typeclass {HList::HAppend#(type l, type l1, type l2)} {dependencies {{(l, l1) determines l2}}} {members {{{function l2 f(l x1, l1 x2)} hAppend}}} {instances {{HList::HAppend#(HList::HCons#(e, l), l1, HList::HCons#(e, l2))   provisos (HList::HAppend#(l, l1, l2), HList::HList#(l))} {HList::HAppend#(HList::HNil, l, l)}}} {position {%/Libraries/HList.bsv 61 11 {Library HList}}}
Typeclass {HList::HSplit#(type l, type l1, type l2)} {members {{{function Tuple2#(l1, l2) f(l x1)} hSplit}}} {instances {{HList::HSplit#(HList::HCons#(hd, tl), HList::HCons#(hd, l3), l2)   provisos (HList::HSplit#(tl, l3, l2))} {HList::HSplit#(HList::HNil, HList::HNil, HList::HNil)} {HList::HSplit#(l, HList::HNil, l)}}} {position {%/Libraries/HList.bsv 80 11 {Library HList}}}
Typeclass {HList::Gettable#(type c1, type c2)} {members {{{function c2 f(c1 x1)} getIt} {{function c1 f(c1 x1, c2 x2)} putIt}}} {instances {{HList::Gettable#(HList::HCons#(t1, t2), t1)} {HList::Gettable#(HList::HCons#(t1, t2), t3)   provisos (HList::Gettable#(t2, t3))}}} {position {%/Libraries/HList.bsv 106 11 {Library HList}}}
Alias {HList::HList1#(type t)} {HList::HCons#(t, HList::HNil)} {position {%/Libraries/HList.bsv 127 62 {Library HList}}}
Alias {HList::HList2#(type t1, type t2)} {HList::HCons#(t1, HList::HCons#(t2, HList::HNil))} {position {%/Libraries/HList.bsv 128 62 {Library HList}}}
Alias {HList::HList3#(type t1, type t2, type t3)} {HList::HCons#(t1, HList::HCons#(t2, HList::HCons#(t3, HList::HNil)))} {position {%/Libraries/HList.bsv 129 62 {Library HList}}}
Alias {HList::HList4#(type t1, type t2, type t3, type t4)} {HList::HCons#(t1, HList::HCons#(t2, HList::HCons#(t3, HList::HCons#(t4, HList::HNil))))} {position {%/Libraries/HList.bsv 130 62 {Library HList}}}
Alias {HList::HList5#(type t1, type t2, type t3, type t4, type t5)} {HList::HCons#(t1, HList::HCons#(t2, HList::HCons#(t3, HList::HCons#(t4, HList::HCons#(t5, HList::HNil)))))} {position {%/Libraries/HList.bsv 134 15 {Library HList}}}
Alias {HList::HList6#(type t1, type t2, type t3, type t4, type t5, type t6)} {HList::HCons#(t1, HList::HCons#(t2, HList::HCons#(t3, HList::HCons#(t4, HList::HCons#(t5, HList::HCons#(t6, HList::HNil))))))} {position {%/Libraries/HList.bsv 138 15 {Library HList}}}
Alias {HList::HList7#(type t1, type t2, type t3, type t4, type t5, type t6, type t7)} {HList::HCons#(t1, HList::HCons#(t2, HList::HCons#(t3, HList::HCons#(t4, HList::HCons#(t5, HList::HCons#(t6, HList::HCons#(t7, HList::HNil)))))))} {position {%/Libraries/HList.bsv 142 15 {Library HList}}}
Alias {HList::HList8#(type t1, type t2, type t3, type t4, type t5, type t6, type t7, type t8)} {HList::HCons#(t1, HList::HCons#(t2, HList::HCons#(t3, HList::HCons#(t4, HList::HCons#(t5, HList::HCons#(t6, HList::HCons#(t7, HList::HCons#(t8, HList::HNil))))))))} {position {%/Libraries/HList.bsv 146 15 {Library HList}}}
Alias {MIMO::LUInt#(numeric type n)} {UInt#(TLog#(TAdd#(n, 1)))} {position {%/Libraries/MIMO.bsv 35 39 {Library MIMO}}}
Struct MIMO::MIMOConfiguration {members {{Bool unguarded {width 1}} {Bool bram_based {width 1}}}} {position {%/Libraries/MIMO.bsv 40 3 {Library MIMO}}}
Interface {MIMO::MIMO#(numeric type max_in, numeric type max_out, numeric type size, type t)} polymorphic {members {{method {Action enq {{UInt#(TLog#(TAdd#(max_in, 1)))} {Vector::Vector#(max_in, t)}} {{(* ports = ["count", "data"] *)}}}} {method {{Vector::Vector#(max_out, t)} first {} {{(* ports = [] *)}}}} {method {Action deq {{UInt#(TLog#(TAdd#(max_out, 1)))}} {{(* ports = ["count"] *)}}}} {method {Bool enqReady {} {{(* ports = [] *)} {(* always_ready  *)}}}} {method {Bool enqReadyN {{UInt#(TLog#(TAdd#(max_in, 1)))}} {{(* ports = ["count"] *)} {(* always_ready  *)}}}} {method {Bool deqReady {} {{(* ports = [] *)} {(* always_ready  *)}}}} {method {Bool deqReadyN {{UInt#(TLog#(TAdd#(max_out, 1)))}} {{(* ports = ["count"] *)} {(* always_ready  *)}}}} {method {{UInt#(TLog#(TAdd#(size, 1)))} count {} {{(* ports = [] *)} {(* always_ready  *)}}}} {method {Action clear {} {{(* ports = [] *)}}}}}} {position {%/Libraries/MIMO.bsv 52 11 {Library MIMO}}}

Interface {CompletionBuffer::CompletionBuffer#(numeric type n, type a)} polymorphic {members {{interface GetPut::Get#(Bit#(TLog#(n))) reserve {}} {interface {GetPut::Put#(Tuple2#(Bit#(TLog#(n)), a))} complete {}} {interface GetPut::Get#(a) drain {}}}} {position {%/Libraries/CompletionBuffer.bsv 24 11 {Library CompletionBuffer}}}
Alias {CompletionBuffer::CBToken#(numeric type n)} Bit#(TLog#(n)) {position {%/Libraries/CompletionBuffer.bsv 34 24 {Library CompletionBuffer}}}
Interface {NullCrossingFIFOF::CrossingFIFOF#(type a)} polymorphic {members {{interface FIFOF::FIFOF#(a) fifo {}} {method {Bool allowCclock {} {{(* ports = [] *)} {(* always_ready  *)}}}}}} {position {%/Libraries/NullCrossingFIFOF.bsv 7 11 {Library NullCrossingFIFOF}}}
Interface {NullCrossingFIFOF::SceMiCrossingReg#(type a)} polymorphic {members {{interface Reg#(a) regifc {}} {method {Bool writtenPulse {} {{(* ports = [] *)} {(* always_ready  *)}}}} {method {Bool readPulse {} {{(* ports = [] *)} {(* always_ready  *)}}}} {method {Bool allowCclock {} {{(* ports = [] *)} {(* always_ready  *)}}}}}} {position {%/Libraries/NullCrossingFIFOF.bsv 120 11 {Library NullCrossingFIFOF}}}
TaggedUnion {ModuleContextCore::ModuleContext#(type c, type i)} polymorphic {members {{{module f#(c x1)(Tuple2#(c, i))} M}}} {position {%/Libraries/ModuleContextCore.bs 4 5 {Library ModuleContextCore}}}
Alias ModuleContext::CLOCKCONTEXTSIZE 9 {position {%/Libraries/ModuleContext.bsv 11 11 {Library ModuleContext}}}
Typeclass {ModuleContext::Context#(type mc1, type c2)} {members {{{mc1#(c2)   provisos (IsModule#(mc1, a))} getContext} {{function mc1#(Empty) f(c2 x1)   provisos (IsModule#(mc1, a))} putContext}}} {instances {{ModuleContext::Context#(Module, void)} {ModuleContext::Context#(ModuleContextCore::ModuleContext#(st1), st1)} {ModuleContext::Context#(ModuleContextCore::ModuleContext#(st1), st2)   provisos (HList::Gettable#(st1, st2))}}} {position {%/Libraries/ModuleContext.bsv 13 11 {Library ModuleContext}}}
Struct {ModuleContext::ClockContextP#(numeric type n)} polymorphic {members {{{Vector::Vector#(n, Clock)} clks} {{Vector::Vector#(n, Reset)} rsts}}} {position {%/Libraries/ModuleContext.bsv 70 19 {Library ModuleContext}}}
Alias ModuleContext::ClockContext ModuleContext::ClockContextP#(9) {position {%/Libraries/ModuleContext.bsv 75 42 {Library ModuleContext}}}
Alias ModuleContext::ClockContextIfc Empty {position {%/Libraries/ModuleContext.bsv 76 15 {Library ModuleContext}}}
Alias {ModuleContext::ClockModule#(type a)} {ModuleContextCore::ModuleContext#(HList::HCons#(ModuleContext::ClockContextP#(9), HList::HNil), a)} {position {%/Libraries/ModuleContext.bsv 77 51 {Library ModuleContext}}}
Typeclass {ModuleContext::Expose#(type c, type ifc, numeric type n)} {dependencies {{c determines (ifc, n)}}} {members {{{function a#(ifc) f(c x1)   provisos (IsModule#(a, b))} unburyContext} {{function a#(ifc) f(c x1, ModuleContext::ClockContextP#(n) x2)   provisos (IsModule#(a, b))} unburyContextWithClocks}}} {instances {{ModuleContext::Expose#(HList::HCons#(c1, c2), Tuple2#(ifc1, ifc2), n)   provisos (ModuleContext::Expose#(c2, ifc2, n), ModuleContext::Expose#(c1, ifc1, n))} {ModuleContext::Expose#(HList::HList1#(ct1), ifc1, n)   provisos (ModuleContext::Expose#(ct1, ifc1, n))} {ModuleContext::Expose#(LBus::LBusContextP#(sa, sd), LBus::LBusContextIfcP#(sa, sd), ModuleContext::CLOCKCONTEXTSIZE)} {ModuleContext::Expose#(ModuleContext::ClockContextP#(n), Empty, n)}}} {position {%/Libraries/ModuleContext.bsv 86 11 {Library ModuleContext}}}
Typeclass {ModuleContext::Hide#(type mc, type ifc)} {members {{{function mc#(Empty) f(ifc x1)} reburyContext}}} {instances {{ModuleContext::Hide#(mc, Empty)   provisos (IsModule#(mc, a))} {ModuleContext::Hide#(mc, LBus::LBusContextIfcP#(sa, sd))   provisos (ModuleContext::Context#(mc, LBus::LBusContextP#(sa, sd)), IsModule#(mc, _a))} {ModuleContext::Hide#(mc, Tuple2#(ifc1, ifc2))   provisos (ModuleContext::Hide#(mc, ifc2), ModuleContext::Hide#(mc, ifc1), IsModule#(mc, a))}}} {position {%/Libraries/ModuleContext.bsv 135 11 {Library ModuleContext}}}
Typeclass {ModuleContext::ContextRun#(type m, type c1, type ctx2)} {dependencies {{(m, c1) determines ctx2}}} {members {{{function m#(Tuple2#(c1, a)) f(c1 x1, ModuleContextCore::ModuleContext#(ctx2, a) x2)} runWithContext}}} {instances {{ModuleContext::ContextRun#(Module, c1, c1)} {ModuleContext::ContextRun#(ModuleContextCore::ModuleContext#(ctx), c1, HList::HCons#(c1, ctx))}}} {position {%/Libraries/ModuleContext.bsv 158 11 {Library ModuleContext}}}
Typeclass {ModuleContext::ContextsRun#(type m, type c1, type ctx2)} {dependencies {{(m, c1) determines ctx2}}} {members {{{function m#(Tuple2#(c1, a)) f(c1 x1, ModuleContextCore::ModuleContext#(ctx2, a) x2)} runWithContexts}}} {instances {{ModuleContext::ContextsRun#(Module, c1, c1)} {ModuleContext::ContextsRun#(ModuleContextCore::ModuleContext#(ctx), c1, ctx2)   provisos (HList::HSplit#(ctx2, c1, ctx), HList::HAppend#(c1, ctx, ctx2))}}} {position {%/Libraries/ModuleContext.bsv 164 11 {Library ModuleContext}}}
Alias {ModuleCollect::ModuleCollect#(type a, type b)} {ModuleContextCore::ModuleContext#(HList::HCons#(UnitAppendList::UAList#(a), HList::HNil), b)} {position {%/Libraries/ModuleCollect.bsv 14 45 {Library ModuleCollect}}}
Interface {ModuleCollect::IWithCollection#(type a, type i)} polymorphic {members {{method {i device {} {{(* ports = [] *)}}}} {method {List#(a) collection {} {{(* ports = [] *)}}}}}} {position {%/Libraries/ModuleCollect.bsv 36 11 {Library ModuleCollect}}}
Typeclass {Boolify::Boolify#(type a)} {members {{{function a f(a x1)} boolify}}} {instances {{Boolify::Boolify#(function b f(a x1))   provisos (Bits#(b, sb), Bits#(a, sa), Bounded#(a))} {Boolify::Boolify#(function c f(a x1, b x2))   provisos (Boolify::Boolify#(function c f(Tuple2#(a, b) x1)))}}} {position {%/Libraries/Boolify.bs 20 6 {Library Boolify}}}
Interface {Cntrs::Count#(type t)} polymorphic {members {{method {Action incr t {{(* ports = ["val"] *)}}}} {method {Action decr t {{(* ports = ["val"] *)}}}} {method {Action update t {{(* ports = ["val"] *)}}}} {method {Action _write t {{(* ports = ["val"] *)}}}} {method {t _read {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Cntrs.bsv 12 11 {Library Cntrs}}}
Interface {Cntrs::VCount#(type t)} polymorphic {members {{method {Action incrA t {{(* ports = ["val"] *)}}}} {method {Action incrB t {{(* ports = ["val"] *)}}}} {method {Action update t {{(* ports = ["val"] *)}}}} {method {Action _write t {{(* ports = ["val"] *)}}}} {method {t _read {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Cntrs.bsv 42 11 {Library Cntrs}}}
Typeclass {Cntrs::ModArith#(type t)} {members {}} {instances {Cntrs::ModArith#(Bit#(n)) Cntrs::ModArith#(Int#(n)) Cntrs::ModArith#(UInt#(n))}} {position {%/Libraries/Cntrs.bsv 95 11 {Library Cntrs}}}
Interface Cntrs::UCount {members {{method {Action update Integer {{(* ports = ["val"] *)}}}} {method {Action _write Integer {{(* ports = ["val"] *)}}}} {method {Action incr Integer {{(* ports = ["val"] *)}}}} {method {Action decr Integer {{(* ports = ["val"] *)}}}} {method {Bool isEqual Integer {{(* ports = ["val"] *)}}}} {method {Bool isLessThan Integer {{(* ports = ["val"] *)}}}} {method {Bool isGreaterThan Integer {{(* ports = ["val"] *)}}}}}} {position {%/Libraries/Cntrs.bsv 109 11 {Library Cntrs}}}
Interface {LFSR::LFSR#(type a)} polymorphic {members {{method {Action seed a {}}} {method {a value {} {}}} {method {Action next {} {}}}}} {position {%/Libraries/LFSR.bs 28 10 {Library LFSR}}}
Interface {FoldFIFOF::FoldFIFO#(type a)} polymorphic {members {{method {Action enq a {}}} {method {Action deq {} {}}} {method {a first {} {}}} {method {Bool notFull {} {}}} {method {Bool notEmpty {} {}}} {method {Action clear {} {}}} {method {b foldr {{function b f(a x1, b x2)} b} {}}}}} {position {%/Libraries/FoldFIFOF.bs 12 10 {Library FoldFIFOF}}}
Interface {Probe::Probe#(type a)} polymorphic {members {{method {Action _write a {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/Probe.bsv 34 11 {Library Probe}}}
Alias ModuleContext::CLOCKCONTEXTSIZE 9 {position {%/Libraries/ModuleContext.bsv 11 11 {Library ModuleContext}}}
Typeclass {ModuleContext::Context#(type mc1, type c2)} {members {{{mc1#(c2)   provisos (IsModule#(mc1, a))} getContext} {{function mc1#(Empty) f(c2 x1)   provisos (IsModule#(mc1, a))} putContext}}} {instances {{ModuleContext::Context#(Module, void)} {ModuleContext::Context#(ModuleContextCore::ModuleContext#(st1), st1)} {ModuleContext::Context#(ModuleContextCore::ModuleContext#(st1), st2)   provisos (HList::Gettable#(st1, st2))}}} {position {%/Libraries/ModuleContext.bsv 13 11 {Library ModuleContext}}}
Struct {ModuleContext::ClockContextP#(numeric type n)} polymorphic {members {{{Vector::Vector#(n, Clock)} clks} {{Vector::Vector#(n, Reset)} rsts}}} {position {%/Libraries/ModuleContext.bsv 70 19 {Library ModuleContext}}}
Alias ModuleContext::ClockContext ModuleContext::ClockContextP#(9) {position {%/Libraries/ModuleContext.bsv 75 42 {Library ModuleContext}}}
Alias ModuleContext::ClockContextIfc Empty {position {%/Libraries/ModuleContext.bsv 76 15 {Library ModuleContext}}}
Alias {ModuleContext::ClockModule#(type a)} {ModuleContextCore::ModuleContext#(HList::HCons#(ModuleContext::ClockContextP#(9), HList::HNil), a)} {position {%/Libraries/ModuleContext.bsv 77 51 {Library ModuleContext}}}
Typeclass {ModuleContext::Expose#(type c, type ifc, numeric type n)} {dependencies {{c determines (ifc, n)}}} {members {{{function a#(ifc) f(c x1)   provisos (IsModule#(a, b))} unburyContext} {{function a#(ifc) f(c x1, ModuleContext::ClockContextP#(n) x2)   provisos (IsModule#(a, b))} unburyContextWithClocks}}} {instances {{ModuleContext::Expose#(HList::HCons#(c1, c2), Tuple2#(ifc1, ifc2), n)   provisos (ModuleContext::Expose#(c2, ifc2, n), ModuleContext::Expose#(c1, ifc1, n))} {ModuleContext::Expose#(HList::HList1#(ct1), ifc1, n)   provisos (ModuleContext::Expose#(ct1, ifc1, n))} {ModuleContext::Expose#(LBus::LBusContextP#(sa, sd), LBus::LBusContextIfcP#(sa, sd), ModuleContext::CLOCKCONTEXTSIZE)} {ModuleContext::Expose#(ModuleContext::ClockContextP#(n), Empty, n)}}} {position {%/Libraries/ModuleContext.bsv 86 11 {Library ModuleContext}}}
Typeclass {ModuleContext::Hide#(type mc, type ifc)} {members {{{function mc#(Empty) f(ifc x1)} reburyContext}}} {instances {{ModuleContext::Hide#(mc, Empty)   provisos (IsModule#(mc, a))} {ModuleContext::Hide#(mc, LBus::LBusContextIfcP#(sa, sd))   provisos (ModuleContext::Context#(mc, LBus::LBusContextP#(sa, sd)), IsModule#(mc, _a))} {ModuleContext::Hide#(mc, Tuple2#(ifc1, ifc2))   provisos (ModuleContext::Hide#(mc, ifc2), ModuleContext::Hide#(mc, ifc1), IsModule#(mc, a))}}} {position {%/Libraries/ModuleContext.bsv 135 11 {Library ModuleContext}}}
Typeclass {ModuleContext::ContextRun#(type m, type c1, type ctx2)} {dependencies {{(m, c1) determines ctx2}}} {members {{{function m#(Tuple2#(c1, a)) f(c1 x1, ModuleContextCore::ModuleContext#(ctx2, a) x2)} runWithContext}}} {instances {{ModuleContext::ContextRun#(Module, c1, c1)} {ModuleContext::ContextRun#(ModuleContextCore::ModuleContext#(ctx), c1, HList::HCons#(c1, ctx))}}} {position {%/Libraries/ModuleContext.bsv 158 11 {Library ModuleContext}}}
Typeclass {ModuleContext::ContextsRun#(type m, type c1, type ctx2)} {dependencies {{(m, c1) determines ctx2}}} {members {{{function m#(Tuple2#(c1, a)) f(c1 x1, ModuleContextCore::ModuleContext#(ctx2, a) x2)} runWithContexts}}} {instances {{ModuleContext::ContextsRun#(Module, c1, c1)} {ModuleContext::ContextsRun#(ModuleContextCore::ModuleContext#(ctx), c1, ctx2)   provisos (HList::HSplit#(ctx2, c1, ctx), HList::HAppend#(c1, ctx, ctx2))}}} {position {%/Libraries/ModuleContext.bsv 164 11 {Library ModuleContext}}}
TaggedUnion {ModuleContextCore::ModuleContext#(type c, type i)} polymorphic {members {{{module f#(c x1)(Tuple2#(c, i))} M}}} {position {%/Libraries/ModuleContextCore.bs 4 5 {Library ModuleContextCore}}}
TaggedUnion {OInt::OInt#(numeric type n)} polymorphic {members {{{Vector::Vector#(n, Bool)} O}}} {position {%/Libraries/OInt.bs 22 5 {Library OInt}}}
Interface {Mcp::IMcpUnitF#(type b)} polymorphic {members {{method {b result {} {}}} {method {Bool isValid {} {}}}}} {position {%/Libraries/Mcp.bs 8 10 {Library Mcp}}}
Interface {RevertingVirtualReg::VReg#(numeric type n)} polymorphic {members {{method {PrimAction write Bit#(n) {}}} {method {Bit#(n) read {} {}}}}} {position {%/Libraries/RevertingVirtualReg.bs 3 10 {Library RevertingVirtualReg}}}
Alias PopCount::K 8 {position {%/Libraries/PopCount.bs 61 5 {Library PopCount}}}
Alias PopCount::LogK 4 {position {%/Libraries/PopCount.bs 62 5 {Library PopCount}}}
Interface {Push::Push#(type a)} polymorphic {members {{method {Action push a {}}}}} {position {%/Libraries/Push.bs 26 10 {Library Push}}}
Typeclass {Arbitrate::ArbRequestTC#(type a)} {members {{{function Bool f(a x1)} isReadRequest} {{function Bool f(a x1)} isWriteRequest}}} {position {%/Libraries/Arbitrate.bsv 25 11 {Library Arbitrate}}}
Interface {Arbitrate::Arbitrate#(numeric type size)} polymorphic {members {{method {Action request {{Vector::Vector#(size, Bool)}} {{(* ports = ["req"] *)}}}} {method {{Vector::Vector#(size, Bool)} grant {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Arbitrate.bsv 63 11 {Library Arbitrate}}}
Interface {Arbitrate::Arbiter#(numeric type ports, type request, type response)} polymorphic {members {{method {{Vector::Vector#(ports, ClientServer::Server#(request, response))} users {} {}}} {interface {ClientServer::Client#(request, response)} master {}}}} {position {%/Libraries/Arbitrate.bsv 68 11 {Library Arbitrate}}}
Interface {CGetPut::CGetS#(numeric type n, type a, numeric type sa)} polymorphic {members {{method {Bit#(sa) gvalue {} {}}} {method {Bool gpresent {} {}}} {method {Action gcredit Bool {}}}}} {position {%/Libraries/CGetPut.bs 23 11 {Library CGetPut}}}
Interface {CGetPut::CPutS#(numeric type n, type a, numeric type sa)} polymorphic {members {{method {Action pvalue Bit#(sa) {}}} {method {Action ppresent Bool {}}} {method {Bool pcredit {} {}}}}} {position {%/Libraries/CGetPut.bs 28 11 {Library CGetPut}}}
Alias {CGetPut::CGet#(numeric type n, type a)} {CGetPut::CGetS#(n, a, SizeOf#(a))} {position {%/Libraries/CGetPut.bs 53 5 {Library CGetPut}}}
Alias {CGetPut::CPut#(numeric type n, type a)} {CGetPut::CPutS#(n, a, SizeOf#(a))} {position {%/Libraries/CGetPut.bs 59 5 {Library CGetPut}}}
Alias {CGetPut::CGetPut#(numeric type n, type a)} {Tuple2#(CGetPut::CGetS#(n, a, SizeOf#(a)), GetPut::Put#(a))} {position {%/Libraries/CGetPut.bs 61 5 {Library CGetPut}}}
Alias {CGetPut::GetCPut#(numeric type n, type a)} {Tuple2#(GetPut::Get#(a), CGetPut::CPutS#(n, a, SizeOf#(a)))} {position {%/Libraries/CGetPut.bs 62 5 {Library CGetPut}}}
Interface {CGetPut::CClientS#(numeric type n, type a, numeric type sa, type b, numeric type sb)} polymorphic {members {{interface {CGetPut::CGetS#(n, a, sa)} request {}} {interface {CGetPut::CPutS#(n, b, sb)} response {}}}} {position {%/Libraries/CGetPut.bs 267 10 {Library CGetPut}}}
Interface {CGetPut::CServerS#(numeric type n, type a, numeric type sa, type b, numeric type sb)} polymorphic {members {{interface {CGetPut::CPutS#(n, a, sa)} request {}} {interface {CGetPut::CGetS#(n, b, sb)} response {}}}} {position {%/Libraries/CGetPut.bs 271 10 {Library CGetPut}}}
Alias {CGetPut::CClient#(numeric type n, type a, type b)} {CGetPut::CClientS#(n, a, SizeOf#(a), b, SizeOf#(b))} {position {%/Libraries/CGetPut.bs 281 5 {Library CGetPut}}}
Alias {CGetPut::CServer#(numeric type n, type a, type b)} {CGetPut::CServerS#(n, a, SizeOf#(a), b, SizeOf#(b))} {position {%/Libraries/CGetPut.bs 282 5 {Library CGetPut}}}
Alias {CGetPut::CClientServer#(numeric type n, type a, type b)} {Tuple2#(CGetPut::CClientS#(n, a, SizeOf#(a), b, SizeOf#(b)), ClientServer::Server#(a, b))} {position {%/Libraries/CGetPut.bs 284 5 {Library CGetPut}}}
Alias {CGetPut::ClientCServer#(numeric type n, type a, type b)} {Tuple2#(ClientServer::Client#(a, b), CGetPut::CServerS#(n, a, SizeOf#(a), b, SizeOf#(b)))} {position {%/Libraries/CGetPut.bs 285 5 {Library CGetPut}}}

Interface StmtFSM::Once {members {{method {Action start {} {}}} {method {Action clear {} {}}} {method {Bool done {} {}}}}} {position {%/Libraries/StmtFSM.bs 293 10 {Library StmtFSM}}}
Interface Arbiter::ArbiterClient_IFC {members {{method {Action request {} {{(* ports = [] *)}}}} {method {Action lock {} {{(* ports = [] *)}}}} {method {Bool grant {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Arbiter.bsv 11 11 {Library Arbiter}}}
Interface Arbiter::ArbiterRequest_IFC {members {{method {Bool request {} {{(* ports = [] *)}}}} {method {Bool lock {} {{(* ports = [] *)}}}} {method {Action grant {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Arbiter.bsv 17 11 {Library Arbiter}}}
Interface {Arbiter::Arbiter_IFC#(numeric type count)} polymorphic {members {{method {{Vector::Vector#(count, Arbiter::ArbiterClient_IFC)} clients {} {}}} {method {Bit#(TLog#(count)) grant_id {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Arbiter.bsv 23 11 {Library Arbiter}}}
Typeclass {Arbiter::Arbitable#(type a)} {members {{{function b#(Arbiter::ArbiterRequest_IFC) f(a x1)   provisos (IsModule#(b, c))} mkArbiterRequest}}} {instances Arbiter::Arbitable#(BusDefines::BusSend#(a))} {position {%/Libraries/Arbiter.bsv 340 11 {Library Arbiter}}}

Interface {Gearbox::Gearbox#(numeric type in, numeric type out, type a)} polymorphic {members {{method {Action enq {{Vector::Vector#(in, a)}} {{(* ports = ["din"] *)}}}} {method {Action deq {} {{(* ports = [] *)}}}} {method {{Vector::Vector#(out, a)} first {} {{(* ports = [] *)}}}} {method {Bool notFull {} {{(* ports = [] *)}}}} {method {Bool notEmpty {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Gearbox.bsv 35 11 {Library Gearbox}}}

Alias {ActionSeq::ActionList#(numeric type n)} {Vector::Vector#(n, Action)} {position {%/Libraries/ActionSeq.bs 41 5 {Library ActionSeq}}}
Typeclass {ActionSeq::ActionJoin#(type a, type c)} {dependencies {{a determines c}}} {members {{{function c f(Action x1, a x2)} |>}}} {instances {{ActionSeq::ActionJoin#(Action, ActionSeq::ActionList#(2))} {ActionSeq::ActionJoin#(ActionSeq::ActionList#(n), ActionSeq::ActionList#(m))   provisos (Add#(1, n, m))}}} {position {%/Libraries/ActionSeq.bs 44 6 {Library ActionSeq}}}
Interface ActionSeq::ActionSeq {members {{method {Action start {} {}}} {method {Bool done {} {}}} {method {Action checkDone {} {}}}}} {position {%/Libraries/ActionSeq.bs 68 10 {Library ActionSeq}}}
Alias {ActionSeq::RegB#(numeric type k)} Reg#(Bit#(k)) {position {%/Libraries/ActionSeq.bs 73 5 {Library ActionSeq}}}
Interface {ActionSeq::ActionSeqN#(numeric type n)} polymorphic {members {{interface ActionSeq::ActionSeq _actionSeq {}}}} {position {%/Libraries/ActionSeq.bs 98 11 {Library ActionSeq}}}
Alias {ActionSeq::SeqList#(numeric type n)} {Vector::Vector#(n, ActionSeq::ActionSeq)} {position {%/Libraries/ActionSeq.bs 183 5 {Library ActionSeq}}}

Alias {RAM::RAM#(type adr, type dta)} {ClientServer::Server#(RAM::RAMreq#(adr, dta), dta)} {position {%/Libraries/RAM.bs 19 5 {Library RAM}}}
Alias {RAM::RAMclient#(type adr, type dta)} {ClientServer::Client#(RAM::RAMreq#(adr, dta), dta)} {position {%/Libraries/RAM.bs 25 5 {Library RAM}}}
TaggedUnion {RAM::RAMreq#(type adr, type dta)} polymorphic {members {{adr Read} {{Tuple2#(adr, dta)} Write}}} {position {%/Libraries/RAM.bs 34 5 {Library RAM}}}
Interface EdgeDetect::RequestDetect {members {{method {Action send {} {{(* ports = [] *)}}}} {method {Bool pulse {} {{(* ports = [] *)}}}} {method {Bool pending {} {{(* ports = [] *)}}}} {method {Action ack {} {{(* ports = [] *)}}}}}} {position {%/Libraries/EdgeDetect.bsv 3 11 {Library EdgeDetect}}}

