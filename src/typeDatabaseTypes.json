Interface {CRC::CRC#(numeric type n)} polymorphic {members {{method {Action add Bit#(8) {{(* ports = ["data"] *)}}}} {method {Action clear {} {{(* ports = [] *)}}}} {method {Bit#(n) result {} {{(* ports = [] *)}}}} {method {ActionValue#(Bit#(n)) complete {} {{(* ports = [] *)}}}}}} {position {%/Libraries/CRC.bsv 19 11 {Library CRC}}}

TaggedUnion {Reserved::Reserved#(numeric type n)} polymorphic {members {{Bit#(n) Reserved}}} {position {%/Libraries/Reserved.bs 16 5 {Library Reserved}}}
TaggedUnion {Reserved::ReservedZero#(numeric type n)} polymorphic {members {{Bit#(n) ReservedZero}}} {position {%/Libraries/Reserved.bs 17 5 {Library Reserved}}}
TaggedUnion {Reserved::ReservedOne#(numeric type n)} polymorphic {members {{Bit#(n) ReservedOne}}} {position {%/Libraries/Reserved.bs 18 5 {Library Reserved}}}
Struct BRAM::BRAM_Configure {members {{Integer memorySize} {Integer latency} {BRAM::LoadFormat loadFormat} {Integer outFIFODepth} {Bool allowWriteResponseBypass {width 1}}}} {position {%/Libraries/BRAM.bsv 47 6 {Library BRAM}}}
TaggedUnion BRAM::LoadFormat {members {{void None {width 0}} {String Hex} {String Binary}}} {position {%/Libraries/BRAM.bsv 53 6 {Library BRAM}}}
Struct {BRAM_Compat::BRAMRequest#(type addr, type data)} polymorphic {members {{Bool write {width 1}} {addr address} {data datain}}} {position {%/Libraries/BRAM_Compat.bsv 23 19 {Library BRAM_Compat}}}
Struct {BRAM_Compat::BRAMRequestBE#(type addr, type data, numeric type n)} polymorphic {members {{Bit#(n) writeen} {addr address} {data datain}}} {position {%/Libraries/BRAM_Compat.bsv 29 19 {Library BRAM_Compat}}}
Alias {BRAM_Compat::BRAMServer#(type addr, type data)} {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} {position {%/Libraries/BRAM_Compat.bsv 31 49 {Library BRAM_Compat}}}
Alias {BRAM_Compat::BRAMClient#(type addr, type data)} {ClientServer::Client#(BRAM_Compat::BRAMRequest#(addr, data), data)} {position {%/Libraries/BRAM_Compat.bsv 32 49 {Library BRAM_Compat}}}
Alias {BRAM_Compat::BRAMServerBE#(type addr, type data, numeric type n)} {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} {position {%/Libraries/BRAM_Compat.bsv 34 54 {Library BRAM_Compat}}}
Alias {BRAM_Compat::BRAMClientBE#(type addr, type data, numeric type n)} {ClientServer::Client#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} {position {%/Libraries/BRAM_Compat.bsv 35 54 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM1Port#(type addr, type data)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} portA {}}}} {position {%/Libraries/BRAM_Compat.bsv 66 11 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM1PortBE#(type addr, type data, numeric type n)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} portA {}}}} {position {%/Libraries/BRAM_Compat.bsv 94 11 {Library BRAM_Compat}}}
Alias {BRAM::BRAM1PortBE8#(type addr, type data)} {BRAM::BRAM1PortBE#(addr, data, TDiv#(SizeOf#(data), 8))} {position {%/Libraries/BRAM.bsv 134 59 {Library BRAM}}}
Interface {BRAM_Compat::BRAM2Port#(type addr, type data)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} portA {}} {interface {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} portB {}}}} {position {%/Libraries/BRAM_Compat.bsv 61 11 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM#(type addr, type data)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} portA {}} {interface {ClientServer::Server#(BRAM_Compat::BRAMRequest#(addr, data), data)} portB {}}}} {position {%/Libraries/BRAM_Compat.bsv 51 11 {Library BRAM_Compat}}}
Interface {BRAM_Compat::BRAM2PortBE#(type addr, type data, numeric type n)} polymorphic {members {{interface {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} portA {}} {interface {ClientServer::Server#(BRAM_Compat::BRAMRequestBE#(addr, data, n), data)} portB {}}}} {position {%/Libraries/BRAM_Compat.bsv 89 11 {Library BRAM_Compat}}}
Typeclass {BRAM::RequestToBRAM#(type bram_request_t, type bramifc_t)} {members {{{function Action f(bramifc_t x1, bram_request_t x2)} doRequest}}} {instances {{BRAM::RequestToBRAM#(BRAM::BRAMRequest#(addr, data), BRAMCore::BRAM_PORT#(addr, data))} {BRAM::RequestToBRAM#(BRAM::BRAMRequestBE#(addr, data, n), BRAMCore::BRAM_PORT_BE#(addr, data, n))}}} {position {%/Libraries/BRAM.bsv 429 11 {Library BRAM}}}
Typeclass {BRAM::RequestToResponse#(type bram_request_t)} {members {{{function Bool f(bram_request_t x1)} responseRequired} {{function Bool f(bram_request_t x1)} isWriteRequest}}} {instances {{BRAM::RequestToResponse#(BRAM::BRAMRequest#(addr, data))} {BRAM::RequestToResponse#(BRAM::BRAMRequestBE#(addr, data, n))}}} {position {%/Libraries/BRAM.bsv 432 11 {Library BRAM}}}
Typeclass {BRAM::BRAMToResponse#(type bramifc_t, type response_t)} {members {{{function ActionValue#(response_t) f(bramifc_t x1)} getResponse} {{function response_t f(bramifc_t x1)} readResponse}}} {instances {{BRAM::BRAMToResponse#(BRAMCore::BRAM_PORT#(addr, data), data)} {BRAM::BRAMToResponse#(BRAMCore::BRAM_PORT_BE#(addr, data, n), data)}}} {position {%/Libraries/BRAM.bsv 436 11 {Library BRAM}}}
Interface {BRAM::ServerWithClear#(type req, type resp)} polymorphic {members {{interface {ClientServer::Server#(req, resp)} server {}} {method {Action clear {} {{(* ports = [] *)} {(* always_ready  *)}}}}}} {position {%/Libraries/BRAM.bsv 443 11 {Library BRAM}}}
Interface BRAM::SizedReg {members {{method {Action _write Integer {{(* ports = ["i"] *)}}}} {method {Action addA Integer {{(* ports = ["i"] *)}}}} {method {Action addB Integer {{(* ports = ["d"] *)}}}} {method {Bool isLessThan Integer {{(* ports = ["i"] *)}}}} {method {Bool isGreaterThan Integer {{(* ports = ["i"] *)}}}} {method {Bool isEqualTo Integer {{(* ports = ["i"] *)}}}}}} {position {%/Libraries/BRAM.bsv 880 11 {Library BRAM}}}
Interface {GetPut::Get#(type a)} polymorphic {members {{method {ActionValue#(a) get {} {}}}}} {position {%/Libraries/GetPut.bs 88 10 {Library GetPut}}}
Interface {GetPut::GetS#(type a)} polymorphic {members {{method {a first {} {}}} {method {Action deq {} {}}}}} {position {%/Libraries/GetPut.bs 91 10 {Library GetPut}}}
Interface {GetPut::Put#(type a)} polymorphic {members {{method {Action put a {{(* prefix = "" *)} {(* result = "UNUSED" *)} {(* ports = ["put"] *)}}}}}} {position {%/Libraries/GetPut.bs 115 10 {Library GetPut}}}
Interface {GetPut::PutS#(type a)} polymorphic {members {{method {Action offer a {}}} {method {Bool accepted {} {}}}}} {position {%/Libraries/GetPut.bs 118 10 {Library GetPut}}}
Alias {GetPut::GetPut#(type a)} {Tuple2#(GetPut::Get#(a), GetPut::Put#(a))} {position {%/Libraries/GetPut.bs 127 5 {Library GetPut}}}
Typeclass {GetPut::ToGet#(type a, type b)} {dependencies {{a determines b}}} {members {{{function GetPut::Get#(b) f(a x1)} toGet}}} {instances {{GetPut::ToGet#(ActionValue#(a), a)} {GetPut::ToGet#(AlignedFIFOs::AlignedFIFO#(t), t)} {GetPut::ToGet#(Clocks::SyncFIFOIfc#(a), a)} {GetPut::ToGet#(CommitIfc::SendCommit#(a), a)} {GetPut::ToGet#(FIFO::FIFO#(a), a)} {GetPut::ToGet#(FIFOF::FIFOF#(a), a)} {GetPut::ToGet#(FIFOLevel::FIFOCountIfc#(a, n), a)} {GetPut::ToGet#(FIFOLevel::FIFOLevelIfc#(a, n), a)} {GetPut::ToGet#(FIFOLevel::SyncFIFOCountIfc#(a, n), a)} {GetPut::ToGet#(FIFOLevel::SyncFIFOLevelIfc#(a, n), a)} {GetPut::ToGet#(GetPut::Get#(a), a)} {GetPut::ToGet#(NullCrossingFIFOF::CrossingFIFOF#(t), t)} {GetPut::ToGet#(PAClib::PipeOut#(a), a)} {GetPut::ToGet#(RWire#(a), a)} {GetPut::ToGet#(ReadOnly#(a), a)} {GetPut::ToGet#(Reg#(a), a)} {GetPut::ToGet#(a, a)}}} {position {%/Libraries/GetPut.bs 417 6 {Library GetPut}}}
Typeclass {GetPut::ToPut#(type a, type b)} {dependencies {{a determines b}}} {members {{{function GetPut::Put#(b) f(a x1)} toPut}}} {instances {{GetPut::ToPut#(AlignedFIFOs::AlignedFIFO#(t), t)} {GetPut::ToPut#(Clocks::SyncFIFOIfc#(a), a)} {GetPut::ToPut#(CommitIfc::RecvCommit#(a), a)} {GetPut::ToPut#(FIFO::FIFO#(a), a)} {GetPut::ToPut#(FIFOF::FIFOF#(a), a)} {GetPut::ToPut#(FIFOLevel::FIFOCountIfc#(a, n), a)} {GetPut::ToPut#(FIFOLevel::FIFOLevelIfc#(a, n), a)} {GetPut::ToPut#(FIFOLevel::SyncFIFOCountIfc#(a, n), a)} {GetPut::ToPut#(FIFOLevel::SyncFIFOLevelIfc#(a, n), a)} {GetPut::ToPut#(GetPut::Put#(a), a)} {GetPut::ToPut#(NullCrossingFIFOF::CrossingFIFOF#(t), t)} {GetPut::ToPut#(RWire#(a), a)} {GetPut::ToPut#(Reg#(a), a)} {GetPut::ToPut#(function Action f(a x1), a)}}} {position {%/Libraries/GetPut.bs 420 6 {Library GetPut}}}
Interface {ClientServer::Client#(type a, type b)} polymorphic {members {{interface GetPut::Get#(a) request {}} {interface GetPut::Put#(b) response {}}}} {position {%/Libraries/ClientServer.bs 34 10 {Library ClientServer}}}
Interface {ClientServer::Server#(type a, type b)} polymorphic {members {{interface GetPut::Put#(a) request {}} {interface GetPut::Get#(b) response {}}}} {position {%/Libraries/ClientServer.bs 45 10 {Library ClientServer}}}
Alias {ClientServer::ClientServer#(type a, type b)} {Tuple2#(ClientServer::Client#(a, b), ClientServer::Server#(a, b))} {position {%/Libraries/ClientServer.bs 100 5 {Library ClientServer}}}
TaggedUnion {ModuleContextCore::ModuleContext#(type c, type i)} polymorphic {members {{{module f#(c x1)(Tuple2#(c, i))} M}}} {position {%/Libraries/ModuleContextCore.bs 4 5 {Library ModuleContextCore}}}

Struct {Complex::Complex#(type any_t)} polymorphic {members {{any_t rel} {any_t img}}} {position {%/Libraries/Complex.bsv 22 11 {Library Complex}}}




Interface {FoldFIFOF::FoldFIFO#(type a)} polymorphic {members {{method {Action enq a {}}} {method {Action deq {} {}}} {method {a first {} {}}} {method {Bool notFull {} {}}} {method {Bool notEmpty {} {}}} {method {Action clear {} {}}} {method {b foldr {{function b f(a x1, b x2)} b} {}}}}} {position {%/Libraries/FoldFIFOF.bs 12 10 {Library FoldFIFOF}}}

Typeclass {DummyDriver::DummyDriver#(type i)} {members {{{a#(i)   provisos (IsModule#(a, b))} mkStub}}} {instances {{DummyDriver::DummyDriver#(Memory::MemoryClient#(a, d))} {DummyDriver::DummyDriver#(Vector::Vector#(n, i))   provisos (DummyDriver::DummyDriver#(i))}}} {position {%/Libraries/DummyDriver.bsv 21 11 {Library DummyDriver}}}
Interface {SPSRAM::VSyncSRAM#(numeric type adrs, numeric type dtas)} polymorphic {members {{method {PrimAction exec {Bit#(adrs) Bit#(dtas) Bit#(1) Bit#(1)} {}}} {method {Bit#(dtas) rdata {} {}}}}} {position {%/Libraries/SPSRAM.bs 67 10 {Library SPSRAM}}}
Interface {BRAMFIFO::IBRAMFIFOF#(numeric type log2depth, type t)} polymorphic {members {{interface FIFOF::FIFOF#(t) fifo {}}}} {position {%/Libraries/BRAMFIFO.bsv 32 11 {Library BRAMFIFO}}}
Interface {BRAMFIFO::ISyncBRAMFIFOFIfc#(numeric type log2depth, type t)} polymorphic {members {{interface Clocks::SyncFIFOIfc#(t) fifo {}}}} {position {%/Libraries/BRAMFIFO.bsv 36 11 {Library BRAMFIFO}}}
Interface {AlignedFIFOs::Store#(type i, type a, numeric type n)} polymorphic {members {{method {Action write {i a} {{(* ports = ["idx", "value"] *)}}}} {method {Action prefetch i {{(* ports = ["idx"] *)}}}} {method {a read i {{(* ports = ["idx"] *)}}}}}} {position {%/Libraries/AlignedFIFOs.bsv 44 11 {Library AlignedFIFOs}}}
Interface {AlignedFIFOs::RawReg#(numeric type n)} polymorphic {members {{method {Action write Bit#(n) {{(* ports = ["x"] *)}}}} {method {Bit#(n) read {} {{(* ports = [] *)}}}}}} {position {%/Libraries/AlignedFIFOs.bsv 54 11 {Library AlignedFIFOs}}} {attributes {{(* always_ready  *)}}}
Interface {AlignedFIFOs::AlignedFIFO#(type a)} polymorphic {members {{method {Action enq a {{(* ports = ["x"] *)}}}} {method {a first {} {{(* ports = [] *)}}}} {method {Action deq {} {{(* ports = [] *)}}}} {method {Bool dNotFull {} {{(* ports = [] *)}}}} {method {Bool dNotEmpty {} {{(* ports = [] *)}}}} {method {Bool sNotFull {} {{(* ports = [] *)}}}} {method {Bool sNotEmpty {} {{(* ports = [] *)}}}} {method {Action dClear {} {{(* ports = [] *)}}}} {method {Action sClear {} {{(* ports = [] *)}}}}}} {position {%/Libraries/AlignedFIFOs.bsv 232 11 {Library AlignedFIFOs}}}
Interface {Pull::Pull#(type a)} polymorphic {members {{method {ActionValue#(a) pull {} {}}}}} {position {%/Libraries/Pull.bs 21 10 {Library Pull}}}
Interface {Counter::Counter#(numeric type n)} polymorphic {members {{method {Action inc Bit#(n) {}}} {method {Action dec Bit#(n) {}}} {method {Action up {} {}}} {method {Action down {} {}}} {method {Bit#(n) value {} {}}} {method {Action setC Bit#(n) {}}} {method {Action setF Bit#(n) {}}} {method {Action clear {} {}}}}} {position {%/Libraries/Counter.bs 5 10 {Library Counter}}}
Interface {Counter::VCounter#(numeric type n)} polymorphic {members {{method {PrimAction addA Bit#(n) {}}} {method {PrimAction addB Bit#(n) {}}} {method {Bit#(n) value {} {}}} {method {PrimAction setC Bit#(n) {}}} {method {PrimAction setF Bit#(n) {}}}}} {position {%/Libraries/Counter.bs 15 10 {Library Counter}}}
Interface {SRAM::ShiftReg#(numeric type n, type a)} polymorphic {members {{method {a output {} {}}} {method {Action shift a {}}}}} {position {%/Libraries/SRAM.bs 135 11 {Library SRAM}}}
Interface StmtFSMUtil::MEState {members {{method {Action set Integer {{(* ports = ["value"] *)}}}} {method {Action set_delayed Integer {{(* ports = ["value"] *)}}}} {method {Action reset {} {{(* ports = [] *)}}}} {method {Action reset_delayed {} {{(* ports = [] *)}}}} {method {Bool is Integer {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/StmtFSMUtil.bsv 7 11 {Library StmtFSMUtil}}}
Interface {StmtFSMUtil::MEStateInternal#(type a)} polymorphic {members {{method {Action set Integer {{(* ports = ["value"] *)}}}} {method {Action set_delayed Integer {{(* ports = ["value"] *)}}}} {method {Action reset {} {{(* ports = [] *)}}}} {method {Action reset_delayed {} {{(* ports = [] *)}}}} {method {Bool is Integer {{(* ports = ["value"] *)}}}}}} {position {%/Libraries/StmtFSMUtil.bsv 15 11 {Library StmtFSMUtil}}}
Alias {SyncSRAM::SyncSRAMS#(numeric type lat, numeric type adrs, numeric type dtas)} {ClientServer::Server#(SyncSRAM::SyncSRAMrequest#(lat, adrs, dtas), Bit#(dtas))} {position {%/Libraries/SyncSRAM.bs 21 5 {Library SyncSRAM}}}
Alias {SyncSRAM::SyncSRAMC#(numeric type lat, numeric type adrs, numeric type dtas)} {ClientServer::Client#(SyncSRAM::SyncSRAMrequest#(lat, adrs, dtas), Bit#(dtas))} {position {%/Libraries/SyncSRAM.bs 30 5 {Library SyncSRAM}}}
Interface {SyncSRAM::SyncSRAMrequest#(numeric type lat, numeric type adrs, numeric type dtas)} polymorphic {members {{method {Bit#(adrs) addr {} {}}} {method {Bit#(dtas) wdata {} {}}} {method {Bit#(1) we {} {}}} {method {Bit#(1) ena {} {}}}}} {position {%/Libraries/SyncSRAM.bs 43 11 {Library SyncSRAM}}}
Alias SquareRoot::SqrtT UInt#(64) {position {%/Libraries/SquareRoot.bsv 256 19 {Library SquareRoot}}}
Alias SquareRoot::SqrtTFx {FixedPoint::FixedPoint#(32, 32)} {position {%/Libraries/SquareRoot.bsv 257 28 {Library SquareRoot}}}

Interface {CommitIfc::SendCommit#(type a)} polymorphic {members {{method {a dataout {} {{(* ports = [] *)}}}} {method {Action ack {} {{(* ports = [] *)} {(* always_ready  *)}}}}}} {position {%/Libraries/CommitIfc.bsv 15 11 {Library CommitIfc}}}
Interface {CommitIfc::RecvCommit#(type a)} polymorphic {members {{method {Action datain a {{(* ports = ["din"] *)} {(* always_ready  *)}}}} {method {Bool accept {} {{(* ports = [] *)} {(* always_ready  *)}}}}}} {position {%/Libraries/CommitIfc.bsv 21 11 {Library CommitIfc}}}
Typeclass {CommitIfc::ToSendCommit#(type a, type b)} {dependencies {{a determines b}}} {members {{{function c#(CommitIfc::SendCommit#(b)) f(a x1)   provisos (IsModule#(c, d))} mkSendCommit}}} {instances {{CommitIfc::ToSendCommit#(Clocks::SyncFIFOIfc#(a), a)} {CommitIfc::ToSendCommit#(FIFO::FIFO#(a), a)} {CommitIfc::ToSendCommit#(FIFOF::FIFOF#(a), a)} {CommitIfc::ToSendCommit#(FIFOLevel::FIFOLevelIfc#(a, n), a)} {CommitIfc::ToSendCommit#(GetPut::Get#(a), a)   provisos (Bits#(a, sa))} {CommitIfc::ToSendCommit#(RWire#(a), a)}}} {position {%/Libraries/CommitIfc.bsv 147 11 {Library CommitIfc}}}
Typeclass {CommitIfc::ToRecvCommit#(type a, type b)} {dependencies {{a determines b}}} {members {{{function c#(CommitIfc::RecvCommit#(b)) f(a x1)   provisos (IsModule#(c, d))} mkRecvCommit}}} {instances {{CommitIfc::ToRecvCommit#(Clocks::SyncFIFOIfc#(a), a)   provisos (Bits#(a, sa))} {CommitIfc::ToRecvCommit#(FIFOF::FIFOF#(a), a)   provisos (Bits#(a, sa))} {CommitIfc::ToRecvCommit#(FIFOLevel::FIFOLevelIfc#(a, n), a)   provisos (Bits#(a, sa))} {CommitIfc::ToRecvCommit#(GetPut::Put#(a), a)   provisos (Bits#(a, sa))} {CommitIfc::ToRecvCommit#(RWire#(a), a)}}} {position {%/Libraries/CommitIfc.bsv 152 11 {Library CommitIfc}}}
Interface {CommitIfc::ClientCommit#(type req, type resp)} polymorphic {members {{interface CommitIfc::SendCommit#(req) request {}} {interface CommitIfc::RecvCommit#(resp) response {}}}} {position {%/Libraries/CommitIfc.bsv 354 11 {Library CommitIfc}}}
Interface {CommitIfc::ServerCommit#(type req, type resp)} polymorphic {members {{interface CommitIfc::RecvCommit#(req) request {}} {interface CommitIfc::SendCommit#(resp) response {}}}} {position {%/Libraries/CommitIfc.bsv 359 11 {Library CommitIfc}}}
TaggedUnion {ListN::ListN#(numeric type n, type a)} polymorphic {members {{List#(a) L}}} {position {%/Libraries/ListN.bs 56 6 {Library ListN}}}
Interface {CBus::CBus#(numeric type sa, numeric type sd)} polymorphic {members {{method {Action write {Bit#(sa) Bit#(sd)} {{(* ports = ["addr", "data"] *)}}}} {method {ActionValue#(Bit#(sd)) read Bit#(sa) {{(* ports = ["addr"] *)} {(* always_ready  *)}}}}}} {position {%/Libraries/CBus.bsv 16 11 {Library CBus}}}
Interface {CBus::IWithCBus#(type cbus_IFC, type device_IFC)} polymorphic {members {{method {cbus_IFC cbus_ifc {} {}}} {method {device_IFC device_ifc {} {}}}}} {position {%/Libraries/CBus.bsv 23 11 {Library CBus}}}
Alias {CBus::CBusItem#(numeric type sa, numeric type sd)} {CBus::CBus#(sa, sd)} {position {%/Libraries/CBus.bsv 33 23 {Library CBus}}}
Alias {CBus::ModWithCBus#(numeric type sa, numeric type sd, type i)} {ModuleContextCore::ModuleContext#(HList::HCons#(UnitAppendList::UAList#(CBus::CBus#(sa, sd)), HList::HNil), i)} {position {%/Libraries/CBus.bsv 36 46 {Library CBus}}}
Struct {CBus::CRAddr#(numeric type sa, numeric type sd)} polymorphic {members {{Bit#(sa) a} {Bit#(TLog#(sd)) o}}} {position {%/Libraries/CBus.bsv 41 6 {Library CBus}}}
Typeclass {CBus::ExtendNP#(type a, numeric type m, numeric type n)} {members {{{function a#(m) f(a#(n) x1)} extendNP} {{function a#(m) f(a#(n) x1)} zeroExtendNP} {{function a#(m) f(a#(n) x1)} signExtendNP} {{function a#(m) f(a#(n) x1)} truncateNP} {{function a#(m) f(a#(n) x1)} truncateLSBNP}}} {instances {{CBus::ExtendNP#(Bit, m, n)} {CBus::ExtendNP#(Int, m, n)} {CBus::ExtendNP#(UInt, m, n)}}} {position {%/Libraries/CBus.bsv 454 11 {Library CBus}}}


Alias {ConfigReg::ConfigReg#(type a)} Reg#(a) {position {%/Libraries/ConfigReg.bs 26 5 {Library ConfigReg}}}
Interface {RevertingVirtualReg::VReg#(numeric type n)} polymorphic {members {{method {PrimAction write Bit#(n) {}}} {method {Bit#(n) read {} {}}}}} {position {%/Libraries/RevertingVirtualReg.bs 3 10 {Library RevertingVirtualReg}}}
Interface {BGetPut::BGetS#(numeric type sa)} polymorphic {members {{method {Bit#(sa) gvalue {} {}}} {method {Bool gpresent {} {}}} {method {Action gcredit Bool {}}}}} {position {%/Libraries/BGetPut.bs 36 10 {Library BGetPut}}}
Interface {BGetPut::BPutS#(numeric type sa)} polymorphic {members {{method {Action pvalue Bit#(sa) {}}} {method {Action ppresent Bool {}}} {method {Bool pcredit {} {}}}}} {position {%/Libraries/BGetPut.bs 48 10 {Library BGetPut}}}
Alias {BGetPut::BGet#(type a)} BGetPut::BGetS#(SizeOf#(a)) {position {%/Libraries/BGetPut.bs 60 5 {Library BGetPut}}}
Alias {BGetPut::BPut#(type a)} BGetPut::BPutS#(SizeOf#(a)) {position {%/Libraries/BGetPut.bs 61 5 {Library BGetPut}}}
Alias {BGetPut::BGetPut#(type a)} {Tuple2#(BGetPut::BGetS#(SizeOf#(a)), GetPut::Put#(a))} {position {%/Libraries/BGetPut.bs 63 5 {Library BGetPut}}}
Alias {BGetPut::GetBPut#(type a)} {Tuple2#(GetPut::Get#(a), BGetPut::BPutS#(SizeOf#(a)))} {position {%/Libraries/BGetPut.bs 64 5 {Library BGetPut}}}
Interface {BGetPut::BClientS#(numeric type sa, numeric type sb)} polymorphic {members {{interface BGetPut::BGetS#(sa) request {}} {interface BGetPut::BPutS#(sb) response {}}}} {position {%/Libraries/BGetPut.bs 182 10 {Library BGetPut}}}
Interface {BGetPut::BServerS#(numeric type sa, numeric type sb)} polymorphic {members {{interface BGetPut::BPutS#(sa) request {}} {interface BGetPut::BGetS#(sb) response {}}}} {position {%/Libraries/BGetPut.bs 186 10 {Library BGetPut}}}
Alias {BGetPut::BClient#(type a, type b)} {BGetPut::BClientS#(SizeOf#(a), SizeOf#(b))} {position {%/Libraries/BGetPut.bs 208 5 {Library BGetPut}}}
Alias {BGetPut::BServer#(type a, type b)} {BGetPut::BServerS#(SizeOf#(a), SizeOf#(b))} {position {%/Libraries/BGetPut.bs 209 5 {Library BGetPut}}}
Alias {BGetPut::BClientServer#(type a, type b)} {Tuple2#(BGetPut::BClientS#(SizeOf#(a), SizeOf#(b)), ClientServer::Server#(a, b))} {position {%/Libraries/BGetPut.bs 210 5 {Library BGetPut}}}
Alias {BGetPut::ClientBServer#(type a, type b)} {Tuple2#(ClientServer::Client#(a, b), BGetPut::BServerS#(SizeOf#(a), SizeOf#(b)))} {position {%/Libraries/BGetPut.bs 211 5 {Library BGetPut}}}
Struct {ZBusUtil::ZBit#(type t)} polymorphic {members {{t word}}} {position {%/Libraries/ZBusUtil.bsv 34 19 {Library ZBusUtil}}}
Interface {ZBusUtil::ConvertToZ#(type i)} polymorphic {members {{method {ZBusUtil::ZBit#(i) convert {i Bool} {{(* ports = ["x1", "x2"] *)}}}}}} {position {%/Libraries/ZBusUtil.bsv 52 11 {Library ZBusUtil}}}
Interface {ZBusUtil::ConvertFromZ#(type i)} polymorphic {members {{method {i convert ZBusUtil::ZBit#(i) {{(* ports = ["x1"] *)}}}}}} {position {%/Libraries/ZBusUtil.bsv 91 11 {Library ZBusUtil}}}
Interface {ZBusUtil::ResolveZ#(type i)} polymorphic {members {{method {ZBusUtil::ZBit#(i) resolve {ZBusUtil::ZBit#(i) ZBusUtil::ZBit#(i)} {{(* ports = ["x1", "x2"] *)}}}}}} {position {%/Libraries/ZBusUtil.bsv 130 11 {Library ZBusUtil}}}
Interface {ZBus::ZBusInternalIFC#(type t)} polymorphic {members {{method {ZBusUtil::ZBit#(t) zout {} {{(* ports = [] *)}}}}}} {position {%/Libraries/ZBus.bsv 84 11 {Library ZBus}}}
Interface {ZBus::ZBusBusIFC#(type t)} polymorphic {members {{method {Action fromBusSample {ZBusUtil::ZBit#(t) Bool} {{(* ports = ["value", "isJust"] *)}}}} {method {ZBusUtil::ZBit#(t) toBusValue {} {{(* ports = [] *)}}}} {method {Bool toBusCtl {} {{(* ports = [] *)}}}}}} {position {%/Libraries/ZBus.bsv 158 11 {Library ZBus}}}
Enum ZBus::BState {members {HiZN HiZ Nothing}} {width 2} {position {%/Libraries/ZBus.bsv 227 35 {Library ZBus}}}
Interface {ZBus::ZBusClientIFC#(type t)} polymorphic {members {{method {Action drive t {{(* ports = ["value"] *)}}}} {method {t get {} {{(* ports = [] *)}}}} {method {Bool fromBusValid {} {{(* ports = [] *)}}}}}} {position {%/Libraries/ZBus.bsv 317 11 {Library ZBus}}}
Interface {ZBus::ZBusDualIFC#(type t)} polymorphic {members {{interface ZBus::ZBusBusIFC#(t) busIFC {}} {interface ZBus::ZBusClientIFC#(t) clientIFC {}}}} {position {%/Libraries/ZBus.bsv 323 11 {Library ZBus}}}
Interface {ProbeWire::ProbeWire#(type a)} polymorphic {members {{method {a id a {{(* ports = ["x"] *)}}}}}} {position {%/Libraries/ProbeWire.bsv 28 11 {Library ProbeWire}}}

Interface {SPSRAM::VSyncSRAM#(numeric type adrs, numeric type dtas)} polymorphic {members {{method {PrimAction exec {Bit#(adrs) Bit#(dtas) Bit#(1) Bit#(1)} {}}} {method {Bit#(dtas) rdata {} {}}}}} {position {%/Libraries/SPSRAM.bs 67 10 {Library SPSRAM}}}
Interface Clocks::ClockGenIfc {members {{interface Clock gen_clk {}}}} {position {%/Libraries/Clocks.bsv 23 11 {Library Clocks}}}
Interface {Clocks::MakeClockIfc#(type one_bit_type)} polymorphic {members {{method {Action setClockValue one_bit_type {{(* ports = ["value"] *)}}}} {method {one_bit_type getClockValue {} {{(* ports = [] *)}}}} {method {Action setGateCond Bool {{(* ports = ["gate"] *)}}}} {method {Bool getGateCond {} {{(* ports = [] *)}}}} {interface Clock new_clk {}}}} {position {%/Libraries/Clocks.bsv 102 11 {Library Clocks}}}
Interface {Clocks::MakeUngatedClockIfc#(type one_bit_type)} polymorphic {members {{method {Action setClockValue one_bit_type {{(* ports = ["value"] *)}}}} {method {one_bit_type getClockValue {} {{(* ports = [] *)}}}} {method {Action setGateCond Bool {{(* ports = ["gate"] *)}}}} {method {Bool getGateCond {} {{(* ports = [] *)}}}} {method {Bool unused {} {{(* ports = [] *)}}}} {interface Clock new_clk {}}}} {position {%/Libraries/Clocks.bsv 111 11 {Library Clocks}}}
Interface Clocks::GatedClockIfc {members {{method {Action setGateCond Bool {{(* ports = ["gate"] *)}}}} {method {Bool getGateCond {} {{(* ports = [] *)}}}} {interface Clock new_clk {}}}} {position {%/Libraries/Clocks.bsv 263 11 {Library Clocks}}}
Interface Clocks::MuxClkIfc {members {{method {Action select Bool {{(* ports = ["ab"] *)}}}} {interface Clock clock_out {}}}} {position {%/Libraries/Clocks.bsv 346 11 {Library Clocks}}}
Interface Clocks::SelectClkIfc {members {{method {Action select Bool {{(* ports = ["ab"] *)}}}} {interface Clock clock_out {}} {interface Reset reset_out {}}}} {position {%/Libraries/Clocks.bsv 406 11 {Library Clocks}}}
Alias Clocks::ClkNextRdy Bool {position {%/Libraries/Clocks.bsv 495 14 {Library Clocks}}}
Interface Clocks::ClockDividerIfc {members {{interface Clock fastClock {}} {interface Clock slowClock {}} {method {Bool clockReady {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Clocks.bsv 498 11 {Library Clocks}}}
Interface Clocks::ClockDivider_internal {members {{interface Clock slowClock {}} {method {Bool clockReady {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Clocks.bsv 583 11 {Library Clocks}}}
Interface {Clocks::SyncBitIfc#(type one_bit_type)} polymorphic {members {{method {Action send one_bit_type {{(* ports = ["bitData"] *)}}}} {method {one_bit_type read {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Clocks.bsv 683 11 {Library Clocks}}}
Interface Clocks::SyncPulseIfc {members {{method {Action send {} {{(* ports = [] *)}}}} {method {Bool pulse {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Clocks.bsv 997 11 {Library Clocks}}}
Interface {Clocks::RegI#(type a_type)} polymorphic {members {{method {Action write a_type {{(* ports = ["x1"] *)}}}} {method {a_type read {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Clocks.bsv 1162 11 {Library Clocks}}}
Interface {Clocks::SyncFIFOIfc#(type a_type)} polymorphic {members {{method {Action enq a_type {{(* ports = ["sendData"] *)}}}} {method {Action deq {} {{(* ports = [] *)}}}} {method {a_type first {} {{(* ports = [] *)}}}} {method {Bool notFull {} {{(* ports = [] *)}}}} {method {Bool notEmpty {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Clocks.bsv 1276 11 {Library Clocks}}}
Interface Clocks::SyncFIFO0Ifc {members {{method {Action enq {} {{(* ports = [] *)}}}} {method {Action deq {} {{(* ports = [] *)}}}} {method {Bool notFull {} {{(* ports = [] *)}}}} {method {Bool notEmpty {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Clocks.bsv 1285 11 {Library Clocks}}}
Interface {Clocks::DualPortRamIfc#(type addr_t, type data_t)} polymorphic {members {{method {Action write {addr_t data_t} {{(* ports = ["wr_addr", "din"] *)}}}} {method {data_t read addr_t {{(* ports = ["rd_addr"] *)}}}}}} {position {%/Libraries/Clocks.bsv 1597 11 {Library Clocks}}}
Interface {Clocks::CrossingReg#(type a)} polymorphic {members {{method {Action _write a {{(* ports = ["datain"] *)}}}} {method {a _read {} {{(* ports = [] *)}}}} {method {a crossed {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Clocks.bsv 1753 11 {Library Clocks}}}
Interface {Clocks::FIFOF_MC#(type a)} polymorphic {members {{method {Action enq a {{(* ports = ["x1"] *)}}}} {method {Action deq {} {{(* ports = [] *)}}}} {method {a first {} {{(* ports = [] *)}}}} {method {Bool notFull {} {{(* ports = [] *)}}}} {method {Bool i_notFull {} {{(* ports = [] *)}}}} {method {Bool notEmpty {} {{(* ports = [] *)}}}} {method {Bool i_notEmpty {} {{(* ports = [] *)}}}}}} {position {%/Libraries/Clocks.bsv 2017 11 {Library Clocks}}}
Interface Clocks::MakeResetIfc {members {{method {Action assertReset {} {{(* ports = [] *)}}}} {method {Bool isAsserted {} {{(* ports = [] *)}}}} {interface Reset new_rst {}}}} {position {%/Libraries/Clocks.bsv 2269 11 {Library Clocks}}}
Interface Clocks::ResetGenIfc {members {{interface Reset gen_rst {}}}} {position {%/Libraries/Clocks.bsv 2336 11 {Library Clocks}}}
Interface Clocks::MuxRstIfc {members {{method {Action select Bool {{(* ports = ["ab"] *)}}}} {interface Reset reset_out {}}}} {position {%/Libraries/Clocks.bsv 2538 11 {Library Clocks}}}
Interface Clocks::JoinRstIfc {members {{interface Reset reset_out {}}}} {position {%/Libraries/Clocks.bsv 2563 11 {Library Clocks}}}
Typeclass {Clocks::ClockConv#(type a)} {members {{{function b#(a) f(Integer x1, a x2)   provisos (IsModule#(b, c))} mkConverter}}} {instances {{Clocks::ClockConv#(ActionValue#(a))   provisos (Bits#(a, sa))} {Clocks::ClockConv#(ClientServer::Client#(a, b))   provisos (Bits#(b, sb), Bits#(a, sa))} {Clocks::ClockConv#(ClientServer::Server#(a, b))   provisos (Bits#(b, sb), Bits#(a, sa))} {Clocks::ClockConv#(GetPut::Get#(a))   provisos (Bits#(a, sa))} {Clocks::ClockConv#(GetPut::Put#(a))   provisos (Bits#(a, sa))} {Clocks::ClockConv#(function Action f(a x1))   provisos (Bits#(a, sa))}}} {position {%/Libraries/Clocks.bsv 2626 11 {Library Clocks}}}
Alias {TRAM::TRAM#(type tag, type adr, type dta)} {ClientServer::Server#(TRAM::TRAMreq#(tag, adr, dta), Tuple2#(tag, dta))} {position {%/Libraries/TRAM.bs 18 5 {Library TRAM}}}
Alias {TRAM::TRAMclient#(type tag, type adr, type dta)} {ClientServer::Client#(TRAM::TRAMreq#(tag, adr, dta), Tuple2#(tag, dta))} {position {%/Libraries/TRAM.bs 26 5 {Library TRAM}}}
TaggedUnion {TRAM::TRAMreq#(type tg, type adr, type dta)} polymorphic {members {{{Tuple2#(tg, adr)} Read} {{Tuple2#(adr, dta)} Write}}} {position {%/Libraries/TRAM.bs 45 5 {Library TRAM}}}
Alias {TRAM::TRAMresp#(type tg, type dta)} {Tuple2#(tg, dta)} {position {%/Libraries/TRAM.bs 57 5 {Library TRAM}}}
Interface {PAClib::PipeOut#(type t)} polymorphic {members {{method {t first {} {{(* ports = [] *)}}}} {method {Action deq {} {{(* ports = [] *)}}}} {method {Bool notEmpty {} {{(* ports = [] *)}}}}}} {position {%/Libraries/PAClib.bsv 44 11 {Library PAClib}}}
Alias {PAClib::Pipe#(type ta, type tb)} {module f#(PAClib::PipeOut#(ta) x1)(PAClib::PipeOut#(tb))} {position {%/Libraries/PAClib.bsv 55 9 {Library PAClib}}}
Typeclass {PAClib: :VectorTreeReduce#(numeric type n, type a)
} {members {
        {
            {module f#(
                    module x1#(PAClib: :PipeOut#(Tuple2#(a, a)) x1)
                    (PAClib: :PipeOut#(a))
                    , Bit#(32) x2 
                    , PAClib: :PipeOut#(Vector: :Vector#(n, a)) x3)
                    (PAClib: :PipeOut#(a))
            } mkTreeReducePipe
        } {
            {module f#( function a x1(a x1, a x2), 
                function a x2(a x1), 
                Bit#(32) x3, 
                PAClib: :PipeOut#(Vector: :Vector#(n, a)) x4)
                (PAClib: :PipeOut#(a))
            } mkTreeReduceFn
        }
    }
} {instances {
        {PAClib: :VectorTreeReduce#(1, a)   provisos (Bits#(a, sa))
        } {PAClib: :VectorTreeReduce#(2, a)   provisos (Bits#(a, sa))
        } {PAClib: :VectorTreeReduce#(n, a)   provisos (PAClib: :VectorTreeReduce#(n2, a), Div#(n,
            2, n2), Bits#(a, sa))
        }
    }
} {position {%/Libraries/PAClib.bsv 1582 11 {Library PAClib
        }
    }
}