//
// Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
//
// On Sun May  8 13:28:40 BST 2022
//
//
// Ports:
// Name                         I/O  size props
// awready                        O     1
// wready                         O     1
// bid                            O     2
// bresp                          O     2
// bvalid                         O     1
// arready                        O     1
// rid                            O     2
// rdata                          O   128
// rresp                          O     2
// rlast                          O     1
// rvalid                         O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// awvalid                        I     1
// awid                           I     2
// awaddr                         I    14
// awlen                          I     8
// awsize                         I     3
// awburst                        I     2
// awlock                         I     1
// awcache                        I     4
// awprot                         I     3
// awqos                          I     4
// awregion                       I     4
// wvalid                         I     1
// wdata                          I   128
// wstrb                          I    16
// wlast                          I     1
// bready                         I     1
// arvalid                        I     1
// arid                           I     2
// araddr                         I    14
// arlen                          I     8
// arsize                         I     3
// arburst                        I     2
// arlock                         I     1
// arcache                        I     4
// arprot                         I     3
// arqos                          I     4
// arregion                       I     4
// rready                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module axiSlave5_synth(CLK,
		       RST_N,

		       awvalid,
		       awid,
		       awaddr,
		       awlen,
		       awsize,
		       awburst,
		       awlock,
		       awcache,
		       awprot,
		       awqos,
		       awregion,

		       awready,

		       wvalid,
		       wdata,
		       wstrb,
		       wlast,

		       wready,

		       bid,

		       bresp,

		       bvalid,

		       bready,

		       arvalid,
		       arid,
		       araddr,
		       arlen,
		       arsize,
		       arburst,
		       arlock,
		       arcache,
		       arprot,
		       arqos,
		       arregion,

		       arready,

		       rid,

		       rdata,

		       rresp,

		       rlast,

		       rvalid,

		       rready);
  input  CLK;
  input  RST_N;

  // action method aw_awflit
  input  awvalid;
  input  [1 : 0] awid;
  input  [13 : 0] awaddr;
  input  [7 : 0] awlen;
  input  [2 : 0] awsize;
  input  [1 : 0] awburst;
  input  awlock;
  input  [3 : 0] awcache;
  input  [2 : 0] awprot;
  input  [3 : 0] awqos;
  input  [3 : 0] awregion;

  // value method aw_awready
  output awready;

  // action method w_wflit
  input  wvalid;
  input  [127 : 0] wdata;
  input  [15 : 0] wstrb;
  input  wlast;

  // value method w_wready
  output wready;

  // value method b_bid
  output [1 : 0] bid;

  // value method b_bresp
  output [1 : 0] bresp;

  // value method b_buser

  // value method b_bvalid
  output bvalid;

  // action method b_bready
  input  bready;

  // action method ar_arflit
  input  arvalid;
  input  [1 : 0] arid;
  input  [13 : 0] araddr;
  input  [7 : 0] arlen;
  input  [2 : 0] arsize;
  input  [1 : 0] arburst;
  input  arlock;
  input  [3 : 0] arcache;
  input  [2 : 0] arprot;
  input  [3 : 0] arqos;
  input  [3 : 0] arregion;

  // value method ar_arready
  output arready;

  // value method r_rid
  output [1 : 0] rid;

  // value method r_rdata
  output [127 : 0] rdata;

  // value method r_rresp
  output [1 : 0] rresp;

  // value method r_rlast
  output rlast;

  // value method r_ruser

  // value method r_rvalid
  output rvalid;

  // action method r_rready
  input  rready;

  // signals for module outputs
  wire [127 : 0] rdata;
  wire [1 : 0] bid, bresp, rid, rresp;
  wire arready, awready, bvalid, rlast, rvalid, wready;

  // inlined wires
  wire [145 : 0] slave_shim_shim_wff_rv$port0__write_1,
		 slave_shim_shim_wff_rv$port1__read,
		 slave_shim_shim_wff_rv$port2__read;
  wire [144 : 0] axi_sig_wSig_snk_putWire$wget;
  wire [133 : 0] slave_shim_shim_rff_rv$port2__read;
  wire [45 : 0] slave_shim_shim_arff_rv$port0__write_1,
		slave_shim_shim_arff_rv$port1__read,
		slave_shim_shim_awff_rv$port0__write_1,
		slave_shim_shim_awff_rv$port1__read,
		slave_shim_shim_awff_rv$port2__read;
  wire [44 : 0] axi_sig_arSig_snk_putWire$wget,
		axi_sig_awSig_snk_putWire$wget;
  wire [4 : 0] slave_shim_shim_bff_rv$port0__write_1,
	       slave_shim_shim_bff_rv$port1__read,
	       slave_shim_shim_bff_rv$port2__read;
  wire axi_sig_arSig_snk_putWire$whas,
       axi_sig_awSig_snk_putWire$whas,
       axi_sig_bSig_src_dropWire$whas,
       axi_sig_rSig_src_dropWire$whas,
       axi_sig_wSig_snk_putWire$whas,
       slave_shim_shim_arff_rv$EN_port0__write,
       slave_shim_shim_awff_rv$EN_port0__write,
       slave_shim_shim_awff_rv$EN_port1__write,
       slave_shim_shim_bff_rv$EN_port0__write,
       slave_shim_shim_bff_rv$EN_port1__write,
       slave_shim_shim_rff_rv$EN_port1__write,
       slave_shim_shim_wff_rv$EN_port0__write;

  // register slave_shim_shim_arff_rv
  reg [45 : 0] slave_shim_shim_arff_rv;
  wire [45 : 0] slave_shim_shim_arff_rv$D_IN;
  wire slave_shim_shim_arff_rv$EN;

  // register slave_shim_shim_awff_rv
  reg [45 : 0] slave_shim_shim_awff_rv;
  wire [45 : 0] slave_shim_shim_awff_rv$D_IN;
  wire slave_shim_shim_awff_rv$EN;

  // register slave_shim_shim_bff_rv
  reg [4 : 0] slave_shim_shim_bff_rv;
  wire [4 : 0] slave_shim_shim_bff_rv$D_IN;
  wire slave_shim_shim_bff_rv$EN;

  // register slave_shim_shim_rff_rv
  reg [133 : 0] slave_shim_shim_rff_rv;
  wire [133 : 0] slave_shim_shim_rff_rv$D_IN;
  wire slave_shim_shim_rff_rv$EN;

  // register slave_shim_shim_wff_rv
  reg [145 : 0] slave_shim_shim_wff_rv;
  wire [145 : 0] slave_shim_shim_wff_rv$D_IN;
  wire slave_shim_shim_wff_rv$EN;

  // ports of submodule slave_awResp
  wire [3 : 0] slave_awResp$D_IN, slave_awResp$D_OUT;
  wire slave_awResp$CLR,
       slave_awResp$DEQ,
       slave_awResp$EMPTY_N,
       slave_awResp$ENQ,
       slave_awResp$FULL_N;

  // ports of submodule slave_wResp
  wire slave_wResp$CLR,
       slave_wResp$DEQ,
       slave_wResp$D_IN,
       slave_wResp$EMPTY_N,
       slave_wResp$ENQ,
       slave_wResp$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_slave_getAXI4_WFlit;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h1654;
  // synopsys translate_on

  // remaining internal signals
  wire [255 : 0] slave_shim_shim_wff_rv_port1__read_BITS_144_TO_ETC___d17,
		 slave_shim_shim_wff_rv_port1__read_BITS_144_TO_ETC___d19,
		 slave_shim_shim_wff_rv_port1__read_BITS_144_TO_ETC___d21;
  wire [132 : 0] slave_shim_shim_rff_rv_BITS_132_TO_0__q1;
  wire [3 : 0] slave_shim_shim_bff_rvport1__read_BITS_3_TO_0__q2;

  // value method aw_awready
  assign awready = !slave_shim_shim_awff_rv[45] ;

  // value method w_wready
  assign wready = !slave_shim_shim_wff_rv[145] ;

  // value method b_bid
  assign bid = slave_shim_shim_bff_rvport1__read_BITS_3_TO_0__q2[3:2] ;

  // value method b_bresp
  assign bresp = slave_shim_shim_bff_rvport1__read_BITS_3_TO_0__q2[1:0] ;

  // value method b_bvalid
  assign bvalid = slave_shim_shim_bff_rv$port1__read[4] ;

  // value method ar_arready
  assign arready = !slave_shim_shim_arff_rv[45] ;

  // value method r_rid
  assign rid = slave_shim_shim_rff_rv_BITS_132_TO_0__q1[132:131] ;

  // value method r_rdata
  assign rdata = slave_shim_shim_rff_rv_BITS_132_TO_0__q1[130:3] ;

  // value method r_rresp
  assign rresp = slave_shim_shim_rff_rv_BITS_132_TO_0__q1[2:1] ;

  // value method r_rlast
  assign rlast = slave_shim_shim_rff_rv_BITS_132_TO_0__q1[0] ;

  // value method r_rvalid
  assign rvalid = slave_shim_shim_rff_rv[133] ;

  // submodule slave_awResp
  FIFO2 #(.width(32'd4), .guarded(1'd1)) slave_awResp(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(slave_awResp$D_IN),
						      .ENQ(slave_awResp$ENQ),
						      .DEQ(slave_awResp$DEQ),
						      .CLR(slave_awResp$CLR),
						      .D_OUT(slave_awResp$D_OUT),
						      .FULL_N(slave_awResp$FULL_N),
						      .EMPTY_N(slave_awResp$EMPTY_N));

  // submodule slave_wResp
  FIFO2 #(.width(32'd1), .guarded(1'd1)) slave_wResp(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(slave_wResp$D_IN),
						     .ENQ(slave_wResp$ENQ),
						     .DEQ(slave_wResp$DEQ),
						     .CLR(slave_wResp$CLR),
						     .D_OUT(),
						     .FULL_N(slave_wResp$FULL_N),
						     .EMPTY_N(slave_wResp$EMPTY_N));

  // rule RL_slave_getAXI4_WFlit
  assign WILL_FIRE_RL_slave_getAXI4_WFlit =
	     slave_shim_shim_wff_rv$port1__read[145] && slave_wResp$FULL_N ;

  // inlined wires
  assign axi_sig_awSig_snk_putWire$wget =
	     { awid,
	       awaddr,
	       awlen,
	       awsize,
	       awburst,
	       awlock,
	       awcache,
	       awprot,
	       awqos,
	       awregion } ;
  assign axi_sig_awSig_snk_putWire$whas =
	     awvalid && !slave_shim_shim_awff_rv[45] ;
  assign axi_sig_wSig_snk_putWire$wget = { wdata, wstrb, wlast } ;
  assign axi_sig_wSig_snk_putWire$whas =
	     wvalid && !slave_shim_shim_wff_rv[145] ;
  assign axi_sig_arSig_snk_putWire$wget =
	     { arid,
	       araddr,
	       arlen,
	       arsize,
	       arburst,
	       arlock,
	       arcache,
	       arprot,
	       arqos,
	       arregion } ;
  assign axi_sig_arSig_snk_putWire$whas =
	     arvalid && !slave_shim_shim_arff_rv[45] ;
  assign axi_sig_bSig_src_dropWire$whas =
	     slave_shim_shim_bff_rv$port1__read[4] && bready ;
  assign axi_sig_rSig_src_dropWire$whas =
	     slave_shim_shim_rff_rv[133] && rready ;
  assign slave_shim_shim_awff_rv$EN_port0__write =
	     !slave_shim_shim_awff_rv[45] && axi_sig_awSig_snk_putWire$whas ;
  assign slave_shim_shim_awff_rv$port0__write_1 =
	     { 1'd1, axi_sig_awSig_snk_putWire$wget } ;
  assign slave_shim_shim_awff_rv$port1__read =
	     slave_shim_shim_awff_rv$EN_port0__write ?
	       slave_shim_shim_awff_rv$port0__write_1 :
	       slave_shim_shim_awff_rv ;
  assign slave_shim_shim_awff_rv$EN_port1__write =
	     slave_shim_shim_awff_rv$port1__read[45] && slave_awResp$FULL_N ;
  assign slave_shim_shim_awff_rv$port2__read =
	     slave_shim_shim_awff_rv$EN_port1__write ?
	       46'h0AAAAAAAAAAA :
	       slave_shim_shim_awff_rv$port1__read ;
  assign slave_shim_shim_wff_rv$EN_port0__write =
	     !slave_shim_shim_wff_rv[145] && axi_sig_wSig_snk_putWire$whas ;
  assign slave_shim_shim_wff_rv$port0__write_1 =
	     { 1'd1, axi_sig_wSig_snk_putWire$wget } ;
  assign slave_shim_shim_wff_rv$port1__read =
	     slave_shim_shim_wff_rv$EN_port0__write ?
	       slave_shim_shim_wff_rv$port0__write_1 :
	       slave_shim_shim_wff_rv ;
  assign slave_shim_shim_wff_rv$port2__read =
	     WILL_FIRE_RL_slave_getAXI4_WFlit ?
	       146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_shim_shim_wff_rv$port1__read ;
  assign slave_shim_shim_bff_rv$EN_port0__write =
	     slave_awResp$EMPTY_N && slave_wResp$EMPTY_N &&
	     !slave_shim_shim_bff_rv[4] ;
  assign slave_shim_shim_bff_rv$port0__write_1 =
	     { 1'd1, slave_awResp$D_OUT } ;
  assign slave_shim_shim_bff_rv$port1__read =
	     slave_shim_shim_bff_rv$EN_port0__write ?
	       slave_shim_shim_bff_rv$port0__write_1 :
	       slave_shim_shim_bff_rv ;
  assign slave_shim_shim_bff_rv$EN_port1__write =
	     slave_shim_shim_bff_rv$port1__read[4] &&
	     axi_sig_bSig_src_dropWire$whas ;
  assign slave_shim_shim_bff_rv$port2__read =
	     slave_shim_shim_bff_rv$EN_port1__write ?
	       5'd10 :
	       slave_shim_shim_bff_rv$port1__read ;
  assign slave_shim_shim_arff_rv$EN_port0__write =
	     !slave_shim_shim_arff_rv[45] && axi_sig_arSig_snk_putWire$whas ;
  assign slave_shim_shim_arff_rv$port0__write_1 =
	     { 1'd1, axi_sig_arSig_snk_putWire$wget } ;
  assign slave_shim_shim_arff_rv$port1__read =
	     slave_shim_shim_arff_rv$EN_port0__write ?
	       slave_shim_shim_arff_rv$port0__write_1 :
	       slave_shim_shim_arff_rv ;
  assign slave_shim_shim_rff_rv$EN_port1__write =
	     slave_shim_shim_rff_rv[133] && axi_sig_rSig_src_dropWire$whas ;
  assign slave_shim_shim_rff_rv$port2__read =
	     slave_shim_shim_rff_rv$EN_port1__write ?
	       134'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_shim_shim_rff_rv ;

  // register slave_shim_shim_arff_rv
  assign slave_shim_shim_arff_rv$D_IN = slave_shim_shim_arff_rv$port1__read ;
  assign slave_shim_shim_arff_rv$EN = 1'b1 ;

  // register slave_shim_shim_awff_rv
  assign slave_shim_shim_awff_rv$D_IN = slave_shim_shim_awff_rv$port2__read ;
  assign slave_shim_shim_awff_rv$EN = 1'b1 ;

  // register slave_shim_shim_bff_rv
  assign slave_shim_shim_bff_rv$D_IN = slave_shim_shim_bff_rv$port2__read ;
  assign slave_shim_shim_bff_rv$EN = 1'b1 ;

  // register slave_shim_shim_rff_rv
  assign slave_shim_shim_rff_rv$D_IN = slave_shim_shim_rff_rv$port2__read ;
  assign slave_shim_shim_rff_rv$EN = 1'b1 ;

  // register slave_shim_shim_wff_rv
  assign slave_shim_shim_wff_rv$D_IN = slave_shim_shim_wff_rv$port2__read ;
  assign slave_shim_shim_wff_rv$EN = 1'b1 ;

  // submodule slave_awResp
  assign slave_awResp$D_IN =
	     { slave_shim_shim_awff_rv$port1__read[44:43], 2'd0 } ;
  assign slave_awResp$ENQ =
	     slave_shim_shim_awff_rv$port1__read[45] && slave_awResp$FULL_N ;
  assign slave_awResp$DEQ =
	     slave_awResp$EMPTY_N && slave_wResp$EMPTY_N &&
	     !slave_shim_shim_bff_rv[4] ;
  assign slave_awResp$CLR = 1'b0 ;

  // submodule slave_wResp
  assign slave_wResp$D_IN = 1'd1 ;
  assign slave_wResp$ENQ =
	     WILL_FIRE_RL_slave_getAXI4_WFlit &&
	     slave_shim_shim_wff_rv$port1__read[0] ;
  assign slave_wResp$DEQ =
	     slave_awResp$EMPTY_N && slave_wResp$EMPTY_N &&
	     !slave_shim_shim_bff_rv[4] ;
  assign slave_wResp$CLR = 1'b0 ;

  // remaining internal signals
  assign slave_shim_shim_bff_rvport1__read_BITS_3_TO_0__q2 =
	     slave_shim_shim_bff_rv$port1__read[3:0] ;
  assign slave_shim_shim_rff_rv_BITS_132_TO_0__q1 =
	     slave_shim_shim_rff_rv[132:0] ;
  assign slave_shim_shim_wff_rv_port1__read_BITS_144_TO_ETC___d17 =
	     slave_shim_shim_wff_rv$port1__read[144:17] *
	     slave_shim_shim_wff_rv$port1__read[144:17] ;
  assign slave_shim_shim_wff_rv_port1__read_BITS_144_TO_ETC___d19 =
	     slave_shim_shim_wff_rv_port1__read_BITS_144_TO_ETC___d17[127:0] *
	     128'd1000 ;
  assign slave_shim_shim_wff_rv_port1__read_BITS_144_TO_ETC___d21 =
	     slave_shim_shim_wff_rv_port1__read_BITS_144_TO_ETC___d19[127:0] *
	     128'd5 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        slave_shim_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY 46'h0AAAAAAAAAAA;
	slave_shim_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY 46'h0AAAAAAAAAAA;
	slave_shim_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 5'd10;
	slave_shim_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    134'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	slave_shim_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (slave_shim_shim_arff_rv$EN)
	  slave_shim_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_shim_shim_arff_rv$D_IN;
	if (slave_shim_shim_awff_rv$EN)
	  slave_shim_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_shim_shim_awff_rv$D_IN;
	if (slave_shim_shim_bff_rv$EN)
	  slave_shim_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_shim_shim_bff_rv$D_IN;
	if (slave_shim_shim_rff_rv$EN)
	  slave_shim_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_shim_shim_rff_rv$D_IN;
	if (slave_shim_shim_wff_rv$EN)
	  slave_shim_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_shim_shim_wff_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    slave_shim_shim_arff_rv = 46'h2AAAAAAAAAAA;
    slave_shim_shim_awff_rv = 46'h2AAAAAAAAAAA;
    slave_shim_shim_bff_rv = 5'h0A;
    slave_shim_shim_rff_rv = 134'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    slave_shim_shim_wff_rv = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (axi_sig_awSig_snk_putWire$whas && slave_shim_shim_awff_rv[45])
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi_sig_wSig_snk_putWire$whas && slave_shim_shim_wff_rv[145])
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_getAXI4_WFlit)
	begin
	  v__h1654 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_getAXI4_WFlit)
	$display("%0t - SLAVE %d - computed %d",
		 v__h1654,
		 $signed(32'd5),
		 slave_shim_shim_wff_rv_port1__read_BITS_144_TO_ETC___d21[127:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (axi_sig_bSig_src_dropWire$whas &&
	  !slave_shim_shim_bff_rv$port1__read[4])
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi_sig_arSig_snk_putWire$whas && slave_shim_shim_arff_rv[45])
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (axi_sig_rSig_src_dropWire$whas && !slave_shim_shim_rff_rv[133])
	$display("WARNING: %m - dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // axiSlave5_synth

