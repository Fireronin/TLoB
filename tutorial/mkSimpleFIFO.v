//
// Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
//
// On Tue Apr 19 11:59:43 CEST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_enq                        O     1
// RDY_deq                        O     1 reg
// first                          O    32 reg
// RDY_first                      O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// enq_value                      I    32 reg
// EN_enq                         I     1
// EN_deq                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSimpleFIFO(CLK,
		    RST_N,

		    enq_value,
		    EN_enq,
		    RDY_enq,

		    EN_deq,
		    RDY_deq,

		    first,
		    RDY_first);
  input  CLK;
  input  RST_N;

  // action method enq
  input  [31 : 0] enq_value;
  input  EN_enq;
  output RDY_enq;

  // action method deq
  input  EN_deq;
  output RDY_deq;

  // value method first
  output [31 : 0] first;
  output RDY_first;

  // signals for module outputs
  wire [31 : 0] first;
  wire RDY_deq, RDY_enq, RDY_first;

  // register data
  reg [31 : 0] data;
  wire [31 : 0] data$D_IN;
  wire data$EN;

  // register isFull
  reg isFull;
  wire isFull$D_IN, isFull$EN;

  // action method enq
  assign RDY_enq = !isFull ;

  // action method deq
  assign RDY_deq = isFull ;

  // value method first
  assign first = data ;
  assign RDY_first = isFull ;

  // register data
  assign data$D_IN = enq_value ;
  assign data$EN = EN_enq ;

  // register isFull
  assign isFull$D_IN = !EN_deq ;
  assign isFull$EN = EN_deq || EN_enq ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        data <= `BSV_ASSIGNMENT_DELAY 32'd0;
	isFull <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (data$EN) data <= `BSV_ASSIGNMENT_DELAY data$D_IN;
	if (isFull$EN) isFull <= `BSV_ASSIGNMENT_DELAY isFull$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    data = 32'hAAAAAAAA;
    isFull = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSimpleFIFO

